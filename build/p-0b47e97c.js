import{kM as e,kN as r,kV as s,kW as t,kU as i,kX as a,o4 as n,oe as l,od as o,iP as p,P as c,T as d,ad as u,U as h,k5 as f,of as y,s as v,d as m,H as g,np as _,mF as b,r as j,p as S,hx as T,b7 as w,bZ as k,k_ as W,q as O}from"./p-aad64c9f.js";import{p as R}from"./p-2adf4929.js";import{m as B,f as M,t as I}from"./p-9bb3ed3d.js";import{o as L}from"./p-a250b290.js";import"./p-2af77f97.js";import"./p-44e1cc72.js";import"./p-d8f50632.js";import"./p-dad6a156.js";import"./p-d5a66c42.js";import"./p-07c8b3b5.js";import"./p-1062e8df.js";import"./p-4e60756f.js";import"./p-21ce5524.js";import"./p-aff89b86.js";import"./p-da522976.js";import"./p-d492d39b.js";import"./p-c783c054.js";import"./p-875cbb57.js";var P;const A=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let D=P=class extends(e(r(B(R(M(s(t(i(a(n(l(o(p))))))))))))){constructor(...e){super(...e),this.listMode="show",this.isReference=null,this.operationalLayerType="ArcGISTiledMapServiceLayer",this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type="tile",this.url=null}normalizeCtorArgs(e,r){return"string"==typeof e?{url:e,...r}:e}load(e){const r=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(c).then((()=>this._fetchService(r)))),Promise.resolve(this)}get attributionDataUrl(){const e=this.parsedUrl?.path.toLowerCase();return e?this._getDefaultAttribution(this._getMapName(e)):null}readSpatialReference(e,r){return(e=e||r.tileInfo?.spatialReference)&&d.fromJSON(e)}writeSublayers(e,r,s,t){if(!this.loaded||!e)return;const i=e.slice().reverse().flatten((({sublayers:e})=>e&&e.toArray().reverse())).toArray(),a=[],n={writeSublayerStructure:!1,...t};i.forEach((e=>{const r=e.write({},n);a.push(r)}));a.some((e=>Object.keys(e).length>1))&&(r.layers=a)}get tileServers(){return this._getDefaultTileServers(this.parsedUrl?.path)}castTileServers(e){return Array.isArray(e)?e.map((e=>u(e).path)):null}fetchTile(e,r,s,t={}){const{signal:i}=t,a=this.getTileUrl(e,r,s),n={responseType:"image",signal:i,query:{...this.refreshParameters}};return h(a,n).then((e=>e.data))}async fetchImageBitmapTile(e,r,s,t={}){const{signal:i}=t;if(this.fetchTile!==P.prototype.fetchTile){const a=await this.fetchTile(e,r,s,t);return L(a,e,r,s,i)}const a=this.getTileUrl(e,r,s),n={responseType:"blob",signal:i,query:{...this.refreshParameters}},{data:l}=await h(a,n);return L(l,e,r,s,i)}getTileUrl(e,r,s){const t=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,i=f({...this.parsedUrl?.query,blankTile:!t&&null,...this.customParameters,token:this.apiKey}),a=this.tileServers;return`${a&&a.length?a[r%a.length]:this.parsedUrl?.path}/tile/${e}/${r}/${s}${i?"?"+i:""}`}loadAll(){return y(this,(e=>{e(this.allSublayers)}))}_fetchService(e){return new Promise(((r,s)=>{if(this.sourceJSON){if(null!=this.sourceJSON.bandCount&&null!=this.sourceJSON.pixelSizeX)throw new v("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");return void r({data:this.sourceJSON})}if(!this.parsedUrl)throw new v("tile-layer:undefined-url","layer's url is not defined");const t=m(this.parsedUrl.path);if(null!=t&&"ImageServer"===t.serverType)throw new v("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");h(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},responseType:"json",signal:e}).then(r,s)})).then((r=>{let s=this.url;if(r.ssl&&(s=this.url=s.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl}),10.1===this.version&&!g(s))return this._fetchServerVersion(s,e).then((e=>{this.read({currentVersion:e})})).catch((()=>{}))}))}_fetchServerVersion(e,r){if(!_(e))return Promise.reject();const s=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return h(s,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:r}).then((e=>{if(e.data&&e.data.currentVersion)return e.data.currentVersion;throw new v("tile-layer:version-not-available")}))}_getMapName(e){const r=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^/]+(\/[^/]+)*)\/mapserver/i);return r?r[2]:void 0}_getDefaultAttribution(e){if(null==e)return null;let r;e=e.toLowerCase();for(let s=0,t=A.length;s<t;s++)if(r=A[s],r.toLowerCase().includes(e))return b("//static.arcgis.com/attribution/"+r);return null}_getDefaultTileServers(e){if(null==e)return[];const r=-1!==e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i),s=-1!==e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i);return r||s?[e,e.replace(r?/server\.arcgisonline/i:/services\.arcgisonline/i,r?"services.arcgisonline":"server.arcgisonline")]:[]}get hasOverriddenFetchTile(){return!this.fetchTile[G]}};j([S({readOnly:!0})],D.prototype,"attributionDataUrl",null),j([S({type:["show","hide","hide-children"]})],D.prototype,"listMode",void 0),j([S({json:{read:!0,write:!0}})],D.prototype,"blendMode",void 0),j([S({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],D.prototype,"isReference",void 0),j([S({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],D.prototype,"operationalLayerType",void 0),j([S({type:Boolean})],D.prototype,"resampling",void 0),j([S()],D.prototype,"sourceJSON",void 0),j([S({type:d})],D.prototype,"spatialReference",void 0),j([T("spatialReference",["spatialReference","tileInfo"])],D.prototype,"readSpatialReference",null),j([S({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],D.prototype,"path",void 0),j([S({readOnly:!0})],D.prototype,"sublayers",void 0),j([w("sublayers",{layers:{type:[I]}})],D.prototype,"writeSublayers",null),j([S({json:{read:!1,write:!1}})],D.prototype,"popupEnabled",void 0),j([S()],D.prototype,"tileServers",null),j([k("tileServers")],D.prototype,"castTileServers",null),j([S({readOnly:!0,json:{read:!1}})],D.prototype,"type",void 0),j([S(W)],D.prototype,"url",void 0),D=P=j([O("esri.layers.TileLayer")],D);const G=Symbol("default-fetch-tile");D.prototype.fetchTile[G]=!0;const $=D;export default $;
//# sourceMappingURL=p-0b47e97c.js.map