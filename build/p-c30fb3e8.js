import{fp as t,dG as e,_ as i,g1 as s,lz as n,s as r,a,fw as l,av as o,cB as c,U as h,kr as u,S as f,jR as d,an as p,ao as m,hw as y,ap as w,bt as x,b4 as g,dC as v,aN as I,fx as b,ff as S,aV as R,c3 as M,jW as T,lA as F,d3 as k,lB as P,aY as C,h as O,V as D,b3 as B,c_ as _,h0 as E,h1 as N,hr as A,hs as j,kz as z,kV as L,hq as G,kq as H,ht as W,dE as J,fa as $,di as U,lf as V,du as q,hD as Y,kt as X,ah as K,fg as Q,dF as Z,kD as tt,g2 as et}from"./p-3013819f.js";import{c as it,N as st,l as nt,d as rt,b as at,h as lt,K as ot,B as ct,S as ht,E as ut,V as ft,t as dt,p as pt,m as mt,a as yt}from"./p-7dace006.js";import{h as wt,D as xt,i as gt,a as vt,p as It,d as bt,o as St,f as Rt,g as Mt}from"./p-208e4927.js";import{S as Tt,i as Ft,m as kt,L as Pt,z as Ct,a as Ot,h as Dt,D as Bt,P as _t,E as Et,F as Nt,U as At,N as jt,R as zt,H as Lt,I as Gt,J as Ht,K as Wt}from"./p-0ad1433d.js";import{m as Jt,x as $t,h as Ut,s as Vt,i as qt}from"./p-0dd2cf60.js";import{a as Yt,D as Xt,R as Kt,b as Qt,q as Zt,u as te,f as ee,s as ie,E as se,W as ne,T as re}from"./p-dd344c44.js";import{T as ae,j as le,r as oe,o as ce,V as he,J as ue,e as fe,Z as de,C as pe,D as me,U as ye}from"./p-e7f8bbfb.js";import{R as we,f as xe,i as ge,y as ve,c as Ie,N as be}from"./p-3809040a.js";import{T as Se}from"./p-e5ad4495.js";import"./p-3b51db5e.js";import"./p-2779f4bc.js";import"./p-bc7fdef1.js";const Re=8,Me=256;let Te=0,Fe=class extends(t(e)){constructor(){super(...arguments),this._tileFetchQueue=new i({concurrency:32,process:(t,e)=>this._fetchRawTile(t.pyramidLevel,t.row,t.col,{...t.options,signal:e})}),this.datasetName=null,this.datasetFormat=null,this.hasUniqueSourceStorageInfo=!0,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}async init(){const t=ae();this.addResolvingPromise(t),await this.when()}normalizeCtorArgs(t){return t?.ioConfig&&(t={...t,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:s.create(),...t.ioConfig}}),t}get _isGlobalWrappableSource(){const{rasterInfo:t}=this,e=me(t.spatialReference);return null!=e&&t.extent.width>=e/2}get _hasNoneOrGCSShiftTransform(){const{transform:t}=this.rasterInfo;return null==t||"gcs-shift"===t.type}set rasterJobHandler(t){this._set("rasterJobHandler",t),"Function"===this.datasetFormat&&this.primaryRasters?.rasters?.forEach((e=>e.rasterJobHandler=t))}get rasterId(){return this.url||"rasterId-"+Te++}set url(t){this._set("url",n(t,r.getLogger(this)))}async open(t){throw new a("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(t,e,i,s={}){const n=s.tileInfo||this.rasterInfo.storageInfo.tileInfo,r=this.getTileExtentFromTileInfo(t,e,i,n);return s={noClip:!0,...s},this.fetchPixels(r,n.size[0],n.size[1],s)}async identify(t,e={}){t=l(o,t).clone().normalize();const{multidimensionalDefinition:i,timeExtent:s}=e,{rasterInfo:n}=this,{hasMultidimensionalTranspose:r,multidimensionalInfo:a}=n;let{transposedVariableName:h}=e;const u=null!=a&&r&&(null!=s||wt(i));if(u&&!h){h=null!=i&&i.length>0?i[0].variableName??void 0:a.variables[0].name,e={...e,transposedVariableName:h}}e=this._getRequestOptionsWithSliceId(e);const{spatialReference:f,extent:d}=n,{datumTransformation:p}=e;let m=le(t,f,p);if(!d.intersects(m))return{location:m,value:null};if(null!=n.transform){const t=n.transform.inverseTransform(m);if(!n.nativeExtent.intersects(t))return{location:t,value:null};m=t}let y=0;const w=null!=h&&null!=a&&n.hasMultidimensionalTranspose;if("Function"===this.datasetFormat){const t=this.primaryRasters.rasters[0];if(w)return t.identify(m,e);const{pixelSize:s}=n,r=3,a=s.x*r/2,l=s.y*r/2,o=new c({xmin:m.x-a,xmax:m.x+a,ymin:m.y-l,ymax:m.y+l,spatialReference:f}),h={interpolation:"nearest",multidimensionalDefinition:i,sliceId:e.sliceId},{pixelBlock:u}=await t.fetchPixels(o,r,r,h),{pixelBlock:d}=await this.fetchPixels(o,r,r,h);if(null==u)return{location:m,value:null};const p=Math.floor(r*r*.5),y=!u.mask||u.mask[p]?u.pixels.map((t=>t[p])):null;let x;return null!=d&&(x=!d.mask||d.mask[p]?d.pixels.map((t=>t[p])):void 0),{location:m,value:y,processedValue:x,pyramidLevel:0}}if(!w)if(e.srcResolution){y=oe(e.srcResolution,n,this.ioConfig.sampling).pyramidLevel}else if(y=await this.computeBestPyramidLevelForLocation(t,e),null==y)return{location:m,value:null};const x=this.identifyPixelLocation(m,y,null,w);if(null===x)return{location:m,value:null};const{row:g,col:v,rowOffset:I,colOffset:b,blockWidth:S}=x,R=h??e.sliceId,M=qt(this.rasterId,R),T=`${y}/${g}/${v}`;let F=Jt(M,null,T);null==F&&(F=this.fetchRawTile(y,g,v,e),$t(M,null,T,F));const k=await F;if(!k?.pixels?.length)return{location:m,value:null};const P=I*S+b;return this._processIdentifyResult(k,{srcLocation:m,position:P,pyramidLevel:y,useTransposedTile:!!w,requestSomeSlices:u,identifyOptions:e})}async fetchPixels(t,e,i,s={}){t=ce(t),s=this._getRequestOptionsWithSliceId(s);const{_hasNoneOrGCSShiftTransform:n}=this;if(s.requestRawData&&n)return this._fetchPixels(t,e,i,s);const r=me(t.spatialReference),a=he(t);if(null==r||0===a||1===a&&this._isGlobalWrappableSource&&n)return this._fetchPixels(t,e,i,s);if(a>=3)return{extent:t,pixelBlock:null};const l=[],{xmin:o,xmax:h}=t,u=Math.round(r/(h-o)*e),f=u-Math.round((r/2-o)/(h-o)*e);let d=0;const p=[];for(let n=0;n<=a;n++){const m=new c({xmin:0===n?o:-r/2,xmax:n===a?h-r*n:r/2,ymin:t.ymin,ymax:t.ymax,spatialReference:t.spatialReference}),y=0===n?u-f:n===a?e-d:u;d+=y,p.push(y);const w=s.disableWrapAround&&n>0?null:this._fetchPixels(m,y,i,s);l.push(w)}const m=(await Promise.all(l)).map((t=>t?.pixelBlock));let y=null;const w={width:e,height:i};if(this.rasterJobHandler){y=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:m,srcMosaicSize:w,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:p},s)).pixelBlock}else y=Yt(m,w,{blockWidths:p});return{extent:t,srcExtent:ue(t,this.rasterInfo.spatialReference,s.datumTransformation),pixelBlock:y}}async fetchRawPixels(t,e,i,s={}){e={x:Math.floor(e.x),y:Math.floor(e.y)};const n=await this._fetchRawTiles(t,e,i,s),{nativeExtent:r,nativePixelSize:a,storageInfo:l}=this.rasterInfo,o=2**t,h=a.x*o,u=a.y*o,f=new c({xmin:r.xmin+h*e.x,xmax:r.xmin+h*(e.x+i.width-1),ymin:r.ymax-u*(e.y+i.height-1),ymax:r.ymax-u*e.y,spatialReference:r.spatialReference});if(!n)return{extent:f,srcExtent:f,pixelBlock:null};const{pixelBlocks:d,mosaicSize:p}=n;if(1===d.length&&null!=d[0]&&d[0].width===i.width&&d[0].height===i.height)return{extent:f,srcExtent:f,pixelBlock:n.pixelBlocks[0]};const m=t>0?l.pyramidBlockWidth:l.blockWidth,y=t>0?l.pyramidBlockHeight:l.blockHeight,w={x:e.x%m,y:e.y%y};let x;if(this.rasterJobHandler){x=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:d,srcMosaicSize:p,destDimension:i,clipOffset:w,clipSize:i,coefs:null,sampleSpacing:null,interpolation:s.interpolation,alignmentInfo:null,blockWidths:null},s)).pixelBlock}else x=Yt(d,p,{clipOffset:w,clipSize:i});return{extent:f,srcExtent:f,pixelBlock:x}}fetchRawTile(t,e,i,s){throw new a("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(t){return ue(this.rasterInfo.extent,t)}decodePixelBlock(t,e){return!this.rasterJobHandler||e.useCanvas?Tt(t,e):this.rasterJobHandler.decode({data:t,options:e})}async request(t,e,i=0){const{customFetchParameters:s}=this.ioConfig,{range:n,query:r,headers:a}=e;i=i??e.retryCount??this.ioConfig.retryCount;const l=n?{Range:`bytes=${n.from}-${n.to}`}:null;try{return await h(t,{...e,query:{...r,...s},headers:{...a,...l}})}catch(s){if(i>0)return i--,this.request(t,e,i);throw s}}getSliceIndex(t){const{multidimensionalInfo:e}=this.rasterInfo;return null==e||null==t||0===t.length?null:xt(t,e)}getTileExtentFromTileInfo(t,e,i,s){const n=s.lodAt(t);return this.getTileExtent({x:n.resolution,y:n.resolution},e,i,s.origin,s.spatialReference,s.size)}updateTileInfo(){const{storageInfo:t,spatialReference:e,extent:i,pixelSize:n}=this.rasterInfo;if(!t.tileInfo){const r=[],a=t.maximumPyramidLevel||0;let l=Math.max(n.x,n.y),c=1/.0254*96*l;for(let t=0;t<=a;t++)r.unshift(new u({level:a-t,resolution:l,scale:c})),l*=2,c*=2;const h=new o({x:i.xmin,y:i.ymax,spatialReference:e});t.tileInfo=new s({origin:h,size:[t.blockWidth,t.blockHeight],spatialReference:e,lods:r}),t.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(t,e=512,i=512,s){const{width:n,height:r,nativeExtent:a,pixelSize:l,spatialReference:c}=t,h=new o({x:a.xmin,y:a.ymax,spatialReference:c});null==s&&(s=Math.max(0,Math.round(Math.log(Math.max(n,r))/Math.LN2-8)));const u=this.computeBlockBoundary(a,512,512,{x:a.xmin,y:a.ymax},[l],s);t.storageInfo=new Ft({blockWidth:e,blockHeight:i,pyramidBlockWidth:e,pyramidBlockHeight:i,origin:h,firstPyramidLevel:1,maximumPyramidLevel:s,blockBoundary:u})}async computeBestPyramidLevelForLocation(t,e={}){return 0}computeBlockBoundary(t,e,i,s,n,r=0,a=2){if(1===n.length&&r>0){n=[...n];let{x:t,y:e}=n[0];for(let i=0;i<r;i++)t*=a,e*=a,n.push({x:t,y:e})}const l=[],{x:o,y:c}=s;for(let s=0;s<n.length;s++){const{x:r,y:a}=n[s];l.push({minCol:Math.floor((t.xmin-o+.1*r)/e/r),maxCol:Math.floor((t.xmax-o-.1*r)/e/r),minRow:Math.floor((c-t.ymax+.1*a)/i/a),maxRow:Math.floor((c-t.ymin-.1*a)/i/a)})}return l}getPyramidPixelSize(t){const{nativePixelSize:e}=this.rasterInfo,{pyramidResolutions:i,pyramidScalingFactor:s}=this.rasterInfo.storageInfo;if(0===t)return e;if(null!=i&&i.length)return i[t-1];const n=s**t;return{x:e.x*n,y:e.y*n}}identifyPixelLocation(t,e,i,s){const{spatialReference:n,nativeExtent:r,storageInfo:a}=this.rasterInfo,{maximumPyramidLevel:l,origin:o,transposeInfo:c}=a,h=s&&null!=c?c.tileSize[0]:a.blockWidth,u=s&&null!=c?c.tileSize[1]:a.blockHeight,f=le(t,n,i);if(!r.intersects(f))return null;if(e<0||e>l)return null;const d=this.getPyramidPixelSize(e),{x:p,y:m}=d,y=(o.y-f.y)/m/u,w=(f.x-o.x)/p/h,x=Math.min(u-1,Math.floor((y-Math.floor(y))*u)),g=Math.min(h-1,Math.floor((w-Math.floor(w))*h));return{pyramidLevel:e,row:Math.floor(y),col:Math.floor(w),rowOffset:x,colOffset:g,blockWidth:h,srcLocation:f}}getTileExtent(t,e,i,s,n,r){const[a,l]=r,o=s.x+i*a*t.x,h=o+a*t.x,u=s.y-e*l*t.y,f=u-l*t.y;return new c({xmin:o,xmax:h,ymin:f,ymax:u,spatialReference:n})}getBlockWidthHeight(t){return{blockWidth:t>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:t>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(t,e,i){const s=this.rasterInfo.storageInfo.blockBoundary[t];return!s||s.maxRow<e||s.maxCol<i||s.minRow>e||s.minCol>i}updateImageSpaceRasterInfo(t){const{extent:e,pixelSize:i}=t;if(-.5===e.xmin&&.5===e.ymax&&1===i.x&&1===i.y&&null==t.transform)return;const{width:s,height:n}=t,r=x.WebMercator;t.spatialReference=r,t.extent=t.nativeExtent=new c({xmin:-.5,ymax:.5,xmax:s-.5,ymin:.5-n,spatialReference:r}),t.isPseudoSpatialReference=!0,t.transform=null,t.pixelSize=new o({x:1,y:1,spatialReference:r});const{extent:a,storageInfo:l}=t;if(l){l.origin=new o({x:a.xmin,y:a.ymax,spatialReference:r});const{tileInfo:e}=l;if(e){e.origin=l.origin;const i=(t.nativePixelSize.x+t.nativePixelSize.y)/2;e.lods.forEach(((t,e)=>{t.resolution=i*2**e,t.scale=96*t.resolution/.0254}))}}}async _fetchPixels(t,e,i,s={}){let n=he(t);if(n>=2)return{extent:t,pixelBlock:null};const r=this._getSourceDataInfo(t,e,i,s),{pyramidLevel:a,srcResolution:l,srcExtent:c,srcWidth:h,srcHeight:u,ul:f}=r;if(0===h||0===u)return{extent:t,srcExtent:c,pixelBlock:null};const{rasterInfo:d}=this,p=d.transform,m="gcs-shift"===p?.type,y=null!=me(t.spatialReference);!m&&y||(n=he(r.srcExtent,m));const w=await this._fetchRawTiles(a,f,{width:h,height:u,wrapCount:n},s);if(!w)return{extent:t,srcExtent:c,pixelBlock:null};const x=d.storageInfo,g=a>0?x.pyramidBlockWidth:x.blockWidth,v=a>0?x.pyramidBlockHeight:x.blockHeight;let{x:I,y:b}=d.pixelSize;if(a>0){const{pyramidResolutions:t,pyramidScalingFactor:e}=x;if(null!=t&&t[a-1])({x:I,y:b}=t[a-1]);else{const t=e**a;I*=t,b*=t}}const S=d.spatialReference,R=new o({x:I,y:b,spatialReference:S}),M=g===h&&v===u&&f.x%g==0&&f.y%v==0,T=new o({x:(t.xmax-t.xmin)/e,y:(t.ymax-t.ymin)/i,spatialReference:t.spatialReference}),F=!t.spatialReference.equals(S),k=S.isGeographic?1e-9:1e-4,{datumTransformation:P}=s;if(!F&&M&&1===w.pixelBlocks.length&&g===e&&v===i&&this._isSameResolution(l,T,k))return{extent:t,srcExtent:c,srcTilePixelSize:R,pixelBlock:w.pixelBlocks[0]};const C=y&&null!=me(c.spatialReference)&&this._hasNoneOrGCSShiftTransform,O=s.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");O&&!this.rasterJobHandler&&await ae();const D=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:t,srcBufferExtent:w.extent,pixelSize:T.toJSON(),datumTransformation:P,rasterTransform:p,hasWrapAround:n>0||C,isAdaptive:!1!==this.ioConfig.optimizeProjectionAccuracy,includeGCSGrid:O},s):fe({projectedExtent:t,srcBufferExtent:w.extent,pixelSize:T,datumTransformation:P,rasterTransform:p,hasWrapAround:n>0||C,isAdaptive:!1,includeGCSGrid:O});let B;const _=!s.requestRawData,E={rows:D.spacing[0],cols:D.spacing[1]},N=this._hasNoneOrGCSShiftTransform?this._getRasterTileAlignmentInfo(a,w.extent.xmin):void 0,{pixelBlocks:A,mosaicSize:j,isPartiallyFilled:z}=w;let L=null;if(this.rasterJobHandler){const t=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:A,srcMosaicSize:j,destDimension:_?{width:e,height:i}:null,coefs:_?D.coefficients:null,sampleSpacing:_?E:null,projectDirections:O,gcsGrid:O?D.gcsGrid:null,isUV:"vector-uv"===this.rasterInfo.dataType,interpolation:s.interpolation,alignmentInfo:N,blockWidths:null},s);({pixelBlock:B,localNorthDirections:L}=t)}else{const t=Yt(A,j,{alignmentInfo:N});B=_?Xt(t,{width:e,height:i},D.coefficients,E,s.interpolation):t,O&&D.gcsGrid&&(L=Kt({width:e,height:i},D.gcsGrid),B=Qt(B,this.rasterInfo.dataType,L))}return s.requestRawData||O?{extent:t,srcExtent:c,srcTilePixelSize:R,pixelBlock:B,transformGrid:D,localNorthDirections:L,isPartiallyFilled:z}:{extent:t,srcExtent:c,srcTilePixelSize:R,pixelBlock:B}}async _fetchRawTiles(t,e,i,s){const{origin:n,blockBoundary:r}=this.rasterInfo.storageInfo,{blockWidth:a,blockHeight:l}=this.getBlockWidthHeight(t);let{x:o,y:h}=e,{width:u,height:f,wrapCount:d}=i;const p=this._getRasterTileAlignmentInfo(t,0);s.buffer&&(o-=s.buffer.cols,h-=s.buffer.rows,u+=2*s.buffer.cols,f+=2*s.buffer.rows);let m=0,y=0,w=0;if(d&&null!=p){({worldColumnCountFromOrigin:y,originColumnOffset:w,rightPadding:m}=p);y*p.blockWidth-m>=o+u&&(m=0)}const x=Math.floor(o/a),g=Math.floor(h/l),v=Math.floor((o+u+m-1)/a),I=Math.floor((h+f+m-1)/l),b=r[t];if(!b)return null;const{minRow:S,minCol:R,maxCol:M,maxRow:T}=b;if(0===d&&(I<S||v<R||g>T||x>M))return null;const F=new Array;let k=!1;const P=null==this.ioConfig.allowPartialFill?s.allowPartialFill:this.ioConfig.allowPartialFill;for(let e=g;e<=I;e++)for(let i=x;i<=v;i++){let n=i;if(!s.disableWrapAround&&d&&null!=p&&y<=i&&(n=i-y-w),e>=S&&n>=R&&T>=e&&M>=n){const i=this._tileFetchQueue.push({pyramidLevel:t,row:e,col:n,options:s},{signal:s.signal});P?F.push(new Promise((t=>{i.then((e=>t(e))).catch((()=>{k=!0,t(null)}))}))):F.push(i)}else F.push(Promise.resolve(null))}if(0===F.length)return null;const C=await Promise.all(F),O={height:(I-g+1)*l,width:(v-x+1)*a},{spatialReference:D}=this.rasterInfo,B=this.getPyramidPixelSize(t),{x:_,y:E}=B;return{extent:new c({xmin:n.x+x*a*_,xmax:n.x+(v+1)*a*_,ymin:n.y-(I+1)*l*E,ymax:n.y-g*l*E,spatialReference:D}),pixelBlocks:C,mosaicSize:O,isPartiallyFilled:k}}_isSameResolution(t,e,i){return Math.abs(t.x-e.x)<i&&Math.abs(t.y-e.y)<i}_fetchRawTile(t,e,i,s){const n=this.rasterInfo.storageInfo.blockBoundary[t];if(!n)return Promise.resolve(null);const{minRow:r,minCol:a,maxCol:l,maxRow:o}=n;if(e<r||i<a||e>o||i>l)return Promise.resolve(null);const c=qt(this.rasterId,s.sliceId),h=`${t}/${e}/${i}`;let u=Jt(c,s.registryId,h);if(null==u){const n=new AbortController;u=this.fetchRawTile(t,e,i,{...s,signal:n.signal}),$t(c,s.registryId,h,u,n),u.catch((()=>Ut(c,s.registryId,h)))}return s.signal&&f(s,(()=>{Vt(c,s.registryId,h)})),u}_computeMagDirValues(t){const{bandCount:e,dataType:i}=this.rasterInfo;if(!(2===e&&"vector-magdir"===i||"vector-uv"===i)||2!==t?.length||!t[0]?.length)return null;const s=t[0].length;if("vector-magdir"===i){const e=t[1].map((t=>(t+360)%360));return[t[0],e]}const[n,r]=t,a=[],l=[];for(let t=0;t<s;t++){const[e,i]=Zt([n[t],r[t]]);a.push(e),l.push(i)}return[a,l]}_getRasterTileAlignmentInfo(t,e){return null==this._rasterTileAlignmentInfo&&(this._rasterTileAlignmentInfo=de(this.rasterInfo)),null==this._rasterTileAlignmentInfo.pyramidsInfo?null:{startX:e,halfWorldWidth:this._rasterTileAlignmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlignmentInfo.hasGCSSShiftTransform,...this._rasterTileAlignmentInfo.pyramidsInfo[t]}}_getSourceDataInfo(t,e,i,s={}){const n={datumTransformation:s.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0,ul:{x:0,y:0}};s.srcResolution&&(n.srcResolution=s.srcResolution,this._updateSourceDataInfo(t,n));const r=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:a,srcHeight:l,pyramidLevel:c}=n,h=a/e,u=l/i,f=c<r&&h*u>=16,d=c===r&&this._requireTooManySrcTiles(a,l,e,i);if(f||d||(0===a||0===l)){const a=new o({x:(t.xmax-t.xmin)/e,y:(t.ymax-t.ymin)/i,spatialReference:t.spatialReference});let l=pe(a,this.rasterInfo.spatialReference,t,n.datumTransformation);const d=!l||s.srcResolution&&l.x+l.y<s.srcResolution.x+s.srcResolution.y;if(f&&s.srcResolution&&d){const t=Math.round(Math.log(Math.max(h,u))/Math.LN2)-1;if(r-c+3>=t){const e=2**t;l={x:s.srcResolution.x*e,y:s.srcResolution.y*e}}}l&&(n.srcResolution=l,this._updateSourceDataInfo(t,n))}return this._requireTooManySrcTiles(n.srcWidth,n.srcHeight,e,i)&&(n.srcWidth=0,n.srcHeight=0),n}_requireTooManySrcTiles(t,e,i,s){const{tileInfo:n}=this.rasterInfo.storageInfo,r=Math.ceil(t/n.size[0])*Math.ceil(e/n.size[1]),a=t/i,l=e/s,o=Math.max(1,(i+s)/1024);return r>=Me*o||a>Re||l>Re}_updateSourceDataInfo(t,e){e.srcWidth=0,e.srcHeight=0;const{rasterInfo:i}=this,s=i.spatialReference,{srcResolution:n,datumTransformation:r}=e,{pyramidLevel:a,pyramidResolution:l,excessiveReading:o}=oe(n,i,this.ioConfig.sampling);if(o)return;let c=e.srcExtent||ue(t,s,r);if(null==c)return;const h=i.transform;h&&(c=h.inverseTransform(c)),e.srcExtent=c;const{x:u,y:f}=i.storageInfo.origin,d=Math.floor((c.xmin-u)/l.x+.1),p=Math.floor((f-c.ymax)/l.y+.1),m=Math.floor((c.xmax-u)/l.x-.1),y=Math.floor((f-c.ymin)/l.y-.1),w=c.width<.1*l.x?0:m-d+1,x=c.height<.1*l.y?0:y-p+1;e.pyramidLevel=a,e.pyramidResolution=l,e.srcWidth=w,e.srcHeight=x,e.ul={x:d,y:p}}_getRequestOptionsWithSliceId(t){return null!=this.rasterInfo.multidimensionalInfo&&null==t.sliceId&&(t={...t,sliceId:this.getSliceIndex(t.multidimensionalDefinition)}),t}_processIdentifyResult(t,e){const{srcLocation:i,position:s,pyramidLevel:n,useTransposedTile:r}=e,a=t.pixels[0].length/t.width/t.height;if(!(!t.mask||t.mask[s]))return{location:i,value:null};const{multidimensionalInfo:l}=this.rasterInfo;if(null==l||!r){const e=t.pixels.map((t=>t[s])),r={location:i,value:e,pyramidLevel:n},a=this._computeMagDirValues(e.map((t=>[t])));return a?.length&&(r.magdirValue=a.map((t=>t[0]))),r}let o=t.pixels.map((t=>t.slice(s*a,s*a+a))),c=this._computeMagDirValues(o);const{requestSomeSlices:h,identifyOptions:u}=e;let f=gt(l,u.transposedVariableName);if(h){const t=vt(f,u.multidimensionalDefinition,u.timeExtent);o=o.map((e=>t.map((t=>e[t])))),c=c?.map((e=>t.map((t=>e[t])))),f=t.map((t=>f[t]))}const p=t.noDataValues||this.rasterInfo.noDataValue,m={pixels:o,pixelType:t.pixelType};let y;null!=p&&(d(m,p),y=m.mask);return{location:i,value:null,dataSeries:f.map(((t,e)=>{const i={value:0===y?.[e]?null:o.map((t=>t[e])),multidimensionalDefinition:t.multidimensionalDefinition.map((t=>new It({...t,isSlice:!0})))};return c?.length&&(i.magdirValue=[c[0][e],c[1][e]]),i})),pyramidLevel:n}}};p([m()],Fe.prototype,"_rasterTileAlignmentInfo",void 0),p([m()],Fe.prototype,"_tileFetchQueue",void 0),p([m({readOnly:!0})],Fe.prototype,"_isGlobalWrappableSource",null),p([m({readOnly:!0})],Fe.prototype,"_hasNoneOrGCSShiftTransform",null),p([m()],Fe.prototype,"rasterJobHandler",null),p([m({readOnly:!0})],Fe.prototype,"rasterId",null),p([m(y)],Fe.prototype,"url",null),p([m({type:String,json:{write:!0}})],Fe.prototype,"datasetName",void 0),p([m({type:String,json:{write:!0}})],Fe.prototype,"datasetFormat",void 0),p([m()],Fe.prototype,"hasUniqueSourceStorageInfo",void 0),p([m()],Fe.prototype,"rasterInfo",void 0),p([m()],Fe.prototype,"ioConfig",void 0),p([m()],Fe.prototype,"sourceJSON",void 0),Fe=p([w("esri.layers.support.rasterDatasets.BaseRaster")],Fe);const ke=Fe;function Pe(t,e){if(t.spatialReference.equals(e))return t;const i=g(t.spatialReference),s=g(e);if(i===s)return t;const n=i/s;return{x:t.x*n,y:t.y*n}}async function Ce(t,e,i){if("extent"===i.type)return De(t,e,i);const{width:s,height:n}=t,r=new Uint8Array(s*n),{contains:a,intersects:l}=await import("./p-68b42a81.js");return l(e,i)?"polyline"===i.type?Be(t,e,i):a(i,e)?t:Oe(t,e,i):new te({pixelType:t.pixelType,width:s,height:n,mask:r,maskIsAlpha:!1,pixels:[...t.pixels]})}function Oe(t,e,i){if(!t)return t;const{width:s,height:n}=t,r=e.width/s,a=e.height/n,{xmin:l,ymax:o}=e;let c;if("extent"===i.type){const t=(i.xmin-l)/r,e=(i.xmax-l)/r,s=(o-i.ymax)/a,n=(o-i.ymin)/a;c=[[[t,s],[t,n],[e,n],[e,s],[t,s]]]}else c=i.rings.map((t=>t.map((([t,e])=>[(t-l)/r,(o-e)/a]))));const h=document.createElement("canvas");h.width=s,h.height=n;const u=h.getContext("2d");u.fillStyle="#f00",u.beginPath(),c.forEach((t=>{u.moveTo(t[0][0],t[0][1]);for(let e=0;e<t.length;e++)u.lineTo(t[e][0],t[e][1]);u.closePath()})),u.fill();const f=u.getImageData(0,0,s,n).data,d=t.mask,p=s*n,m=new Uint8Array(p);for(let t=0;t<p;t++)d&&!d[t]||(m[t]=f[4*t+3]>127?255:0);return new te({pixelType:t.pixelType,width:s,height:n,mask:m,maskIsAlpha:!1,pixels:[...t.pixels]})}function De(t,e,i){const{width:s,height:n}=t,r=new Uint8Array(s*n),a=e.width/s,l=e.height/n;if(i.width/a<.5||i.height/l<.5)return new te({pixelType:t.pixelType,width:s,height:n,mask:r,pixels:[...t.pixels]});const{xmin:o,xmax:c,ymin:h,ymax:u}=e,{xmin:f,xmax:d,ymin:p,ymax:m}=i,y=Math.max(o,f),w=Math.min(c,d),x=Math.max(h,p),g=Math.min(u,m),v=.5*a,I=.5*l;if(w-y<v||g-x<I||w<o+v||y>c-v||x>u-I||g<h+I)return new te({pixelType:t.pixelType,width:s,height:n,mask:r,pixels:[...t.pixels]});const b=Math.max(0,(y-o)/a),S=Math.min(s,Math.max(0,(w-o)/a)),R=Math.max(0,(u-g)/l),M=Math.min(n,Math.max(0,(u-x)/l)),T=Math.round(b),F=Math.round(S)-1,k=Math.round(R),P=Math.round(M)-1;if(T===F&&b%1>.5&&S%1<.5||k===P&&R%1>.5&&M%1<.5)return new te({pixelType:t.pixelType,width:s,height:n,mask:r,pixels:[...t.pixels]});if(0===T&&0===k&&F===s&&P===n)return t;const C=t.mask;for(let t=k;t<=P;t++)for(let e=T;e<=F;e++){const i=t*s+e;r[i]=C?C[i]:255}return new te({pixelType:t.pixelType,width:s,height:n,mask:r,pixels:[...t.pixels]})}function Be(t,e,i){const{width:s,height:n}=t,r=new Uint8Array(s*n),a=e.width/s,l=e.height/n,{xmin:o,ymax:c}=e,{paths:h}=i,u=t.mask;for(let t=0;t<h.length;t++){const e=h[t];for(let t=0;t<e.length-1;t++){const[i,h]=e[t],[f,d]=e[t+1];let p=Math.floor((c-h)/l),m=Math.floor((c-d)/l);if(m<p){const t=p;p=m,m=t}p=Math.max(0,p),m=Math.min(n-1,m);const y=(f-i)/(d-h);for(let t=p;t<=m;t++){const e=t===p?Math.max(h,d):(n+1-t)*l,c=t===m?Math.min(h,d):e-l;let w=d===h?Math.floor((i-o)/a):Math.floor((y*(e-h)+i-o)/a),x=d===h?Math.floor((f-o)/a):Math.floor((y*(c-h)+i-o)/a);if(x<w){const t=w;w=x,x=t}const g=t*s;w=Math.max(0,w),x=Math.min(s-1,x);for(let t=g+w;t<=g+x;t++)r[t]=u?u[t]:255}}}return new te({pixelType:t.pixelType,width:s,height:n,mask:r,pixels:[...t.pixels]})}function _e(t,e,i,s=!0){const{spatialReference:n}=t,{x:r,y:a}=Pe(i,n);let l,o,h;const u="extent"===e.type?e:e.extent;let{xmin:f,xmax:d,ymax:p,ymin:m}=u;const{xmin:y,ymax:w}=t.extent;return s?(f=y+(f>y?r*Math.round((f-y)/r):0),p=w-(p<w?a*Math.round((w-p)/a):0),d=y+(d>y?r*Math.round((d-y)/r):0),m=w-(m<w?a*Math.round((w-m)/a):0),l=new c({xmin:f,ymax:p,xmax:d,ymin:m,spatialReference:n}),o=Math.round(l.width/r),h=Math.round(l.height/a)):(o=Math.floor((d-f)/r+.8),h=Math.floor((p-m)/a+.8),f=y+(f>y?r*Math.floor((f-y)/r+.1):0),p=w-(p<w?a*Math.floor((w-p)/a+.1):0),d=f+o*r,m=p-h*a,l=new c({xmin:f,ymax:p,xmax:d,ymin:m,spatialReference:n})),{extent:l,width:o,height:h}}const Ee=40;let Ne=class extends ke{constructor(){super(...arguments),this.datasetFormat="Function",this.tileType="Raster",this.rasterFunction=null,this._clippingGeometry=new Map}async open(t){await this.init();const{rasterFunction:e}=this;this.primaryRasters?.rasters?.length?e.sourceRasters=this.primaryRasters.rasters:(this.primaryRasters=e.getPrimaryRasters(),this.rasterJobHandler&&this.primaryRasters.rasters?.forEach((t=>t.rasterJobHandler=this.rasterJobHandler)));const{rasters:i,rasterIds:s}=this.primaryRasters,n=i.map((e=>e.rasterInfo?void 0:e.open(t)));await Promise.all(n);const r=i.map((({rasterInfo:t})=>t)),l=e.bind({rasterInfos:r,rasterIds:s});if(e.rawSourceRasterInfos=r,!l.success||0===r.length)throw new a("raster-function:open",`cannot bind the function: ${l.error??""}`);const o="Table"===e.functionName?e:e.functionArguments?.raster;"Table"===o?.functionName&&(e.rasterInfo.attributeTable=v.fromJSON(o.functionArguments.attributeTableAsRecordSet)),await this.syncJobHandler();const c=r[0];this.hasUniqueSourceStorageInfo=1===r.length||r.slice(1).every((t=>this._hasSameStorageInfo(t,c))),this.set("sourceJSON",i[0].sourceJSON),this.set("rasterInfo",e.rasterInfo),await this._updateClipGeometry()}async syncJobHandler(){return this.rasterJobHandler?.updateRasterFunction(this.rasterFunction)}async fetchPixels(t,e,i,s={}){const{rasters:n,rasterIds:r}=this.primaryRasters;let a=!1;const{interpolation:l}=s,o=this.rasterFunction.flatWebGLFunctionChain?.hasFocalFunction;!s.requestRawData&&o&&(a=1===n.length&&!s.skipRasterFunction,s={...s,interpolation:"bilinear",requestRawData:a});const c=n.map((n=>n.fetchPixels(t,e,i,s))),h=await Promise.all(c),u=h.map((t=>t.pixelBlock)),f=a||s.requestRawData?h.map((t=>t.srcTilePixelSize)):null;if(s.skipRasterFunction||u.every((t=>null==t)))return h[0];const d=h.find((t=>null!=t.pixelBlock))?.extent??t;let p=this.rasterJobHandler?await this.rasterJobHandler.process({extent:d,primaryPixelBlocks:u,primaryPixelSizes:f,primaryRasterIds:r}):this.rasterFunction.process({extent:d,primaryPixelBlocks:u,primaryPixelSizes:f,primaryRasterIds:r});const{transformGrid:m}=h[0];if(!a||null==p||null==m){const t=s.noClip?null:this.getClippingGeometry(d.spatialReference);return s.noClip||s.requestRawData||null==p||!t||(p=await Ce(p,d,t)),{...h[0],pixelBlock:p}}const y={rows:m.spacing[0],cols:m.spacing[1]};let w;if(this.rasterJobHandler){w=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:[p],srcMosaicSize:{width:p.width,height:p.height},destDimension:{width:e,height:i},coefs:m.coefficients,sampleSpacing:y,projectDirections:!1,gcsGrid:null,isUV:!1,interpolation:l,alignmentInfo:void 0,blockWidths:null},s)).pixelBlock}else w=Xt(p,{width:e,height:i},m.coefficients,y,l);const x=s.noClip?null:this.getClippingGeometry(t.spatialReference);return s.noClip||s.requestRawData||null==w||null==x||(w=await Ce(w,t,x)),{extent:t,srcExtent:h[0].srcExtent,pixelBlock:w}}getClippingGeometry(t){const e=this._clippingGeometry.get("0");if(!t||!e)return e;const i=this._getSRKey(t);let s=this._clippingGeometry.get(i);return null!=s||(s=t.equals(e.spatialReference)?e:ye(e,t),this._clippingGeometry.set(i,s)),s}_hasSameStorageInfo(t,e){const{storageInfo:i,pixelSize:s,spatialReference:n,extent:r}=t,{storageInfo:a,pixelSize:l,spatialReference:o,extent:c}=e;return s.x===l.x&&s.y===l.y&&n.equals(o)&&r.equals(c)&&i.blockHeight===a.blockHeight&&i.blockWidth===a.blockWidth&&i.maximumPyramidLevel===a.maximumPyramidLevel}async _updateClipGeometry(){const t=this.rasterFunction.getClippingGeometries()[0];let e=t?.clippingGeometry;if(e&&"inside"===t.clippingType){const{extent:t}=this.rasterInfo,{difference:i,densify:s}=await import("./p-68b42a81.js");let n=s(I.fromExtent(t),2*(t.width+t.height)/Ee);n=ye(n,e.spatialReference),e=i(n,e)}this._clippingGeometry.clear(),e&&this._clippingGeometry.set("0",e)}_getSRKey(t){return String(t.wkid??t.wkt??t.wkt2)}};p([m({type:String,json:{write:!0}})],Ne.prototype,"datasetFormat",void 0),p([m()],Ne.prototype,"tileType",void 0),p([m()],Ne.prototype,"rasterFunction",void 0),p([m()],Ne.prototype,"primaryRasters",void 0),Ne=p([w("esri.layers.support.rasterDatasets.FunctionRaster")],Ne);const Ae=Ne;const je=t=>{let e=class extends t{constructor(...t){super(...t),this._isConstructedFromFunctionRaster=!1,this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.interpolation="nearest",this.multidimensionalSubset=null,this.raster=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.symbolizer=null,this._isConstructedFromFunctionRaster="Function"===t[0]?.raster?.datasetFormat}get fullExtent(){return this.serviceRasterInfo?.extent}set multidimensionalDefinition(t){this._set("multidimensionalDefinition",t),this.updateRenderer()}set rasterFunction(t){"none"===t?.functionName?.toLowerCase()&&(t=void 0),this._set("rasterFunction",t),this.updateRasterFunction()}get rasterInfo(){return S(r.getLogger(this),"rasterInfo",{replacement:"serviceRasterInfo",version:"4.29",warnOnce:!0}),this._get("serviceRasterInfo")}set url(t){this._set("url",n(t,r.getLogger(this)))}set renderer(t){null==t&&null==this.rasterFunction?this._configDefaultRenderer("override"):(this._set("renderer",t),this.updateRenderer())}readRenderer(t,e,i){const s=e?.layerDefinition?.drawingInfo?.renderer;return at(s,i)||void 0}async convertVectorFieldData(t,e){const{serviceRasterInfo:i}=this;if(null==t||!i)return null;const s=this._rasterJobHandler.instance,n=i.dataType;return s?s.convertVectorFieldData({pixelBlock:t,dataType:n},e):ee(t,n)}async computeStatisticsHistograms(t,e){t=l(lt,t).clone();const{serviceRasterInfo:i}=this,{geometry:s}=t;if(null==s)throw new a("imagery-tile-mixin:compute-statistics-histograms","geometry must be specified");let n=s;const{spatialReference:r}=i;s.spatialReference.equals(r)||(await ae(),n="extent"===s.type?ue(s,r):ye(s,r));const c=t.pixelSize??new o({x:i.pixelSize.x,y:i.pixelSize.y,spatialReference:r}),{extent:h,width:u,height:f}=_e(i,n,c),d=await this.fetchPixels(h,u,f,{...e,interpolation:"nearest"});if(null==d.pixelBlock)throw new a("imagery-tile-mixin:compute-statistics-histograms","failed to fetch pixels");const p=await Ce(d.pixelBlock,h,n),m=this._rasterJobHandler.instance;return m?m.computeStatisticsHistograms({pixelBlock:p},e):kt(p)}async createFlowMesh(t,e){const i=this._rasterJobHandler.instance;return i?i.createFlowMesh(t,e):ie(t.meshType,t.simulationSettings,t.flowData,null!=e.signal?e.signal:(new AbortController).signal)}normalizeRasterFetchOptions(t){const{multidimensionalInfo:e}=this.serviceRasterInfo??{};if(null==e)return t;let i=t.multidimensionalDefinition||this.multidimensionalDefinition;i?.length||(i=bt(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset}));const s=t.timeExtent||this.timeExtent;if(null!=i&&null!=s&&(null!=s.start||null!=s.end)){i=i.map((t=>t.clone()));const n=e.variables.find((({name:t})=>t===i[0].variableName))?.dimensions?.find((({name:t})=>"StdTime"===t)),r=i.find((({dimensionName:t})=>"StdTime"===t));if(!n||!r)return{...t,multidimensionalDefinition:null};const{start:a,end:l}=s,o=null==a?null:a.getTime(),c=null==l?null:l.getTime(),h=o??c,u=c??o;if(null!=n.values){const t=n.values.filter((t=>{if(Array.isArray(t)){if(h===u)return t[0]<=h&&t[1]>=h;const e=t[0]<=h&&t[1]>h||t[0]<u&&t[1]>=u,i=t[0]>=h&&t[1]<=u||t[0]<h&&t[1]>u;return e||i}return h===u?t===h:t>=h&&t<=u}));if(t.length){const e=t.sort(((t,e)=>{const i=Array.isArray(t)?t[0]:t,s=Array.isArray(t)?t[1]:t,n=Array.isArray(e)?e[0]:e,r=Array.isArray(e)?e[1]:e;if(h===u)return i-n;return Math.abs(s-u)-Math.abs(r-u)}))[0];r.values=[e]}else i=null}else if(n.hasRegularIntervals&&n.extent){const[t,e]=n.extent;h>e||u<t?i=null:r.values=h===u?[h]:[Math.max(t,h),Math.min(e,u)]}}return null!=i&&St(i,this.multidimensionalSubset)?{...t,multidimensionalDefinition:null}:{...t,multidimensionalDefinition:i}}async updateRasterFunction(){if(!this.loaded||"imagery-tile"!==this.type||!this.rasterFunction&&!this._cachedRasterFunctionJson||JSON.stringify(this.rasterFunction)===JSON.stringify(this._cachedRasterFunctionJson))return;if(this._isConstructedFromFunctionRaster&&"Function"===this.raster.datasetFormat){const t=this.raster.rasterFunction.toJSON();return!this.rasterFunction&&t&&this._set("rasterFunction",st.fromJSON(t)),void(this._cachedRasterFunctionJson=this.rasterFunction?.toJSON())}let t,e=this.raster,i=!1;"Function"===e.datasetFormat?(t=e.primaryRasters.rasters,e=t[0],i=!0):t=[e];const{rasterFunction:s}=this;if(s){const i={raster:e};t.length>1&&t.forEach((t=>i[t.url]=t));const n=we(s.functionDefinition?.toJSON()??s.toJSON(),i),r=new Ae({rasterFunction:n});r.rasterJobHandler=this._rasterJobHandler.instance,await r.open(),this._cachedRasterFunctionJson=this.rasterFunction?.toJSON(),this.raster=r}else this.raster=e,this._cachedRasterFunctionJson=null,await e.when();if(this._cachedRendererJson=null,!i&&!s)return;const{bandIds:n}=this,{bandCount:r}=this.raster.rasterInfo,a=n?.length?n.some((t=>t>=r)):r>=3;n&&(a||this.renderer&&"raster-stretch"!==this.renderer.type)&&this._set("bandIds",null),this._configDefaultRenderer("auto")}async updateRenderer(){const{loaded:t,symbolizer:e}=this;if(!t||!e||!this.renderer)return;const{rasterInfo:i}=this.raster,s=Rt(i,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),n=s?.name,r=ot({...this.renderer.toJSON(),variableName:n});if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(r))return;const a=this._rasterJobHandler.instance;a&&(e.rasterInfo=ct(i,n),e.rendererJSON=r,e.bind(),await a.updateSymbolizer(e),this._cachedRendererJson=r)}async applyRenderer(t,e){const i=t?.pixelBlock;if(!(null!=i&&i.pixels&&i.pixels.length>0))return null;let s;await this.updateRenderer();const n=this._rasterJobHandler.instance,r=this.bandIds??[];return s=n?await n.symbolize({...t,simpleStretchParams:e,bandIds:r}):this.symbolizer.symbolize({...t,simpleStretchParams:e,bandIds:r}),s}getTileUrl(t,e,i){return"RasterTileServer"===this.raster.datasetFormat?`${this.url}/tile/${t}/${e}/${i}`:""}getCompatibleTileInfo(t,e,i=!1){if(!this.loaded||null==e)return null;if(i&&t.equals(this.spatialReference))return this.tileInfo;const n=R(t);return s.create({size:256,spatialReference:t,origin:n?{x:n.origin[0],y:n.origin[1]}:{x:e.xmin,y:e.ymax}})}getCompatibleFullExtent(t){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(t)||(this._compatibleFullExtent=this.raster.computeExtent(t)),this._compatibleFullExtent):null}async fetchTile(t,e,s,n={}){if(i(this),n.requestAsImageElement){const i=this.getTileUrl(t,e,s);return h(i,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:n.signal}).then((t=>t.data))}const{serviceRasterInfo:r}=this;if(null!=r.multidimensionalInfo&&null==(n=this.normalizeRasterFetchOptions(n)).multidimensionalDefinition){const i=n.tileInfo||r.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(t,e,s,i),pixelBlock:null}}return await this._initJobHandler(),await this.updateRasterFunction(),"raster-shaded-relief"===this.renderer?.type&&(n={...n,buffer:{cols:1,rows:1}}),this.raster.fetchTile(t,e,s,n)}async fetchPixels(t,e,i,s={}){return null!=this.serviceRasterInfo.multidimensionalInfo&&null==(s=this.normalizeRasterFetchOptions(s)).multidimensionalDefinition?{extent:t,pixelBlock:null}:(await this._initJobHandler(),await this.updateRasterFunction(),e=Math.round(e),i=Math.round(i),this.raster.fetchPixels(t,e,i,s))}async identify(t,e={}){const{raster:i,serviceRasterInfo:s}=this;if(null!=s.multidimensionalInfo){if(!(s.hasMultidimensionalTranspose&&!!(wt(e.multidimensionalDefinition)||e.transposedVariableName||e.timeExtent))&&null==(e=this.normalizeRasterFetchOptions(e)).multidimensionalDefinition)return{location:t,value:null}}const n=this.multidimensionalSubset?.areaOfInterest;if(n&&!n.contains(t))throw new a("imagery-tile-mixin:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");return i.identify(t,e)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){const t=this.serviceRasterInfo?.multidimensionalInfo;if(null==t||"standard-time"!==this.serviceRasterInfo?.dataType)return!1;const e=this.multidimensionalDefinition,i=e?.[0]?.variableName;return t.variables.some((t=>t.name===i&&(!e?.[0].dimensionName||t.dimensions.some((t=>"StdTime"===t.name)))))}getStandardTimeValue(t){return new Date(24*(t-25569)*3600*1e3).toString()}getMultidimensionalSubsetVariables(t){const e=t??this.serviceRasterInfo?.multidimensionalInfo;return Mt(this.multidimensionalSubset,e)}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=bt(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset})),this.rasterFunction&&"Function"===this.raster.datasetFormat&&(this._cachedRasterFunctionJson=this.rasterFunction.toJSON()),this._configDefaultRenderer()}_initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const t=new dt;return this._rasterJobHandler.connectionPromise=t.initialize().then((async()=>{i(this),this._rasterJobHandler.instance=t,this.raster.rasterJobHandler=t,"Function"===this.raster.datasetFormat&&this.raster.syncJobHandler(),this.rasterFunction&&await this.updateRasterFunction().catch((()=>{})),this.renderer&&this.updateRenderer()})).catch((()=>{})),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null,this.raster&&(this.raster.rasterJobHandler=null)}_configDefaultInterpolation(){if(null==this.interpolation){i(this);const{raster:t}=this,e=ht(t.rasterInfo,t.tileType,this.sourceJSON?.defaultResamplingMethod);this._set("interpolation",e)}}_configDefaultRenderer(t="no"){i(this);const{rasterInfo:e}=this.raster;!this.bandIds&&e.bandCount>1&&(this.bandIds=ut(e));const s=Rt(e,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),n=s?.name;if(!this.renderer||"override"===t){const t=ft(e,{bandIds:this.bandIds,variableName:n}),i=e.statistics,s=i&&i.length>0?i[0]:null,r=s?.max??0,a=s?.min??0;"WCSServer"===this.raster.datasetFormat&&"raster-stretch"===t.type&&(r>1e24||a<-1e24)&&(t.dynamicRangeAdjustment=!0,t.statistics=null,"none"===t.stretchType&&(t.stretchType="min-max")),this.renderer=t}const a=ot({...this.renderer.toJSON(),variableName:n}),l=ct(e,n);this.symbolizer?(this.symbolizer.rendererJSON=a,this.symbolizer.rasterInfo=l):this.symbolizer=new Pt({rendererJSON:a,rasterInfo:l});const o=this.symbolizer.bind();if(o.success){if("auto"===t){const{colormap:t}=this.raster.rasterInfo,e=this.renderer;if(null!=t&&"raster-colormap"===e.type){const t=ft(this.raster.rasterInfo);JSON.stringify(t)!==JSON.stringify(e)&&this._configDefaultRenderer("override")}else if("raster-stretch"===e.type){const t=this.bandIds?.length,i=e.statistics?.length;!e.dynamicRangeAdjustment&&i&&t&&i!==t&&this._configDefaultRenderer("override")}}}else r.getLogger(this).warn("imagery-tile-mixin",o.error||"The given renderer is not supported by the layer."),"auto"===t&&this._configDefaultRenderer("override")}};function i(t){if(!t.raster||!t.serviceRasterInfo)throw new a("imagery-tile","no raster")}return p([m({clonable:!1})],e.prototype,"_cachedRendererJson",void 0),p([m({clonable:!1})],e.prototype,"_cachedRasterFunctionJson",void 0),p([m({clonable:!1})],e.prototype,"_compatibleFullExtent",void 0),p([m({clonable:!1})],e.prototype,"_isConstructedFromFunctionRaster",void 0),p([m({clonable:!1})],e.prototype,"_rasterJobHandler",void 0),p([m()],e.prototype,"bandIds",void 0),p([m({json:{origins:{service:{read:{source:"copyrightText"}}}}})],e.prototype,"copyright",void 0),p([m({json:{read:!1}})],e.prototype,"fullExtent",null),p([m()],e.prototype,"interpolation",void 0),p([m()],e.prototype,"ioConfig",void 0),p([m({type:[It],json:{write:!0}})],e.prototype,"multidimensionalDefinition",null),p([m({type:it,json:{write:!0}})],e.prototype,"multidimensionalSubset",void 0),p([m()],e.prototype,"raster",void 0),p([m({type:st,json:{name:"renderingRule",write:!0}})],e.prototype,"rasterFunction",null),p([m({readOnly:!0})],e.prototype,"rasterInfo",null),p([m()],e.prototype,"serviceRasterInfo",void 0),p([m()],e.prototype,"sourceJSON",void 0),p([m({readOnly:!0,type:x,json:{read:!1}})],e.prototype,"spatialReference",void 0),p([m({type:s})],e.prototype,"tileInfo",void 0),p([m(y)],e.prototype,"url",null),p([m({types:nt,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){const t="raster-stretch"===this.renderer?.type&&"none"===this.renderer.stretchType&&!this.renderer.useGamma;return{enabled:!this.loaded||"Raster"===this.raster.tileType||!t}}},origins:{"web-scene":{types:rt,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:t=>({enabled:t&&"vector-field"!==t.type&&"flow"!==t.type})}}}}})],e.prototype,"renderer",null),p([b("renderer")],e.prototype,"readRenderer",null),p([m({clonable:!1})],e.prototype,"symbolizer",void 0),e=p([w("esri.layers.ImageryTileMixin")],e),e};function ze(t){const e=t.fields,i=t.records,s=e.some((t=>"oid"===t.name.toLowerCase()))?"OBJECTID":"OID",n=[{name:s,type:"esriFieldTypeOID",alias:"OID"}].concat(e.map((t=>({name:t.name,type:"esriFieldType"+t.typeName,alias:t.name})))),r=n.map((t=>t.name)),a=[];let l=0,o=0;return i.forEach((t=>{const e={};for(e[s]=l++,o=1;o<r.length;o++)e[r[o]]=t[o-1];a.push({attributes:e})})),{displayFieldName:"",fields:n,features:a}}class Le{static get supportedVersions(){return[5]}static parse(t){const e=new DataView(t),i=3&e.getUint8(0);if(3!==i)return{header:{version:i},recordSet:null};const s=e.getUint32(4,!0),n=e.getUint16(8,!0),r=e.getUint16(10,!0),a={version:i,recordCount:s,headerByteCount:n,recordByteCount:r};let l=32;const o=[],c=[];let h;if(3===i){for(;13!==e.getUint8(l);)h=String.fromCharCode(e.getUint8(l+11)).trim(),o.push({name:Ct(new Uint8Array(t,l,11)),type:h,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(h)],length:e.getUint8(l+16)}),l+=32;if(l+=1,o.length>0)for(;c.length<s&&t.byteLength-l>r;){const i=[];32===e.getUint8(l)?(l+=1,o.forEach((e=>{if("C"===e.type)i.push(Ct(new Uint8Array(t,l,e.length)).trim());else if("N"===e.type)i.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(t,l,e.length)).trim(),10));else if("F"===e.type)i.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(t,l,e.length)).trim()));else if("D"===e.type){const s=String.fromCharCode.apply(null,new Uint8Array(t,l,e.length)).trim();i.push(new Date(parseInt(s.substring(0,4),10),parseInt(s.substring(4,6),10)-1,parseInt(s.substring(6,8),10)))}l+=e.length})),c.push(i)):l+=r}}return{header:a,fields:o,records:c,recordSet:ze({fields:o,records:c})}}}const Ge=new Map;Ge.set("int16","esriFieldTypeSmallInteger"),Ge.set("int32","esriFieldTypeInteger"),Ge.set("int64","esriFieldTypeInteger"),Ge.set("float32","esriFieldTypeSingle"),Ge.set("float64","esriFieldTypeDouble"),Ge.set("text","esriFieldTypeString");const He=8;let We=class extends ke{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF"}async open(t){await this.init();const{data:e}=await this.request(this.url+"/conf.json",{signal:t?.signal});if(!this._validateHeader(e))throw new a("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:i,rasterInfo:s}=this._parseHeader(e);if("thematic"===s.dataType){const t=await this._fetchAuxiliaryInformation();s.attributeTable=t}this._set("storageInfo",i),this._set("rasterInfo",s),this.ioConfig.retryCount=this.ioConfig.retryCount||0}async fetchRawTile(t,e,i,s={}){const{transposeInfo:n}=this.rasterInfo.storageInfo,{transposedVariableName:r}=s,a=!(!n||!r),l=a?0:this.rasterInfo.storageInfo.maximumPyramidLevel-t;if(l<0)return null;const o=this._buildCacheFilePath(l,e,i,s.multidimensionalDefinition,r),c=this._getIndexRecordFromBundle(e,i,a),h=await this.request(o,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:s.signal});if(!h)return null;const u=new Uint8Array(h.data),f=this._getTileEndAndContentType(u,c);if(0===f.recordSize)return null;const d=await this.request(o,{range:{from:f.position,to:f.position+f.recordSize},responseType:"array-buffer",signal:s.signal});if(!d)return null;const[p,m]=this._getTileSize(a);return this.decodePixelBlock(d.data,{width:p,height:m,planes:null,pixelType:null,returnInterleaved:a})}_validateHeader(t){const e=["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"];return t&&"RasterInfo"===t.type&&!e.some((e=>!t[e]))}_parseHeader(t){const e=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][t.pixelType],{bandCount:i,colormap:n,blockWidth:r,blockHeight:a,firstPyramidLevel:l,maximumPyramidLevel:h}=t,f=t.statistics?.map((t=>({min:t.min,max:t.max,avg:t.mean,stddev:t.standardDeviation,median:t.median,mode:t.mode}))),d=t.histograms?.[0]?.counts?.length?t.histograms:null,p=t.extent.spatialReference,m=t.geodataXform?.spatialReference,y=new x(p?.wkid||p?.wkt||p?.wkt2?p:m);let w=new c({xmin:t.extent.xmin,ymin:t.extent.ymin,xmax:t.extent.xmax,ymax:t.extent.ymax,spatialReference:y});const g=new o({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:y}),v=Math.round((w.xmax-w.xmin)/g.x),I=Math.round((w.ymax-w.ymin)/g.y),b=this._parseTransform(t.geodataXform),S=b?w:null;b&&(w=b.forwardTransform(w),g.x=(w.xmax-w.xmin)/v,g.y=(w.ymax-w.ymin)/I);const R=t.properties??{},M=t.format.toLowerCase().replace("cache/",""),T=new o(t.origin.x,t.origin.y,y);let F,k,P,C;if(n?.colors)for(F=[],k=0;k<n.colors.length;k++)P=n.colors[k],C=n.values?n.values[k]:k,F.push([C,255&P,P<<16>>>24,P<<8>>>24,P>>>24]);const O=t.LODInfos,D=[];for(k=0;k<O.levels.length;k++)D.push(new u({level:O.levels[k],resolution:O.resolutions[k],scale:96/.0254*O.resolutions[k]}));const B=new s({dpi:96,lods:D,format:M,origin:T,size:[r,a],spatialReference:y}),_={recordSize:He,packetSize:t.packetSize,headerSize:t.packetSize*t.packetSize*He+64},E=[{maxCol:Math.ceil(v/r)-1,maxRow:Math.ceil(I/a)-1,minCol:0,minRow:0}];let N=2;if(h>0)for(k=0;k<h;k++)E.push({maxCol:Math.ceil(v/N/r)-1,maxRow:Math.ceil(I/N/a)-1,minCol:0,minRow:0}),N*=2;const A=t.mdInfo;let j=null;if(A&&R._yxs){const t=R._yxs;j={packetSize:t.PacketSize,tileSize:[t.TileXSize,t.TileYSize]}}return{storageInfo:_,rasterInfo:new Ot({width:v,height:I,pixelType:e,bandCount:i,extent:w,nativeExtent:S,transform:b,spatialReference:y,pixelSize:g,keyProperties:R,statistics:f,histograms:d,multidimensionalInfo:A,colormap:F,storageInfo:new Ft({blockWidth:r,blockHeight:a,pyramidBlockWidth:r,pyramidBlockHeight:a,origin:T,tileInfo:B,transposeInfo:j,firstPyramidLevel:l,maximumPyramidLevel:h,blockBoundary:E})})}}_parseTransform(t){if(!xe(t))throw new a("cloudraster:open","the data contains unsupported geodata transform types");const e=ge(t);if("identity"===e.type)return null;if("polynomial"!==e.type||!e.forwardCoefficients?.length||!e.inverseCoefficients?.length)throw new a("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return e}async _fetchAuxiliaryInformation(t){const e=this.request(this.url+"/conf.vat.json",{signal:t}).then((t=>t.data)).catch((()=>null)),i=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:t}).then((t=>t.data)).catch((()=>null)),s=await Promise.all([e,i]);let n;if(s[0]){let t=s[0].fields;const e=s[0].values;if(t&&e){t=t.map((t=>({type:"OID"===t.name?"esriFieldTypeOID":Ge.get(t.type),name:t.name,alias:t.alias||t.name})));const i=e.map((t=>({attributes:t})));t&&e&&(n={fields:t,features:i})}}if(!n&&s[1]){n=Le.parse(s[1]).recordSet}return v.fromJSON(n)}_buildCacheFilePath(t,e,i,s,n){const r=this._getPackageSize(!!n),a=Math.floor(e/r)*r,l=Math.floor(i/r)*r,o="R"+this._toHexString4(a)+"C"+this._toHexString4(l);let c="L";c+=t>=10?t.toString():"0"+t.toString();const{multidimensionalInfo:h}=this.rasterInfo,u=s?.[0];if(null==h||!u)return`${this.url}/_alllayers/${c}/${o}.bundle`;let f="_yxs";if(!n){f=h.variables.find((t=>t.name===u.variableName)).dimensions[0].values.indexOf(u.values[0]).toString(16);const t=4-f.length;for(let e=0;e<t;e++)f="0"+f;f="S"+f}const d=this._getVariableFolderName(n||u.variableName);return`${this.url}/_alllayers/${d}/${f}/${c}/${o}.bundle`}_getPackageSize(t=!1){const{transposeInfo:e}=this.rasterInfo.storageInfo;return t&&null!=e?e.packetSize??0:this.storageInfo.packetSize}_getTileSize(t=!1){const{storageInfo:e}=this.rasterInfo,{transposeInfo:i}=e;return t&&null!=i?i.tileSize:e.tileInfo.size}_getVariableFolderName(t){return""===(t=t.trim())?"_v":t.replaceAll(/[\{|\}\-]/g,"_").replace("\\*","_v")}_getIndexRecordFromBundle(t,e,i=!1){const s=this._getPackageSize(i),n=s*(t%s)+e%s;if(n<0)throw new Error("Invalid level / row / col");return 20+n*this.storageInfo.recordSize+44}_getTileEndAndContentType(t,e){const i=t.subarray(e,e+8);let s,n=0;for(s=0;s<5;s++)n|=(255&i[s])<<8*s;const r=0xffffffffff&n;for(n=0,s=5;s<8;s++)n|=(255&i[s])<<8*(s-5);return{position:r,recordSize:0xffffffffff&n}}_toHexString4(t){let e=t.toString(16);if(4!==e.length){let t=4-e.length;for(;t-- >0;)e="0"+e}return e}};p([m({readOnly:!0})],We.prototype,"storageInfo",void 0),p([m({type:String,json:{write:!0}})],We.prototype,"datasetFormat",void 0),We=p([w("esri.layers.support.rasterDatasets.CloudRaster")],We);const Je=We;function $e(t){return["x","e","east","long","longitude"].includes(t.toLowerCase())}function Ue(t){return["y","n","west","lat","latitude"].includes(t.toLowerCase())}function Ve(t){const{axes:e}=t.domain,i=Object.keys(e),s=[],n=[];let r=-1,a=-1,l=[];for(let t=0;t<i.length;t++){const o=i[t];$e(o)?r=t:Ue(o)&&(a=t);const c=e[o],h=[];if("values"in c){c.values.forEach((t=>h.push("string"==typeof t?new Date(t).getTime():t)));const t=h[1]-h[0];s.push([h[0]-.5*t,h[h.length-1]+.5*t]),n.push(t)}else{const{start:t,stop:e,num:i}=c,r=(e-t)/(i-1);s.push([t-.5*r,e+.5*r]),n.push(r);for(let e=0;e<i;e++)h.push(t+r*e)}l.push({name:o,values:h,extent:[h[0],h[h.length-1]]})}r>-1&&-1===a?a=0===r?1:0:a>-1&&-1===r?r=0===a?1:0:-1===a&&-1===r&&(r=0,a=1),l=l.filter(((t,e)=>!(e===r||e===a)));const{referencing:o}=t.domain,h=o.find((t=>t.coordinates.includes(i[r]))).system.id,u=h?.slice(h.lastIndexOf("/")+1),f=null==u||"CRS84"===u?4326:Number(u),d=new x({wkid:f}),[p,m]=s[r],[y,w]=s[a],g=new c({xmin:p,xmax:m,ymin:y,ymax:w,spatialReference:d});return{width:Math.round(g.width/n[r]),height:Math.round(g.height/n[a]),extent:g,dimensions:l}}function qe(t){const e=F();return e?t[e]??Object.values(t)[0]:Object.values(t)[0]}function Ye(){return Math.round(255*Math.random())}function Xe(t){const e={},{parameters:i}=t;if(!i)return e;for(const[t,s]of Object.entries(i)){const{type:i,description:n,unit:r,categoryEncoding:a,observedProperty:l}=s;if("Parameter"===i&&(e[t]={},n&&(e[t].description=qe(n)),r&&(e[t].unit=r.label?qe(r.label):null,e[t].symbol=r.symbol?.value),a)){const i=Object.entries(a).map(((t,e)=>({OID:e,Value:Number(t[1]),ClassName:t[0].slice(t[0].lastIndexOf("/")+1),Count:1})));let s=!1;l?.categories?.length&&(l.categories.forEach((t=>{if(!t.id)return;const e=t.id.slice(t.id.lastIndexOf("/")+1),n=i.find((t=>t.ClassName===e));if(!n)return;const r=t.label?qe(t.label):null;if(n.Label=r,t.preferredColor){const e=M.fromHex(t.preferredColor);e&&(s=!0,n.Red=e.r,n.Green=e.g,n.Blue=e.b)}})),s&&i.forEach((t=>{null==t.Red&&(t.Red=Ye(),t.Green=Ye(),t.Blue=Ye())})));const n={objectIdFieldName:"",fields:[{name:"OID",type:"esriFieldTypeOID",alias:"OID",domain:null},{name:"Value",type:"esriFieldTypeInteger",alias:"Value",domain:null},{name:"Count",type:"esriFieldTypeDouble",alias:"Count",domain:null},{name:"ClassName",type:"esriFieldTypeString",alias:"ClassName",domain:null,length:50},{name:"Label",type:"esriFieldTypeString",alias:"Label",domain:null,length:50}],features:i.map((t=>({attributes:t})))};s&&n.fields.push({name:"Red",type:"esriFieldTypeInteger",alias:"Red",domain:null},{name:"Green",type:"esriFieldTypeInteger",alias:"Green",domain:null},{name:"Blue",type:"esriFieldTypeInteger",alias:"Blue",domain:null}),e[t].attributeTable=n}}return e}function Ke(t){let e=Number.MAX_VALUE,i=-Number.MAX_VALUE;for(let s=0;s<t.length;s++){const n=t[s];null!=n&&(n<e&&(e=n),n>i&&(i=n))}return T(e,i)}function Qe(t,e,i){const s=t.map(((t,i)=>({name:t,count:e[i]}))).sort(((t,e)=>t.name>e.name?-1:1)),n=(r=1,t=>r*=t.count);var r;const a=[...s.slice(1),{name:"",count:1}].reverse().map(n).reverse();let l=0;for(let n=t.length-1;n>=0;n--){l+=a[s.findIndex((({name:e})=>e===t[n]))]*(i%e[n]),i=Math.floor(i/e[n])}return l}function Ze(t){const{width:e,height:i,extent:s,dimensions:n}=Ve(t),{ranges:r}=t,a=Object.keys(r).sort(((t,e)=>t<e?-1:1)),l=[];for(let t=0;t<a.length;t++){const e=a[t];n?.length&&l.push({name:e,dimensions:n})}const o=Xe(t);l.forEach((t=>o[t.name]&&Object.assign(t,o[t.name])));const c=l.length?{variables:l}:void 0,h=[];for(let t=0;t<a.length;t++){const s=a[t],{values:l,dataType:o,axisNames:c,shape:u}=r[s],f=u.length>2?t*u.slice(0,-2).reduce(((t,e)=>t*e)):0,d=c.slice(0,-2),p=u.slice(0,-2),m="float"===o?"f32":Ke(l),y=e*i,w=l.length/y;for(let s=0;s<w;s++){const r=te.createEmptyBand(m,y),a=new Uint8Array(y).fill(255);let o=!1;const c=s*y;for(let t=0;t<y;t++){const e=l[c+t];null==e?(a[t]=0,o=!0):r[t]=e}if(0===t||n?.length){const t=new te({width:e,height:i,mask:o?a:null,pixels:[r],pixelType:m});if(t.updateStatistics(),n?.length){h[Qe(d,p,s)+f]=t}else h.push(t)}else{const t=h[s];t.pixels.push(r),o?t.mask&&(t.mask=te.combineBandMasks([t.mask,a])):t.mask=o?a:null}}}const u=Object.values(o).find((t=>t.attributeTable))?.attributeTable;return{extent:s,pixelBlocks:h,multidimensionalInfo:c,attributeTable:u,bandNames:c?void 0:a}}let ti=class extends ke{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.source=null}get url(){return""}async open(t){await this.init();const e=this.source,{pixelBlocks:i,attributeTable:s,statistics:n,histograms:r,name:a,nativeExtent:l,transform:o}=e,h=i[0],{width:u,height:f,pixelType:d}=h,p=e.extent??new c({xmin:-.5,ymin:.5,xmax:u-.5,ymax:f-.5,spatialReference:new x({wkid:3857})}),m=e.isPseudoSpatialReference??!e.extent,y={x:p.width/u,y:p.height/f},w={...e.keyProperties};s&&(w.DataType="Thematic");const g=new Ot({width:u,height:f,pixelType:d,extent:p,nativeExtent:l,attributeTable:s,transform:o,pixelSize:y,spatialReference:p.spatialReference,bandCount:h.pixels.length,keyProperties:w,multidimensionalInfo:e.multidimensionalInfo,statistics:n,isPseudoSpatialReference:m,histograms:r});this.ioConfig.skipMapInfo&&this.updateImageSpaceRasterInfo(g),this.createRemoteDatasetStorageInfo(g,512,512),this._set("rasterInfo",g),this.updateTileInfo(),g.multidimensionalInfo?await this._buildMDimStats(e.pixelBlocks,g.multidimensionalInfo):await this._buildInMemoryRaster(h,{width:512,height:512},t),g.multidimensionalInfo||(this.source=null),this.datasetName=a}fetchRawTile(t,e,i,s={}){if(!this._pixelBlockTiles){const{rasterInfo:n}=this,[r,a]=n.storageInfo.tileInfo.size,{sliceId:l}=s,{pixelBlocks:o}=this.source,c={pixelBlock:null==l?o[0]:o[l],useBilinear:"thematic"!==n.dataType,tileSize:{width:r,height:a},level:t,row:e,col:i},h=this.rasterJobHandler?this.rasterJobHandler.clipTile(c,s):se(c);return Promise.resolve(h)}const n=this._pixelBlockTiles.get(`${t}/${e}/${i}`);return Promise.resolve(n)}async _buildInMemoryRaster(t,e,i){const{rasterInfo:s}=this,n=s.storageInfo.maximumPyramidLevel??0,r="thematic"!==s.dataType,l=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:t,tileSize:e,maximumPyramidLevel:n,useBilinear:r},i):Promise.resolve(ne(t,e,n,r)),o=null!=s.statistics,c=null!=s.histograms,h=this.ioConfig.skipStatistics||o?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:t},i):Promise.resolve(Dt(t)),u=await k([l,h]);if(!u[0].value&&u[1].value)throw new a("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=u[0].value,o||(s.statistics=u[1].value?.statistics),c||(s.histograms=u[1].value?.histograms)}async _buildMDimStats(t,e,i){for(let s=0;s<e.variables.length;s++){const n=e.variables[s];if(n.statistics)continue;const r=n.dimensions.map((t=>new It({variableName:n.name,dimensionName:t.name,values:[t.values?.[0]??t.extent?.[0]],isSlice:!0}))),a=xt(r,e),l=null==a?null:t[a];if(null==l)continue;const o=this.rasterJobHandler?await this.rasterJobHandler.computeStatisticsHistograms({pixelBlock:l},i):kt(l);n.statistics=o.statistics,n.histograms||(n.histograms=o.histograms)}}};p([m({type:String,json:{write:!0}})],ti.prototype,"datasetFormat",void 0),p([m()],ti.prototype,"source",void 0),p([m()],ti.prototype,"url",null),ti=p([w("esri.layers.support.rasterDatasets.InMemoryRaster")],ti);const ei=ti;let ii=class extends ke{constructor(){super(...arguments),this.datasetFormat="CovJSON"}async open(t){await this.init();const{extent:e,pixelBlocks:i,multidimensionalInfo:s,attributeTable:n,bandNames:r}=await this._fetchData(t),{statistics:a,histograms:l}=kt(i[0]),o=r?.map((t=>({BandName:t}))),c={DataType:n?"Thematic":s?"Scientific":"Generic",BandProperties:o},h=new ei({source:{extent:e,pixelBlocks:i,attributeTable:n?v.fromJSON(n):null,multidimensionalInfo:s,statistics:a,histograms:l,keyProperties:c,isPseudoSpatialReference:!1}});await h.open(),this._inMemoryRaster=h;const u=this.source?"":this.url.slice(this.url.lastIndexOf("/")+1);this._set("datasetName",u.slice(0,u.indexOf("."))),this._set("rasterInfo",h.rasterInfo)}fetchRawTile(t,e,i,s={}){return this._inMemoryRaster.fetchRawTile(t,e,i,s)}async _fetchData(t){const e=this.source??(await this.request(this.url,{signal:t?.signal})).data,i="imagery-tile-layer:open-coverage-json";if("coverage"!==e.type?.toLowerCase()||"grid"!==e.domain?.domainType?.toLowerCase())throw new a(i,"Only coverage with Grid domain type is supported");if(!e.ranges)throw new a(i,"Missing ranges in the grid coverage data");if(!e.domain.referencing?.length)throw new a(i,"Missing domain referencing in the grid coverage data");const s=Object.values(e.ranges);for(let t=0;t<s.length;t++){const{axisNames:e,shape:n,type:r,values:l}=s[t];if(!("ndarray"===r.toLowerCase()&&l?.length&&e?.length&&n?.length))throw new a(i,"Only ranges with valid NdArray, axisNames, shape, and inline values are supported");if(!($e(e[e.length-1])&&Ue(e[e.length-2])))throw new a(i,"Only row-major ordered pixel values are supported. X axis must be the last axis.")}return Ze(e)}};p([m({type:String,json:{write:!0}})],ii.prototype,"datasetFormat",void 0),p([m({constructOnly:!0})],ii.prototype,"source",void 0),ii=p([w("esri.layers.support.rasterDatasets.CovJSONRaster")],ii);const si=ii;function ni(t,e){if(!t||!e)return[];let i=e;e.includes("/")?(i=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const s=[];if(e){const n=ni(t,i);for(let t=0;t<n.length;t++){ni(n[t],e).forEach((t=>s.push(t)))}return s}const n=t.getElementsByTagNameNS("*",i);if(!n||0===n.length)return[];for(let t=0;t<n.length;t++)s.push(n[t]||n.item(t));return s}function ri(t,e){if(!t||!e)return null;let i=e;e.includes("/")?(i=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const s=ni(t,i);return s.length>0?e?ri(s[0],e):s[0]:null}function ai(t,e=null){const i=e?ri(t,e):t;let s;return i?(s=i.textContent||i.nodeValue,s?s.trim():null):null}function li(t,e){const i=ni(t,e),s=[];let n;for(let t=0;t<i.length;t++)n=i[t].textContent||i[t].nodeValue,n&&(n=n.trim(),""!==n&&s.push(n));return s}function oi(t,e){return li(t,e).map((t=>Number(t)))}function ci(t,e){const i=ai(t,e);return Number(i)}function hi(t,e){const i=t?.nodeName?.toLowerCase(),s=e.toLowerCase();return i.slice(i.lastIndexOf(":")+1)===s}function ui(t,e){if(!t||!e)return null;const i=[];for(let s=0;s<t.length;s++)i.push(t[s]),i.push(e[s]);return i}function fi(t){const e=ri(t,"GeodataXform"),i=pi(ci(e,"SpatialReference/WKID")||ai(e,"SpatialReference/WKT"));if("typens:PolynomialXform"!==e.getAttribute("xsi:type"))return{spatialReference:i,transform:null};const s=ci(e,"PolynomialOrder")??1,n=oi(e,"CoeffX/Double"),r=oi(e,"CoeffY/Double"),a=oi(e,"InverseCoeffX/Double"),l=oi(e,"InverseCoeffY/Double"),o=ui(n,r),c=ui(a,l);return{spatialReference:i,transform:o&&c&&o.length&&c.length?new ve({spatialReference:i,polynomialOrder:s,forwardCoefficients:o,inverseCoefficients:c}):null}}function di(t){const e=ci(t,"NoDataValue"),i=ri(t,"Histograms/HistItem"),s=ci(i,"HistMin"),n=ci(i,"HistMax"),r=ci(i,"BucketCount"),a=ai(i,"HistCounts")?.split("|").map((t=>Number(t)));let l,o,c,h;ni(t,"Metadata/MDI").forEach((t=>{const e=Number(t.textContent??t.nodeValue);switch(t.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":l=e;break;case"STATISTICS_MAXIMUM":o=e;break;case"STATISTICS_MEAN":c=e;break;case"STATISTICS_STDDEV":h=e}}));const u=ci(t,"Metadata/SourceBandIndex");return{noDataValue:e,histogram:a?.length&&null!=s&&null!=n?{min:s,max:n,size:r||a.length,counts:a}:null,sourceBandIndex:u,statistics:null!=l&&null!=o?{min:l,max:o,avg:c,stddev:h}:null}}function pi(t){if(!t)return null;let e=Number(t);if(!isNaN(e)&&0!==e)return new x({wkid:e});if(t=String(t).trim(),P(t))return new x({wkt2:t});const i=t.toUpperCase();if(i.startsWith("COMPD_CS")){if(!i.includes("VERTCS")||!i.includes("GEOGCS")&&!i.startsWith("PROJCS"))return null;const s=i.indexOf("VERTCS"),n=i.indexOf("PROJCS"),r=n>-1?n:i.indexOf("GEOGCS");if(-1===r)return null;const a=t.slice(r,t.lastIndexOf("]",s)+1).trim(),l=t.slice(s,t.lastIndexOf("]")).trim();e=mi(a);const o=new x(e?{wkid:e}:{wkt:a}),c=mi(l);return c&&(o.vcsWkid=c),o}return i.startsWith("GEOGCS")||i.startsWith("PROJCS")?(e=mi(t),new x(0!==e?{wkid:e}:{wkt:t})):null}function mi(t){const e=t.replaceAll("]","[").replaceAll('"',"").split("[").map((t=>t.trim())).filter((t=>""!==t)),i=e[e.length-1].split(","),s=i[0]?.toLowerCase();if(("epsg"===s||"esri"===s)&&t.endsWith('"]]')){const t=Number(i[1]);if(!isNaN(t)&&0!==t)return t}return 0}function yi(t){if("pamdataset"!==t?.documentElement.tagName?.toLowerCase())return{};const e={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};t.documentElement.childNodes.forEach((t=>{if(1===t.nodeType)if(hi(t,"SRS")){if(!e.spatialReference){const i=ai(t);e.spatialReference=pi(i)}}else if(hi(t,"Metadata"))if("xml:ESRI"===t.getAttribute("domain")){const{spatialReference:i,transform:s}=fi(t);e.transform=s,e.spatialReference||(e.spatialReference=i)}else{ni(t,"MDI").forEach((t=>e.metadata[t.getAttribute("key")]=ai(t)))}else if(hi(t,"PAMRasterBand")){const i=di(t);null!=i.sourceBandIndex&&null==e.rasterBands[i.sourceBandIndex]?e.rasterBands[i.sourceBandIndex]=i:e.rasterBands.push(i)}}));const i=e.rasterBands;if(i.length){const t=!!i[0].statistics;e.statistics=t?i.map((t=>t.statistics)).filter(C):null;const s=!!i[0].histogram;e.histograms=s?i.map((t=>t.histogram)).filter(C):null}return e}let wi=class extends ke{async open(t){await this.init();const e=await this._fetchData(t);let{spatialReference:i,statistics:s,histograms:n,transform:r}=await this._fetchAuxiliaryData(t);const a=!i;a&&(i=new x({wkid:3857})),n?.length&&null==s&&(s=Bt(n));const{width:l,height:o}=e;let h=new c({xmin:-.5,ymin:.5-o,xmax:l-.5,ymax:.5,spatialReference:i});const u=r?r.forwardTransform(h):h;let f=!0;if(r){const t=r.forwardCoefficients;f=t&&0===t[1]&&0===t[2],f&&(r=null,h=u)}const d=new ei({source:{extent:u,nativeExtent:h,transform:r,pixelBlocks:[e],statistics:s,histograms:n,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:a},ioConfig:{sampling:"closest",skipStatistics:!0}});this.ioConfig.skipMapInfo&&(d.ioConfig.skipMapInfo=!0),await d.open(),d.source=null,this._set("rasterInfo",d.rasterInfo),this._inMemoryRaster=d}fetchRawTile(t,e,i,s={}){return this._inMemoryRaster.fetchRawTile(t,e,i,s)}async _fetchData(t){const{data:e}=await this.request(this.url,{responseType:"array-buffer",signal:t?.signal}),i=_t(e).toUpperCase();if("JPG"!==i&&"PNG"!==i&&"GIF"!==i&&"BMP"!==i)throw new a("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",i);const s=i.toLowerCase(),n="gif"===s||"bmp"===s||!O("ios"),r=await this.decodePixelBlock(e,{format:s,useCanvas:n,hasNoZlibMask:!0});if(null==r)throw new a("image-aux-raster:open","the data cannot be decoded");return r}async _fetchAuxiliaryData(t){const e=t?.signal,{skipExtensions:i=[],skipMapInfo:s}=this.ioConfig,n=s||i.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:e}),r=this.datasetFormat,a="JPG"===r?"jgw":"PNG"===r?"pgw":"BMP"===r?"bpw":null,l=a&&i.includes(a)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+a,{responseType:"text",signal:e}),o=await k([n,l]);if(e?.aborted)throw D();const c=yi(o[0].value?.data);if(!c.transform){const t=o[1].value?o[1].value.data.split("\n").slice(0,6).map((t=>Number(t))):null;c.transform=6===t?.length?new ve({forwardCoefficients:[t[4],t[5],t[0],-t[1],t[2],-t[3]]}):null}return c}};p([m({type:String,json:{write:!0}})],wi.prototype,"datasetFormat",void 0),wi=p([w("esri.layers.support.rasterDatasets.ImageAuxRaster")],wi);const xi=wi;let gi=class extends ke{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async open(t){await this.init();const e=t?.signal,i=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:e});i.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const n=i.data;if(this.sourceJSON=n,!n)throw new a("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!n.tileInfo)throw new a("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const r=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=n.cacheType,null==this.tileType&&(r.includes(n.tileInfo.format.toLowerCase())?this.tileType="Map":"lerc"===n.tileInfo.format.toLowerCase()?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=n.name?.slice(n.name.indexOf("/")+1)??"";const l=await this._fetchRasterInfo({signal:e});if(null==l)throw new a("image-server-raster:open","cannot initialize image service");pt(l,n);const o="Map"===this.tileType?vi(n.tileInfo,n):s.fromJSON(n.tileInfo);B(o);const[c,h]=this._computeMinMaxLOD(l,o),{extent:u,pixelSize:f}=l,d=.5/l.width*f.x,p=Math.max(f.x,f.y),{lods:m}=o;("Map"!==this.tileType&&0!==n.maxScale||Math.abs(f.x-f.y)>d||!m.some((t=>Math.abs(t.resolution-p)<d)))&&(f.x=f.y=c.resolution,l.width=Math.ceil((u.xmax-u.xmin)/f.x-.1),l.height=Math.ceil((u.ymax-u.ymin)/f.y-.1));const y=c.level-h.level,[w,x]=o.size,g=[],v=[];m.forEach(((t,e)=>{t.level>=h.level&&t.level<=c.level&&g.push({x:t.resolution,y:t.resolution}),e<m.length-1&&v.push(Math.round(10*t.resolution/m[e+1].resolution)/10)})),g.sort(((t,e)=>t.x-e.x));const I=this.computeBlockBoundary(u,w,x,o.origin,g,y),b=g.length>1?g.slice(1):null;let S;n.transposeInfo&&(S={tileSize:[n.transposeInfo.rows,n.transposeInfo.cols],packetSize:l.keyProperties?._yxs.PacketSize??0});const R=v.length<=1||v.length>=3&&v.slice(0,-1).every((t=>t===v[0]))?v[0]??2:Math.round(10/(h.resolution/c.resolution)**(-1/y))/10;if(l.storageInfo=new Ft({blockWidth:o.size[0],blockHeight:o.size[1],pyramidBlockWidth:o.size[0],pyramidBlockHeight:o.size[1],pyramidResolutions:b,pyramidScalingFactor:R,compression:o.format,origin:o.origin,firstPyramidLevel:1,maximumPyramidLevel:y,tileInfo:o,transposeInfo:S,blockBoundary:I}),this._fixGCSShift(l),this._set("rasterInfo",l),n.capabilities.toLowerCase().includes("tilemap")){const t={tileInfo:l.storageInfo.tileInfo,parsedUrl:_(this.url),url:this.url,tileServers:[]};this._tilemapCache=new Se({layer:t})}}async fetchRawTile(t,e,i,s={}){const{storageInfo:n,extent:r}=this.rasterInfo,{transposeInfo:a}=n,l=null!=a&&!!s.transposedVariableName;if(this._slices&&!l&&null==s.sliceId)return null;const o=l?0:n.maximumPyramidLevel-t+this._levelOffset,c=`${this.url}/tile/${o}/${e}/${i}`,h=this._slices?l?{variable:s.transposedVariableName}:{sliceId:s.sliceId||0}:null,{data:u}=await this.request(c,{query:h,responseType:"array-buffer",signal:s.signal});if(!u)return null;const f=l?a.tileSize:n.tileInfo.size,d=await this.decodePixelBlock(u,{width:f[0],height:f[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType,returnInterleaved:l,noDataValue:this.rasterInfo.noDataValue});if(null==d)return null;const p=n.blockBoundary[t];if("jpg"!==n.compression||i>p.minCol&&i<p.maxCol&&e>p.minRow&&e<p.maxRow)return d;const{origin:m,blockWidth:y,blockHeight:w}=n,{x,y:g}=this.getPyramidPixelSize(t),v=Math.round((r.xmin-m.x)/x)%y,I=Math.round((r.xmax-m.x)/x)%y||y,b=Math.round((m.y-r.ymax)/g)%w,S=Math.round((m.y-r.ymin)/g)%w||w,R=i===p.minCol?v:0,M=e===p.minRow?b:0,T=i===p.maxCol?I:y,F=e===p.maxRow?S:w;return re(d,{x:R,y:M},{width:T-R,height:F-M}),d}getSliceIndex(t){if(!this._slices||null==t||0===t.length)return null;const e=t;for(let t=0;t<this._slices.length;t++){const i=this._slices[t].multidimensionalDefinition;if(i.length===e.length&&!i.some((t=>{const i=e.find((e=>t.variableName===e.variableName&&e.dimensionName===t.dimensionName));if(!i)return!0;return(Array.isArray(t.values[0])?`${t.values[0][0]}-${t.values[0][1]}`:t.values[0])!==(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])})))return t}return null}async fetchVariableStatisticsHistograms(t,e){const i=this.request(this.url+"/statistics",{query:{variable:t,f:"json"},signal:e}).then((t=>t.data?.statistics)),s=this.request(this.url+"/histograms",{query:{variable:t,f:"json"},signal:e}).then((t=>t.data?.histograms)),n=await Promise.all([i,s]);return n[0]&&n[0].forEach((t=>{t.avg=t.mean,t.stddev=t.standardDeviation})),n[1]?.[0]?.counts?.length||(n[1]=null),{statistics:n[0]||null,histograms:n[1]||null}}async computeBestPyramidLevelForLocation(t,e={}){if(!this._tilemapCache)return 0;let i=this.identifyPixelLocation(t,0,e.datumTransformation);if(null===i)return null;let s=0;const{maximumPyramidLevel:n}=this.rasterInfo.storageInfo;let r=n-s+this._levelOffset;const a=i.srcLocation;for(;r>=0;){try{if("available"===await this._tilemapCache.fetchAvailability(r,i.row,i.col,e))break}catch{}if(r--,s++,i=this.identifyPixelLocation(a,s,e.datumTransformation),null===i)return null}return-1===r||null==i?null:s}async _fetchRasterInfo(t){const e=this.sourceJSON;if("Map"===this.tileType){const t=e.fullExtent||e.extent,i=Math.ceil((t.xmax-t.xmin)/e.pixelSizeX-.1),s=Math.ceil((t.ymax-t.ymin)/e.pixelSizeY-.1),n=x.fromJSON(e.spatialReference||t.spatialReference),r=new o({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:n});return new Ot({width:i,height:s,bandCount:3,extent:c.fromJSON(t),spatialReference:n,pixelSize:r,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:i}=t,s=mt(this.url,this.sourceJSON,{signal:i,query:this.ioConfig.customFetchParameters}),n=e.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:i}).then((t=>t.data?.slices)).catch((()=>null)):null,r=await Promise.all([s,n]);return this._slices=r[1],r[0]}_fixScaleInServiceInfo(){const{sourceJSON:t}=this;t.minScale&&t.minScale<0&&(t.minScale=0),t.maxScale&&t.maxScale<0&&(t.maxScale=0)}_fixGCSShift(t){const{extent:e,spatialReference:i}=t;e.xmin>-1&&e.xmax>181&&i?.wkid&&i.isGeographic&&(t.nativeExtent=t.extent,t.transform=new Ie,t.extent=t.transform.forwardTransform(e))}_computeMinMaxLOD(t,e){const{pixelSize:i}=t,s=.5/t.width*i.x,{lods:n}=e,r=e.lodAt(Math.max.apply(null,n.map((t=>t.level)))),a=e.lodAt(Math.min.apply(null,n.map((t=>t.level)))),{tileType:l}=this;if("Map"===l)return this._levelOffset=n[0].level,[r,a];if("Raster"===l){return[n.find((t=>t.resolution===i.x))??r,a]}const{minScale:o,maxScale:c}=this.sourceJSON;let h=r;c>0&&(h=n.find((t=>Math.abs(t.scale-c)<s)),h||(h=n.filter((t=>t.scale>c)).sort(((t,e)=>t.scale>e.scale?1:-1))[0]??r));let u=a;return o>0&&(u=n.find((t=>Math.abs(t.scale-o)<s))??a,this._levelOffset=u.level-a.level),[h,u]}};function vi(t,e){if(!t)return null;const{minScale:i,maxScale:n,minLOD:r,maxLOD:a}=e;if(null!=r&&null!=a)return s.fromJSON({...t,lods:t.lods.filter((({level:t})=>null!=t&&t>=r&&t<=a))});if(0!==i&&0!==n){const e=t=>Math.round(1e4*t)/1e4,r=i?e(i):1/0,a=n?e(n):-1/0;return s.fromJSON({...t,lods:t.lods.filter((t=>{const i=e(t.scale);return i<=r&&i>=a}))})}return s.fromJSON(t)}p([m({type:String,json:{write:!0}})],gi.prototype,"datasetFormat",void 0),p([m()],gi.prototype,"tileType",void 0),gi=p([w("esri.layers.support.rasterDatasets.ImageServerRaster")],gi);const Ii=gi;const bi=new Map;bi.set("Int8","s8"),bi.set("UInt8","u8"),bi.set("Int16","s16"),bi.set("UInt16","u16"),bi.set("Int32","s32"),bi.set("UInt32","u32"),bi.set("Float32","f32"),bi.set("Float64","f32"),bi.set("Double64","f32");const Si=new Map;Si.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),Si.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),Si.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),Si.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let Ri=class extends ke{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(t){await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const e=t?t.signal:null,i=await this.request(this.url,{responseType:"xml",signal:e}),{rasterInfo:s,files:n}=this._parseHeader(i.data),{skipMapInfo:r,skipExtensions:a=[]}=this.ioConfig;if(!a.includes("aux.xml")&&!r){const e=await this._fetchAuxiliaryData(t);null!=e&&(s.statistics=e.statistics??s.statistics,s.histograms=e.histograms,e.histograms&&null==s.statistics&&(s.statistics=Bt(e.histograms)))}r&&this.updateImageSpaceRasterInfo(s),this._set("rasterInfo",s),this._files=n;const l=await this.request(n.index,{responseType:"array-buffer",signal:e});this._storageIndex=this._parseIndex(l.data);const{blockWidth:o,blockHeight:c}=this.rasterInfo.storageInfo,h=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:u,height:f}=this.rasterInfo,d=[],p=this._getBandSegmentCount();let m=0,y=-1;for(;m<this._storageIndex.length;){y++;const t=Math.ceil(u/o/h**y)-1,e=Math.ceil(f/c/h**y)-1;m+=(t+1)*(e+1)*p*4,d.push({maxRow:e,maxCol:t,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=d,y>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=y),this.updateTileInfo()}async fetchRawTile(t,e,i,s={}){const{blockWidth:n,blockHeight:r,blockBoundary:a}=this.rasterInfo.storageInfo,l=a[t];if(!l||l.maxRow<e||l.maxCol<i||l.minRow>e||l.minCol>i)return null;const{bandCount:o,pixelType:c}=this.rasterInfo,{ranges:h,actualTileWidth:u,actualTileHeight:f}=this._getTileLocation(t,e,i);if(!h||0===h.length)return null;if(0===h[0].from&&0===h[0].to){const t=new Uint8Array(n*r);return new te({width:n,height:r,pixels:null,mask:t,validPixelCount:0})}const{bandIds:d}=this.ioConfig,p=this._getBandSegmentCount(),m=[];let y=0;for(y=0;y<p;y++)d&&!d.includes(y)||m.push(this.request(this._files.data,{range:{from:h[y].from,to:h[y].to},responseType:"array-buffer",signal:s.signal}));const w=await Promise.all(m),x=w.map((t=>t.data.byteLength)).reduce(((t,e)=>t+e)),g=new Uint8Array(x),v=[];let I=0;for(y=0;y<p;y++)v.push(I),g.set(new Uint8Array(w[y].data),I),I+=w[y].data.byteLength;const b=Si.get(this.rasterInfo.storageInfo.compression).decoderFormat,S=await this.decodePixelBlock(g.buffer,{width:n,height:r,format:b,planes:d?.length||o,offsets:v,pixelType:c});if(null==S)return null;let{noDataValue:R}=this.rasterInfo;if(null!=R&&"lerc"!==b&&!S.mask&&(R=R[0],null!=R)){const t=S.width*S.height,e=new Uint8Array(t);if(Math.abs(R)>1e24)for(y=0;y<t;y++)Math.abs((S.pixels[0][y]-R)/R)>1e-6&&(e[y]=1);else for(y=0;y<t;y++)S.pixels[0][y]!==R&&(e[y]=1);S.mask=e}let M=0,T=0;if(u!==n||f!==r){let t=S.mask;if(t)for(y=0;y<r;y++)if(T=y*n,y<f)for(M=u;M<n;M++)t[T+M]=0;else for(M=0;M<n;M++)t[T+M]=0;else for(t=new Uint8Array(n*r),S.mask=t,y=0;y<f;y++)for(T=y*n,M=0;M<u;M++)t[T+M]=1}return S}_parseIndex(t){if(t.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let e,i,s,n,r,a;if(Et){for(i=new Uint8Array(t),n=new ArrayBuffer(t.byteLength),s=new Uint8Array(n),r=0;r<t.byteLength/4;r++)for(a=0;a<4;a++)s[4*r+a]=i[4*r+3-a];e=new Uint32Array(n)}else e=new Uint32Array(t);return e}_getBandSegmentCount(){return Si.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(t,e,i){const{blockWidth:s,blockHeight:n,pyramidScalingFactor:r}=this.rasterInfo.storageInfo,{width:a,height:l}=this.rasterInfo,o=this._getBandSegmentCount();let c,h,u,f=0,d=0;for(u=0;u<t;u++)d=r**u,c=Math.ceil(a/s/d),h=Math.ceil(l/n/d),f+=c*h;d=r**t,c=Math.ceil(a/s/d),h=Math.ceil(l/n/d),f+=e*c+i,f*=4*o;const p=this._storageIndex.subarray(f,f+4*o);let m=0,y=0;const w=[];for(let t=0;t<o;t++)m=p[4*t]*2**32+p[4*t+1],y=m+p[4*t+2]*2**32+p[4*t+3],w.push({from:m,to:y});return{ranges:w,actualTileWidth:i<c-1?s:Math.ceil(a/d)-s*(c-1),actualTileHeight:e<h-1?n:Math.ceil(l/d)-n*(h-1)}}_parseHeader(t){const e=ri(t,"MRF_META/Raster");if(!e)throw new a("mrf:open","not a valid MRF format");const i=ri(e,"Size"),s=parseInt(i.getAttribute("x"),10),n=parseInt(i.getAttribute("y"),10),r=parseInt(i.getAttribute("c"),10),l=(ai(e,"Compression")||"none").toLowerCase();if(!Si.has(l))throw new a("mrf:open","currently does not support compression "+l);const h=ai(e,"DataType")||"UInt8",u=bi.get(h);if(null==u)throw new a("mrf:open","currently does not support pixel type "+h);const f=ri(e,"PageSize"),d=parseInt(f.getAttribute("x"),10),p=parseInt(f.getAttribute("y"),10),m=ri(e,"DataValues");let y,w;m&&(w=m.getAttribute("NoData"),null!=w&&(y=w.trim().split(" ").map((t=>parseFloat(t)))));if(ri(t,"MRF_META/CachedSource"))throw new a("mrf:open","currently does not support MRF referencing other data files");const g=ri(t,"MRF_META/GeoTags"),v=ri(g,"BoundingBox");let I,b=!1;if(null!=v){const t=parseFloat(v.getAttribute("minx")),e=parseFloat(v.getAttribute("miny")),i=parseFloat(v.getAttribute("maxx")),s=parseFloat(v.getAttribute("maxy")),n=ai(g,"Projection")||"";let r=x.WGS84;if("LOCAL_CS[]"!==n)if(n.toLowerCase().startsWith("epsg:")){const t=Number(n.slice(5));isNaN(t)||0===t||(r=new x({wkid:t}))}else r=pi(n)??x.WGS84;else b=!0,r=new x({wkid:3857});I=new c(t,e,i,s),I.spatialReference=r}else b=!0,I=new c({xmin:-.5,ymin:.5-n,xmax:s-.5,ymax:.5,spatialReference:new x({wkid:3857})});const S=ri(t,"MRF_META/Rsets"),R=parseInt(S?.getAttribute("scale")||"2",10),M=I.spatialReference,T=new Ft({origin:new o({x:I.xmin,y:I.ymax,spatialReference:M}),blockWidth:d,blockHeight:p,pyramidBlockWidth:d,pyramidBlockHeight:p,compression:l,pyramidScalingFactor:R}),F=new o({x:I.width/s,y:I.height/n,spatialReference:M}),k=new Ot({width:s,height:n,extent:I,isPseudoSpatialReference:b,spatialReference:M,bandCount:r,pixelType:u,pixelSize:F,noDataValue:y,storageInfo:T}),P=ai(t,"datafile"),C=ai(t,"IndexFile");return{rasterInfo:k,files:{mrf:this.url,index:C||this.url.replace(".mrf",".idx"),data:P||this.url.replace(".mrf",Si.get(l).blobExtension)}}}async _fetchAuxiliaryData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t?.signal});return yi(e)}catch{return null}}};p([m()],Ri.prototype,"_files",void 0),p([m()],Ri.prototype,"_storageIndex",void 0),p([m({type:String,json:{write:!0}})],Ri.prototype,"datasetFormat",void 0),Ri=p([w("esri.layers.support.rasterIO.MRFRaster")],Ri);const Mi=Ri;const Ti=(t,e)=>t.get(e)?.values,Fi=(t,e)=>t.get(e)?.values?.[0];let ki=class extends ke{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(t){await this.init();const e=t?t.signal:null,{data:i}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:e});if(!i)throw new a("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:s,firstIFDPos:n,isBigTiff:l}=Nt(i),o=[];await this._readIFDs(o,i,s,n,0,l?8:4,e);const{imageInfo:c,rasterInfo:h}=this._parseIFDs(o),u=At(o),f=jt(o);if(this._headerInfo={littleEndian:s,isBigTiff:l,ifds:o,pyramidIFDs:u,maskIFDs:f,...c},this._set("rasterInfo",h),!c.isSupported)throw new a("tiffraster:open","this tiff is not supported: "+c.message);if(!c.tileWidth)throw new a("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");h.isPseudoSpatialReference&&r.getLogger(this).warn("The spatial reference for this tiff is unsupported. Only EPSG spatial reference codes and Esri WKTs are supported.");const d=o[0].get("PREDICTOR")?.values?.[0],p=o[0].get("SAMPLEFORMAT")?.values?.[0];if(3===p&&2===d)throw new a("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floating point data");const{skipMapInfo:m,skipExtensions:y=[]}=this.ioConfig;if(!y.includes("aux.xml")&&!m){const e=await this._fetchAuxiliaryMetaData(t);null!=e&&this._processPAMInfo(e,h)}y.includes("vat.dbf")||1!==h.bandCount||"u8"!==h.pixelType||m||(h.attributeTable=await this._fetchAuxiliaryTable(t),null!=h.attributeTable&&(h.keyProperties.DataType="thematic")),m&&this.updateImageSpaceRasterInfo(h),this.updateTileInfo()}async fetchRawTile(t,e,i,s={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(t,e,i))return null;const n=await this._fetchRawTiffTile(t,e,i,!1,s);if(null!=n&&this._headerInfo.hasMaskBand){const r=await this._fetchRawTiffTile(t,e,i,!0,s);null!=r&&r.pixels[0]instanceof Uint8Array&&(n.mask=r.pixels[0])}return n}_parseIFDs(t){const e=zt(t),{width:i,height:s,tileWidth:n,tileHeight:r,planes:a,pixelType:l,compression:h,firstPyramidLevel:u,maximumPyramidLevel:f,pyramidBlockWidth:d,pyramidBlockHeight:p,tileBoundary:m,affine:y,metadata:w}=e,g=e.extent.spatialReference?.wkt||e.extent.spatialReference?.wkid;let v=pi(g),I=!!e.isPseudoGeographic;null==v&&(I=!0,v=new x({wkid:3857}));const b=new c({...e.extent,spatialReference:v}),S=new o(b?{x:b.xmin,y:b.ymax,spatialReference:v}:{x:0,y:0}),R=new Ft({blockWidth:n,blockHeight:r,pyramidBlockWidth:d,pyramidBlockHeight:p,compression:h,origin:S,firstPyramidLevel:u,maximumPyramidLevel:f,blockBoundary:m}),M=new o({x:(b.xmax-b.xmin)/i,y:(b.ymax-b.ymin)/s,spatialReference:v}),T=w?{BandProperties:w.bandProperties,DataType:w.dataType}:{};let F=null;const k=Fi(t[0],"PHOTOMETRICINTERPRETATION"),P=Ti(t[0],"COLORMAP");if(k<=3&&P?.length>3&&P.length%3==0){F=[];const t=P.length/3;for(let e=0;e<t;e++)F.push([e,P[e]>>>8,P[e+t]>>>8,P[e+2*t]>>>8])}const C=new Ot({width:i,height:s,bandCount:a,pixelType:l,pixelSize:M,storageInfo:R,spatialReference:v,isPseudoSpatialReference:I,keyProperties:T,extent:b,colormap:F,statistics:w?w.statistics:null});return y?.length&&(C.nativeExtent=new c({xmin:-.5,ymin:.5-s,xmax:i-.5,ymax:.5,spatialReference:v}),C.transform=new ve({polynomialOrder:1,forwardCoefficients:[y[2]+y[0]/2,y[5]-y[3]/2,y[0],y[3],-y[1],-y[4]]}),C.extent=C.transform.forwardTransform(C.nativeExtent),C.pixelSize=new o({x:(b.xmax-b.xmin)/i,y:(b.ymax-b.ymin)/s,spatialReference:v}),R.origin.x=-.5,R.origin.y=.5),{imageInfo:e,rasterInfo:C}}_processPAMInfo(t,e){if(e.statistics=t.statistics??e.statistics,e.histograms=t.histograms,t.histograms&&null==e.statistics&&(e.statistics=Bt(t.histograms)),t.transform&&null==e.transform){e.transform=t.transform,e.nativeExtent=e.extent;const i=e.transform.forwardTransform(e.nativeExtent);e.pixelSize=new o({x:(i.xmax-i.xmin)/e.width,y:(i.ymax-i.ymin)/e.height,spatialReference:e.spatialReference}),e.extent=i}e.isPseudoSpatialReference&&t.spatialReference&&(e.spatialReference=t.spatialReference,e.extent.spatialReference=e.nativeExtent.spatialReference=e.storageInfo.origin.spatialReference=e.spatialReference)}async _readIFDs(t,e,i,s,n,r=4,a){if(!s)return null;if(s>=e.byteLength||s<0){e=(await this.request(this.url,{range:{from:s+n,to:s+n+this._bufferSize},responseType:"array-buffer",signal:a})).data,n=s+n,s=0}const l=await this._readIFD(e,i,s,n,Lt.tiffTags,r,a);if(t.push(l.ifd),!l.nextIFD)return null;await this._readIFDs(t,e,i,l.nextIFD-n,n,r,a)}async _readIFD(t,e,i,s,n=Lt.tiffTags,r=4,a){if(!t)return null;const l=Gt(t,e,i,s,n,r);if(l.success){const i=[];if(l.ifd?.forEach((t=>{t.values||i.push(t)})),i.length>0){const n=i.map((t=>t.offlineOffsetSize)).filter(C),r=Math.min.apply(null,n.map((t=>t[0])));if(Math.min.apply(null,n.map((t=>t[0]+t[1])))-r<=this._bufferSize){const{data:n}=await this.request(this.url,{range:{from:r,to:r+this._bufferSize},responseType:"array-buffer",signal:a});t=n,s=r,i.forEach((i=>Ht(t,e,i,s)))}}if(l.ifd?.has("GEOKEYDIRECTORY")){const i=l.ifd.get("GEOKEYDIRECTORY"),n=i?.values;if(n&&n.length>4){const r=n[0]+"."+n[1]+"."+n[2],l=await this._readIFD(t,e,i.valueOffset+6-s,s,Lt.geoKeys,2,a);i.data=l.ifd,i.data&&i.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[r]})}}return l}if(l.requiredBufferSize&&l.requiredBufferSize!==t.byteLength){const i=await this.request(this.url,{range:{from:s,to:s+l.requiredBufferSize+4},responseType:"array-buffer",signal:a});return(t=i.data).byteLength<l.requiredBufferSize?null:this._readIFD(t,e,0,s,Lt.tiffTags,4,a)}}async _fetchRawTiffTile(t,e,i,s,n={}){const r=this._getTileLocation(t,e,i,s);if(!r)return null;const{ranges:a,actualTileWidth:l,actualTileHeight:o,ifd:c}=r,h=a.map((t=>this.request(this.url,{range:t,responseType:"array-buffer",signal:n.signal}))),u=await Promise.all(h),f=u.map((t=>t.data.byteLength)).reduce(((t,e)=>t+e)),d=1===u.length?u[0].data:new ArrayBuffer(f),p=[0],m=[0];if(u.length>1){const t=new Uint8Array(d);for(let e=0,i=0;e<u.length;e++){const s=u[e].data;t.set(new Uint8Array(s),i),p[e]=i,i+=s.byteLength,m[e]=s.byteLength}}const{blockWidth:y,blockHeight:w}=this.getBlockWidthHeight(t),x=await this.decodePixelBlock(d,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:c,offsets:p,sizes:m},width:y,height:w,planes:null,pixelType:null});if(null==x)return null;let g,v,I;if(l!==y||o!==w){let t=x.mask;if(t)for(g=0;g<w;g++)if(I=g*y,g<o)for(v=l;v<y;v++)t[I+v]=0;else for(v=0;v<y;v++)t[I+v]=0;else for(t=new Uint8Array(y*w),x.mask=t,g=0;g<o;g++)for(I=g*y,v=0;v<l;v++)t[I+v]=1}return x}_getTileLocation(t,e,i,s=!1){const{firstPyramidLevel:n,blockBoundary:r}=this.rasterInfo.storageInfo,a=0===t?0:t-(n-1),{_headerInfo:l}=this;if(!l)return null;const o=s?l.maskIFDs[a]:0===a?l?.ifds[0]:l?.pyramidIFDs[a-1];if(!o)return null;const c=Wt(o,l),h=Ti(o,"TILEOFFSETS");if(void 0===h)return null;const u=Ti(o,"TILEBYTECOUNTS"),{minRow:f,minCol:d,maxRow:p,maxCol:m}=r[a];if(e>p||i>m||e<f||i<d)return null;const y=Fi(o,"IMAGEWIDTH"),w=Fi(o,"IMAGELENGTH"),x=Fi(o,"TILEWIDTH"),g=Fi(o,"TILELENGTH"),v=[];if(c){const{bandCount:t}=this.rasterInfo;for(let s=0;s<t;s++){const t=s*(p+1)*(m+1)+e*(m+1)+i;v[s]={from:h[t],to:h[t]+u[t]-1}}}else{const t=e*(m+1)+i;v.push({from:h[t],to:h[t]+u[t]-1})}for(let t=0;t<v.length;t++)if(null==v[t].from||!v[t].to||v[t].to<0)return null;return{ranges:v,ifd:o,actualTileWidth:i===m&&y%x||x,actualTileHeight:e===p&&w%g||g}}async _fetchAuxiliaryMetaData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t?.signal});return yi(e)}catch{return null}}async _fetchAuxiliaryTable(t){try{const{data:e}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:t?.signal}),i=Le.parse(e);return i?.recordSet?v.fromJSON(i.recordSet):null}catch{return null}}};p([m()],ki.prototype,"_files",void 0),p([m()],ki.prototype,"_headerInfo",void 0),p([m()],ki.prototype,"_bufferSize",void 0),p([m({type:String,json:{write:!0}})],ki.prototype,"datasetFormat",void 0),ki=p([w("esri.layers.support.rasterDatasets.TIFFRaster")],ki);const Pi=ki;const Ci=new Map;Ci.set("CRF",{desc:"Cloud Raster Format",constructor:Je}),Ci.set("MRF",{desc:"Meta Raster Format",constructor:Mi}),Ci.set("TIFF",{desc:"GeoTIFF",constructor:Pi}),Ci.set("RasterTileServer",{desc:"Raster Tile Server",constructor:Ii}),Ci.set("JPG",{desc:"JPG Raster Format",constructor:xi}),Ci.set("PNG",{desc:"PNG Raster Format",constructor:xi}),Ci.set("GIF",{desc:"GIF Raster Format",constructor:xi}),Ci.set("BMP",{desc:"BMP Raster Format",constructor:xi}),Ci.set("CovJSON",{desc:"COVJSON Raster Format",constructor:si}),Ci.set("MEMORY",{desc:"In Memory Raster Format",constructor:ei});class Oi{static get supportedFormats(){const t=new Set;return Ci.forEach(((e,i)=>t.add(i))),t}static async open(t){const{url:e,ioConfig:i,source:s,sourceJSON:n}=t;let r=t.datasetFormat??i?.datasetFormat;null==r&&(e.includes(".")?r=e.slice(e.lastIndexOf(".")+1).toUpperCase():"coverage"===s?.type?.toLowerCase()?r="CovJSON":s?.extent&&s.pixelblocks&&(r="MEMORY")),"OVR"===r||"TIF"===r?r="TIFF":"JPG"===r||"JPEG"===r||"JFIF"===r?r="JPG":"COVJSON"===r&&(r="CovJSON"),e.toLowerCase().includes("/imageserver")&&!e.toLowerCase().includes("/wcsserver")&&(r="RasterTileServer");const l={url:e,source:s,sourceJSON:n,datasetFormat:r,ioConfig:i??{bandIds:null,sampling:null}};if(Object.keys(l).forEach((t=>{null==l[t]&&delete l[t]})),r){if(!this.supportedFormats.has(r))throw new a("rasterfactory:open","not a supported format "+r);if("CRF"===r&&!i?.enableCRF)throw new a("rasterfactory:open",`cannot open raster: ${e}`);const s=new(Ci.get(r).constructor)(l);return await s.open({signal:t.signal}),s}const o=Array.from(Ci.keys()).filter((t=>"CovJSON"!==t&&"Memory"!==t));let c=0;const h=()=>{if(r=o[c++],!r)return null;if("CRF"===r&&!i?.enableCRF)return null;const e=new(Ci.get(r).constructor)(l);return e.open({signal:t.signal}).then((()=>e)).catch((()=>h()))};return h()}static register(t,e,i){Ci.has(t.toUpperCase())||Ci.set(t.toUpperCase(),{desc:e,constructor:i})}}let Di=class extends(E(N(A(j(z(je(L(G(H(W(J($)))))))))))){constructor(...t){super(...t),this._primaryRasters=[],this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this.source=void 0,this._debouncedSaveOperations=U((async(t,e,i)=>{const{save:s,saveAs:n}=await import("./p-09b9ec4a.js");switch(t){case V.SAVE:return s(this,e);case V.SAVE_AS:return n(this,i,e)}}))}normalizeCtorArgs(t,e){return"string"==typeof t?{url:t,...e}:t}load(t){const e=null!=t?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},t).catch(q).then((()=>this._openRaster(e)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const t=[new Y({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"}),new Y({name:"Raster.ServicePixelValue.Raw",alias:"Raw Pixel Value",domain:null,editable:!1,length:50,type:"string"})],{serviceRasterInfo:e}=this,i=e?.attributeTable,s=null!=i?i.fields:null,n="Raster.";if(s){const e=s.filter((t=>"oid"!==t.type&&"value"!==t.name.toLowerCase())).map((t=>{const e=t.clone();return e.name=n+t.name,e}));t.push(...e)}const r=e?.dataType,a=e?.multidimensionalInfo;if(("vector-magdir"===r||"vector-uv"===r)&&null!=a){const e=a.variables[0].unit?.trim(),i="Magnitude"+(e?` (${e})`:"");t.push(new Y({name:"Raster.Magnitude",alias:i,domain:null,editable:!1,type:"double"})),t.push(new Y({name:"Raster.Direction",alias:"Direction (°)",domain:null,editable:!1,type:"double"}))}return t}createPopupTemplate(t){const{rasterFields:e}=this,i=new Set(e.map((({name:t})=>t)).filter((t=>"raster.servicepixelvalue.raw"!==t.toLowerCase())));return X({fields:e,title:this.title},{...t,visibleFieldNames:i})}async generateRasterInfo(t,e){if(!(t=l(st,t)))return this.serviceRasterInfo;try{const{rasterInfo:i}=await this._openFunctionRaster(t,e);return i}catch(t){if(t instanceof a)throw t;throw new a("imagery-tile-layer","the given raster function is not supported")}}async save(t){return this._debouncedSaveOperations(V.SAVE,t)}async saveAs(t,e){return this._debouncedSaveOperations(V.SAVE_AS,e,t)}write(t,e){const i=this._primaryRasters[0]??this.raster;if(this.loaded?"RasterTileServer"===i.datasetFormat&&("Raster"===i.tileType||"Map"===i.tileType):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(t,e);if(e?.messages){const t=`${e.origin}/${e.layerContainerType||"operational-layers"}`;e.messages.push(new a("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${t}'`,{layer:this}))}return null}async _openRaster(t){let e=!1;if(this.raster)await this._openFromRaster(this.raster,t),e="Function"===this.raster.datasetFormat;else{const{url:e,rasterFunction:i,source:s}=this;if(!e&&!s)throw new a("imagery-tile-layer:open","missing url or source parameter");s?await this._openFromSource(s,t):i?await this._openFromUrlWithRasterFunction(e,i,t):await this._openFromUrl(e,t)}const i=this.raster.rasterInfo;if(!i)throw new a("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("serviceRasterInfo",e?i:this._primaryRasters[0].rasterInfo),this._set("spatialReference",i.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,null!=this.sourceJSON){const t="Map"===this.raster.tileType&&null!=this.sourceJSON.minLOD&&null!=this.sourceJSON.maxLOD?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(t,{origin:"service"})}else this.read({tileInfo:this.serviceRasterInfo.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),"Map"===this.raster.tileType&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(K((()=>this.customParameters),(t=>{this.raster&&(this.raster.ioConfig.customFetchParameters=t)})))}async _openFromRaster(t,e){t.rasterInfo||await t.open({signal:e}),this._primaryRasters="Function"===t.datasetFormat?t.primaryRasters.rasters:[t],this.url||(this.url=this._primaryRasters[0].url)}async _openFromUrlWithRasterFunction(t,e,i){const s=[t];e&&be(e.toJSON(),s);const n=await Promise.all(s.map((t=>Oi.open({url:t,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:i})))),r=n.findIndex((t=>null==t));if(r>-1)throw new a("imagery-tile-layer:open",`cannot open raster: ${s[r]}`);return this._primaryRasters=n,this._initializeWithFunctionRaster(e)}async _openFromUrl(t,e){const i=await Oi.open({url:t,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(null==i)throw new a("imagery-tile-layer:open",`cannot open raster: ${t}`);this._primaryRasters=[i],this.raster=i}async _openFromSource(t,e){const i="the tiled imagery data source is not supported",s="coverage"===t.type?.toLowerCase()?"CovJSON":t.extent&&t.pixelBlock?"MEMORY":null;if(!s)throw new a("imagery-tile-layer:open",i);"MEMORY"===s&&(t={extent:t.extent,pixelBlocks:[t.pixelBlock]});const n=await Oi.open({url:"",source:t,datasetFormat:s,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(null==n)throw new a("imagery-tile-layer:open",i);this._primaryRasters=[n],this.rasterFunction?await this._initializeWithFunctionRaster(this.rasterFunction):this.raster=n}async _openFunctionRaster(t,e){const i={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach((t=>i[t.url]=t));const s=we(t.functionDefinition?.toJSON()??t.toJSON(),i),n=new Ae({rasterFunction:s});return await n.open(e),n}async _initializeWithFunctionRaster(t,e){try{this.raster=await this._openFunctionRaster(t,e)}catch(t){t instanceof a&&r.getLogger(this).error("imagery-tile-layer:open",t.message),r.getLogger(this).warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=this._primaryRasters[0]}}};p([m({clonable:!1})],Di.prototype,"_primaryRasters",void 0),p([m({type:[Q],json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"0,1,2"!==this.bandIds?.join(",")}}}}})],Di.prototype,"bandIds",void 0),p([m({json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"bilinear"!==this.interpolation}}}}}),Z(yt)],Di.prototype,"interpolation",void 0),p([m(tt)],Di.prototype,"legendEnabled",void 0),p([m({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],Di.prototype,"isReference",void 0),p([m({type:["show","hide"]})],Di.prototype,"listMode",void 0),p([m({json:{read:!0,write:!0}})],Di.prototype,"blendMode",void 0),p([m()],Di.prototype,"sourceJSON",void 0),p([m({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],Di.prototype,"version",void 0),p([m({readOnly:!0,json:{read:!1}})],Di.prototype,"type",void 0),p([m({type:["ArcGISTiledImageServiceLayer"]})],Di.prototype,"operationalLayerType",void 0),p([m({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(t,e)=>!e.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}},writer(t,e,i){e[i]=!t}}}})],Di.prototype,"popupEnabled",void 0),p([m({type:et,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}}}}})],Di.prototype,"popupTemplate",void 0),p([m({readOnly:!0})],Di.prototype,"defaultPopupTemplate",null),p([m({readOnly:!0,type:[Y]})],Di.prototype,"fields",void 0),p([m({readOnly:!0,type:[Y]})],Di.prototype,"rasterFields",null),p([m({constructOnly:!0})],Di.prototype,"source",void 0),Di=p([w("esri.layers.ImageryTileLayer")],Di);const Bi=Di;export default Bi;
//# sourceMappingURL=p-c30fb3e8.js.map