import{U as t,I as a,ad as s,ay as n,aG as r,aH as e,j as o,a8 as p,ae as i}from"./p-aad64c9f.js";import{t as c}from"./p-1062e8df.js";import f from"./p-f9a549ce.js";import"./p-2af77f97.js";import"./p-4e60756f.js";import"./p-21ce5524.js";import"./p-aff89b86.js";import"./p-da522976.js";import"./p-d492d39b.js";import"./p-e3657bc3.js";import"./p-bac7b09c.js";function u(t){const a=t.geometry,s=t.toJSON(),n=s;let p,i,c;return null!=a&&(i=a.spatialReference,c=r(i),n.geometryType=e(a),n.geometry=JSON.stringify(a),n.inSR=c),s.outSR?(n.outSR=r(s.outSR),p=t.outSpatialReference):a&&(n.outSR=n.inSR,p=i),n.bin&&=JSON.stringify(n.bin),n.quantizationParameters&&=JSON.stringify(n.quantizationParameters),n.outStatistics&&=JSON.stringify(n.outStatistics),n.outTimeReference&&=JSON.stringify(n.outTimeReference),t.defaultSpatialReference&&o(i,p)&&(n.defaultSR=n.inSR,delete n.inSR,delete n.outSR),n}async function m(t,a,s){return j(t,a,s)}async function j(r,e,o={}){const p="string"==typeof r?s(r):r,i=e.geometry?[e.geometry]:[],f=await n(i,null,{signal:o.signal}),m=f?.[0];null!=m&&((e=e.clone()).geometry=m);const j=c({...p.query,f:"json",...u(e)});return t(a(p.path,"queryBins"),{...o,query:{...j,...o.query}})}async function l(t,a,s){const{data:n}=await m(p(t),f.from(a),s);return i.fromJSON(n)}export{l as executeBinsQuery};
//# sourceMappingURL=p-5e39bd87.js.map