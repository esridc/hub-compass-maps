import{gZ as n,T as t}from"./p-aad64c9f.js";import{G as e}from"./p-c438d144.js";import{hydratedAdapter as r}from"./p-3a837971.js";import"./p-2af77f97.js";import"./p-ccf595c8.js";function u(e){const r=Array.isArray(e)?e[0].spatialReference:e.spatialReference;return r?n(t,r):t.WGS84}function i(n){return e.extendedSpatialReferenceInfo(n)}function o(n,t){return e.clip(r,u(n),n,t)}function s(n,t){return e.cut(r,u(n),n,t)}function c(n,t){return e.contains(r,u(n),n,t)}function a(n,t){return e.crosses(r,u(n),n,t)}function f(n,t,i){return e.distance(r,u(n),n,t,i)}function l(n,t){return e.equals(r,u(n),n,t)}function p(n,t){return e.intersects(r,u(n),n,t)}function d(n,t){return e.touches(r,u(n),n,t)}function m(n,t){return e.within(r,u(n),n,t)}function w(n,t){return e.disjoint(r,u(n),n,t)}function h(n,t){return e.overlaps(r,u(n),n,t)}function g(n,t,i){return e.relate(r,u(n),n,t,i)}function x(n){return e.isSimple(r,u(n),n)}function j(n){return e.simplify(r,u(n),n)}function y(n,t=!1){return e.convexHull(r,u(n),n,t)}function A(n,t){return e.difference(r,u(n),n,t)}function D(n,t){return e.symmetricDifference(r,u(n),n,t)}function S(n,t){return e.intersect(r,u(n),n,t)}function T(n,t=null){return e.union(r,u(n),n,t)}function L(n,t,i,o,s,c){return e.offset(r,u(n),n,t,i,o,s,c)}function R(n,t,i,o=!1){return e.buffer(r,u(n),n,t,i,o)}function V(n,t,i,o,s,c){return e.geodesicBuffer(r,u(n),n,t,i,o,s,c)}function v(n,t,i=!0){return e.nearestCoordinate(r,u(n),n,t,i)}function z(n,t){return e.nearestVertex(r,u(n),n,t)}function E(n,t,i,o){return e.nearestVertices(r,u(n),n,t,i,o)}function H(n){return"xmin"in n?"center"in n?n.center:null:"x"in n?n:"extent"in n?n.extent?.center??null:null}function I(n,t,r){if(null==n)throw new N;const u=n.spatialReference;if(null==(r=r??H(n)))throw new N;const i=n.constructor.fromJSON(e.rotate(n,t,r));return i.spatialReference=u,i}function b(n,t){if(null==n)throw new N;const r=n.spatialReference;if(null==(t=t??H(n)))throw new N;const u=n.constructor.fromJSON(e.flipHorizontal(n,t));return u.spatialReference=r,u}function q(n,t){if(null==n)throw new N;const r=n.spatialReference;if(null==(t=t??H(n)))throw new N;const u=n.constructor.fromJSON(e.flipVertical(n,t));return u.spatialReference=r,u}function B(n,t,i,o){return e.generalize(r,u(n),n,t,i,o)}function C(n,t,i){return e.densify(r,u(n),n,t,i)}function G(n,t,i,o=0){return e.geodesicDensify(r,u(n),n,t,i,o)}function P(n,t){return e.planarArea(r,u(n),n,t)}function Z(n,t){return e.planarLength(r,u(n),n,t)}function k(n,t,i){return e.geodesicArea(r,u(n),n,t,i)}function F(n,t,i){return e.geodesicLength(r,u(n),n,t,i)}function J(n,t){return e.intersectLinesToPoints(r,u(n),n,t)}function K(n,t){e.changeDefaultSpatialReferenceTolerance(n,t)}function M(n){e.clearDefaultSpatialReferenceTolerance(n)}class N extends Error{constructor(){super("Illegal Argument Exception")}}export{R as buffer,K as changeDefaultSpatialReferenceTolerance,M as clearDefaultSpatialReferenceTolerance,o as clip,c as contains,y as convexHull,a as crosses,s as cut,C as densify,A as difference,w as disjoint,f as distance,l as equals,i as extendedSpatialReferenceInfo,b as flipHorizontal,q as flipVertical,B as generalize,k as geodesicArea,V as geodesicBuffer,G as geodesicDensify,F as geodesicLength,S as intersect,J as intersectLinesToPoints,p as intersects,x as isSimple,v as nearestCoordinate,z as nearestVertex,E as nearestVertices,L as offset,h as overlaps,P as planarArea,Z as planarLength,g as relate,I as rotate,j as simplify,D as symmetricDifference,d as touches,T as union,m as within};
//# sourceMappingURL=p-f2208ccc.js.map