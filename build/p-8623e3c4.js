import{g as e,lh as t,g6 as i,an as s,ao as n,fv as r,ap as a,dG as o,av as l,bt as u,li as c,lj as p,lk as m,fx as h,aN as d,cB as y,dC as g,fu as f,b$ as w,co as v,fz as R,U as b,dA as S,fA as j,dP as I,dE as F,fg as x,b5 as D,aM as P,dF as T,ll as V,dr as M,ff as A,s as C,e0 as N,hD as O,kN as G,hw as q,aX as E,c_ as _,a as B,fw as U,b_ as z,ah as H,dc as L,lm as k,l0 as J,h0 as $,kV as Q,h1 as W,hr as K,hs as Z,kq as X,kz as Y,hq as ee,ht as te,fa as ie,di as se,lf as ne,du as re,kt as ae,kW as oe,kD as le,kv as ue,g2 as ce}from"./p-028496e2.js";import{N as pe,a as me,i as he,j as de,c as ye,l as ge,d as fe,n as we,b as ve,h as Re,f as be,m as Se,p as je,k as Ie,E as Fe,V as xe,K as De,t as Pe}from"./p-d0e105f3.js";import{m as Te,g as Ve,p as Me,d as Ae}from"./p-67f6605e.js";import{A as Ce,G as Ne,B as Oe,n as Ge,g as qe,a as Ee,i as _e,L as Be,S as Ue,P as ze}from"./p-5732c3d0.js";import{t as He}from"./p-8235cc99.js";import{u as Le,s as ke,q as Je}from"./p-4995a65a.js";import{s as $e}from"./p-0053e125.js";import"./p-82d7ddb5.js";import"./p-0aeccf8c.js";import{s as Qe,n as We}from"./p-3f094b9d.js";import"./p-3b51db5e.js";import"./p-498d12fd.js";import"./p-c439e241.js";import"./p-0120bda4.js";import"./p-94b15954.js";import"./p-1f0b604e.js";import"./p-347800d3.js";const Ke={StretchFunction:{arguments:{ComputeGamma:{isDataset:!1,isPublic:!1,name:"ComputeGamma",type:"RasterFunctionVariable",value:!1},DRA:{isDataset:!1,isPublic:!1,name:"DRA",type:"RasterFunctionVariable",value:!1},EstimateStatsHistogram:{isDataset:!1,isPublic:!1,name:"EstimateStatsHistogram",type:"RasterFunctionVariable",value:!1},Gamma:{displayName:"Gamma",isDataset:!1,isPublic:!1,name:"Gamma",type:"RasterFunctionVariable"},Histograms:{isDataset:!1,isPublic:!1,name:"Histograms",type:"RasterFunctionVariable"},Max:{isDataset:!1,isPublic:!1,name:"Max",type:"RasterFunctionVariable",value:255},MaxPercent:{isDataset:!1,isPublic:!1,name:"MaxPercent",type:"RasterFunctionVariable",value:.5},Min:{isDataset:!1,isPublic:!1,name:"Min",type:"RasterFunctionVariable",value:0},MinPercent:{isDataset:!1,isPublic:!1,name:"MinPercent",type:"RasterFunctionVariable",value:.25},NumberOfStandardDeviations:{isDataset:!1,isPublic:!1,name:"NumberOfStandardDeviation",type:"RasterFunctionVariable",value:2},Raster:{isDataset:!0,isPublic:!1,name:"Raster",type:"RasterFunctionVariable"},SigmoidStrengthLevel:{isDataset:!1,isPublic:!1,name:"SigmoidStrengthLevel",type:"RasterFunctionVariable",value:2},Statistics:{isDataset:!1,isPublic:!1,name:"Statistics",type:"RasterFunctionVariable"},StretchType:{isDataset:!1,isPublic:!1,name:"StretchType",type:"RasterFunctionVariable",value:0},type:"StretchFunctionArguments",UseGamma:{isDataset:!1,isPublic:!1,name:"UseGamma",type:"RasterFunctionVariable",value:!1}},description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",function:{description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",name:"Stretch",pixelType:"UNKNOWN",type:"StretchFunction"},functionType:0,name:"Stretch",thumbnail:""},RemapFunction:{name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table.",function:{type:"RemapFunction",pixelType:"UNKNOWN",name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},UseTable:{name:"UseTable",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},InputRanges:{name:"InputRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Input Ranges"},OutputValues:{name:"OutputValues",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Output Values"},NoDataRanges:{name:"NoDataRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"NoData Ranges"},Table:{name:"Table",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputField:{name:"InputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},OutputField:{name:"OutputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputMaxField:{name:"InputMaxField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},RemapTableType:{name:"RemapTableType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},AllowUnmatched:{name:"AllowUnmatched",isPublic:!1,isDataset:!1,value:!0,type:"RasterFunctionVariable"},type:"RemapFunctionArguments"},functionType:0,thumbnail:""},ColormapFunction:{name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp.",function:{type:"ColormapFunction",pixelType:"UNKNOWN",name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},ColormapName:{name:"ColormapName",isPublic:!1,isDataset:!1,value:"Gray",type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},type:"ColormapFunctionArguments"},functionType:0,thumbnail:""},ShadedReliefFunction:{name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image.",function:{type:"ShadedReliefFunction",pixelType:"UNKNOWN",name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"ShadedReliefFunctionArguments"},functionType:0,thumbnail:""},HillshadeFunction:{name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image",function:{type:"HillshadeFunction",pixelType:"UNKNOWN",name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image"},arguments:{DEM:{name:"DEM",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"HillshadeFunctionArguments"},functionType:0,thumbnail:""},ResampleFunction:{name:"Resample",description:"Changes the cell size of a raster.",function:{type:"ResampleFunction",pixelType:"UNKNOWN",name:"Resample",description:"Changes the cell size of a raster."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ResamplingType:{name:"ResamplingType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},InputCellSize:{name:"InputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},OutputCellSize:{name:"OutputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},type:"ResampleFunctionArguments"},functionType:0,thumbnail:""}};const Ze=new Set(["u1","u2","u4","u8","s8","u16","s16"]),Xe={simple_scalar:"Simple Scalar",wind_barb:"Wind Barb",single_arrow:"Single Arrow",beaufort_kn:"Beaufort Wind (Knots)",beaufort_m:"Beaufort Wind (MetersPerSecond)",ocean_current_m:"Ocean Current (MetersPerSecond)",ocean_current_kn:"Ocean Current (Knots)"},Ye=new Set(["raster-stretch","unique-value","class-breaks","raster-shaded-relief","vector-field","raster-colormap"]);function et(e){return Ye.has(e.type)}function tt(t,i){if(!t||!i)return e(t||i);const s=e(t);if(s.functionDefinition&&i.rasterFunctionDefinition){const e=i.rasterFunctionDefinition;(e.thumbnail||e.thumbnailEx)&&(e.thumbnail=e.thumbnailEx=void 0),it(s.functionDefinition.arguments,i),s.rasterFunctionDefinition=s.functionDefinition.toJSON()}else if("none"!==i.functionName?.toLowerCase()){rt(s.functionArguments).Raster=i}return s}function it(e,t){for(const i in e)"raster"===i.toLowerCase()&&("RasterFunctionVariable"===e[i].type?(e[i]=t.rasterFunctionDefinition,e[i].type="RasterFunctionTemplate"):"RasterFunctionTemplate"===e[i].type&&it(e[i].arguments,t))}function st(t){const i=e(Ke[t.functionName+"Function"]),s=t.functionArguments;for(const e in s)"raster"===e.toLowerCase()?(i.arguments[e]=st(s[e]),i.arguments[e].type="RasterFunctionTemplate"):"colormap"===e.toLowerCase()?(i.arguments[e].value=gt(s[e]),i.arguments.ColorSchemeType.value=0):i.arguments[e].value=s[e];return i}function nt(e,t){switch(t=t||{},e.type){case"raster-stretch":return ut(e,t);case"class-breaks":return ct(e,t);case"unique-value":return ht(e,t);case"raster-colormap":return dt(e,t);case"vector-field":return ot(e,t);case"raster-shaded-relief":return lt(e,t);case"flow":throw new Error("Unsupported rendering rule.")}}function rt(e){const t=e?.Raster??e?.raster;return t&&"esri.layers.support.RasterFunction"===t.declaredClass?rt(t.functionArguments):e}const at={none:0,standardDeviation:3,histogramEqualization:4,minMax:5,percentClip:6,sigmoid:9};function ot(e,i){const s=new pe;s.functionName="VectorFieldRenderer";const{dataType:n,bandNames:r}=i,a="vector-uv"===n;let o,l;if(r&&2===r.length){const e=r.map((e=>e.toLowerCase()));o=e.indexOf("magnitude"),l=e.indexOf("direction")}-1!==o&&null!==o||(o=0,l=1);const u="arithmetic"===e.rotationType?1:2,c="flow-from"===e.flowRepresentation?0:1,p=e.visualVariables?e.visualVariables.find((e=>"Magnitude"===e.field)):new t,m={magnitudeBandID:o,directionBandID:l,isUVComponents:a,referenceSystem:u,massFlowAngleRepresentation:c,symbolTileSize:50,symbolTileSizeUnits:100,calculationMethod:"Vector Average",symbologyName:Xe[e.style.toLowerCase().replace("-","_")],minimumMagnitude:p.minDataValue,maximumMagnitude:p.maxDataValue,minimumSymbolSize:p.minSize,maximumSymbolSize:p.maxSize};s.functionArguments=m;const h=st(s);return i.convertToRFT?pe.fromJSON({rasterFunctionDefinition:h}):s}function lt(e,t){const i=t.convertToRFT;if("elevation"!==t.dataType&&("generic"!==t.dataType||1!==t.bandCount||"s16"!==t.pixelType&&"s32"!==t.pixelType&&"f32"!==t.pixelType&&"f64"!==t.pixelType))return new pe;const s=new pe;s.functionName="Hillshade";const n="traditional"===e.hillshadeType?0:1,r="none"===e.scalingType?1:3,a={HillshadeType:n,SlopeType:r,ZFactor:e.zFactor};return 0===n&&(a.Azimuth=e.azimuth,a.Altitude=e.altitude),3===r&&(a.PSPower=e.pixelSizePower,a.PSZFactor=e.pixelSizeFactor),s.functionArguments=a,s.variableName="Raster",e.colorRamp&&(s.functionName="ShadedRelief",i?a.ColorRamp=Ne(e.colorRamp):a.Colormap=Oe(e.colorRamp)),i?new pe({rasterFunctionDefinition:st(s)}):s}function ut(e,t){const i=t.convertToRFT,s=new pe;s.functionName="Stretch";const n=at[Ge.toJSON(e.stretchType)],r="u8",a={StretchType:n,Statistics:yt(e.statistics??[]),DRA:e.dynamicRangeAdjustment,UseGamma:e.useGamma,Gamma:e.gamma,ComputeGamma:e.computeGamma};if(null!=e.outputMin&&(a.Min=e.outputMin),null!=e.outputMax&&(a.Max=e.outputMax),n===at.standardDeviation?(a.NumberOfStandardDeviations=e.numberOfStandardDeviations,s.outputPixelType=r):n===at.percentClip?(a.MinPercent=e.minPercent,a.MaxPercent=e.maxPercent,s.outputPixelType=r):n===at.minMax?s.outputPixelType=r:n===at.sigmoid&&(a.SigmoidStrengthLevel=e.sigmoidStrengthLevel),s.functionArguments=a,s.variableName="Raster",e.colorRamp){const n=e.colorRamp,r=new pe;if(i)r.functionArguments={ColorRamp:Ne(n)};else{const i=qe(n,!0);if(i)r.functionArguments={colorRampName:i};else if(!t.convertColorRampToColormap||"algorithmic"!==n.type&&"multipart"!==n.type){const t=e.colorRamp.toJSON();"algorithmic"===t.type?t.algorithm=t.algorithm||"esriCIELabAlgorithm":"multipart"===t.type&&t.colorRamps?.length&&t.colorRamps.forEach((e=>e.algorithm=e.algorithm||"esriCIELabAlgorithm")),r.functionArguments={colorRamp:t}}else r.functionArguments={Colormap:Oe(n)}}return r.variableName="Raster",r.functionName="Colormap",r.functionArguments.Raster=s,i?new pe({rasterFunctionDefinition:st(r)}):r}return i?new pe({rasterFunctionDefinition:st(s)}):s}function ct(e,t){const i=[],s=[],n=[],r=[],a=1e-4,{pixelType:o,rasterAttributeTable:l}=t,u=null==l?null:l.features,c=mt(l);if(c&&u&&Array.isArray(u)&&e.classBreakInfos){e.classBreakInfos.forEach(((t,i)=>{const s=t.symbol?.color;let n;s?.a&&null!=t.minValue&&null!=t.maxValue&&u.forEach((a=>{null!=t.minValue&&null!=t.maxValue&&(n=a.attributes[e.field],(n>=t.minValue&&n<t.maxValue||i===e.classBreakInfos.length-1&&n>=t.minValue)&&r.push([a.attributes[c],s.r,s.g,s.b]))}))}));const i=o?pt(r,o):r,s=new pe;return s.functionName="Colormap",s.functionArguments={},s.functionArguments.Colormap=i,s.variableName="Raster",t.convertToRFT?new pe({rasterFunctionDefinition:st(s)}):s}e.classBreakInfos.forEach(((e,t)=>{if(null==e.minValue||null==e.maxValue)return;const o=e.symbol&&e.symbol.color;o?.a?(0===t?i.push(e.minValue,e.maxValue+a):i.push(e.minValue+a,e.maxValue+a),s.push(t),r.push([t,o.r,o.g,o.b])):n.push(e.minValue,e.maxValue)}));const p=o?pt(r,o):r,m=new pe;m.functionName="Remap",m.functionArguments={InputRanges:i,OutputValues:s,NoDataRanges:n},m.variableName="Raster";const h=new pe;return h.functionName="Colormap",h.functionArguments={Colormap:p,Raster:m},t.convertToRFT?new pe({rasterFunctionDefinition:st(h)}):h}function pt(e,t){const s=Ze.has(t)?i(t):null;return s&&e.push([Math.floor(s[0]-1),0,0,0],[Math.ceil(s[1]+1),0,0,0]),e}function mt(e){if(null==e)return;const{fields:t}=e,i=t?.find((e=>e?.name&&"value"===e.name.toLowerCase()));return i?.name}function ht(e,t){const i=[],{pixelType:s,rasterAttributeTable:n}=t,r=null==n?null:n.features,a=mt(n),o=e.defaultSymbol?.color?.toRgb(),l=e.uniqueValueInfos;if(l)if(r){if(a){const t=new Map;l.forEach((e=>{const i=e.value,s=e.symbol?.color;null!=i&&s?.a&&t.set(String(i),s.toRgb())}));const s=e.field;r.forEach((({attributes:e})=>{const n=String(e[s]),r=e[a],l=t.get(n);l?i.push([r,...l]):o&&i.push([r,...o])}))}}else for(let e=0;e<l.length;e++){const t=l[e],s=t.symbol?.color,n=+t.value;if(s?.a){if(isNaN(n))return null;i.push([n,s.r,s.g,s.b])}}const u=s?pt(i,s):i,c=new pe;return c.functionName="Colormap",c.functionArguments={},c.functionArguments.Colormap=u,c.variableName="Raster",t.convertToRFT?new pe({rasterFunctionDefinition:st(c)}):c}function dt(e,t){const i=e.extractColormap();if(!i||0===i.length)return null;const{pixelType:s}=t,n=s?pt(i,s):i,r=new pe;return r.functionName="Colormap",r.functionArguments={},r.functionArguments.Colormap=n,t.convertToRFT?new pe({rasterFunctionDefinition:st(r)}):r}function yt(e){const t=[];return e?.forEach((e=>{const i=e;if(Array.isArray(i))t.push(i);else{if(null==i.min||null==i.max)return;const e=[i.min,i.max,i.avg||0,i.stddev||0];t.push(e)}})),t}function gt(e){const t=[],i=[];return e.forEach((e=>{t.push(e[0]),i.push(Ce([...e.slice(1),255]))})),{type:"RasterColormap",values:t,colors:i}}let ft=class extends o{constructor(){super(...arguments),this.layer=null,this.compression=void 0,this.pixelType=void 0,this.lercVersion=2}get adjustAspectRatio(){return this.layer.adjustAspectRatio}writeAdjustAspectRatio(e,t,i){this.layer.version<10.3||(t[i]=e)}get bandIds(){return this.layer.bandIds}get compressionQuality(){return this.layer.compressionQuality}writeCompressionQuality(e,t,i){this.format&&this.format.toLowerCase().includes("jpg")&&null!=e&&(t[i]=e)}get compressionTolerance(){return this.layer.compressionTolerance}writeCompressionTolerance(e,t,i){"lerc"===this.format&&null!=e&&(t[i]=e)}get format(){return"vector-field"===this.layer.renderer?.type?"lerc":this.layer.format}get interpolation(){return this.layer.interpolation}get noData(){return this.layer.noData}get noDataInterpretation(){return this.layer.noDataInterpretation}writeLercVersion(e,t,i){"lerc"===this.format&&this.layer.version>=10.5&&(t[i]=e)}get version(){const e=this.layer;return e.commitProperty("bandIds"),e.commitProperty("format"),e.commitProperty("compressionQuality"),e.commitProperty("compressionTolerance"),e.commitProperty("interpolation"),e.commitProperty("noData"),e.commitProperty("noDataInterpretation"),e.commitProperty("mosaicRule"),e.commitProperty("rasterFunction"),e.commitProperty("adjustAspectRatio"),e.commitProperty("pixelFilter"),e.commitProperty("definitionExpression"),e.commitProperty("multidimensionalSubset"),(this._get("version")||0)+1}set version(e){this._set("version",e)}get mosaicRule(){const e=this.layer;let t=e.mosaicRule;const i=e.definitionExpression;return t?i&&i!==t.where&&(t=t.clone(),t.where=i):i&&(t=new de({where:i})),t}get rasterFunction(){const e=this.layer;let{rasterFunction:t}=e;const i=e.pixelFilter,s=!e.format||e.format.includes("jpg")||e.format.includes("png");t=this._addResampleRasterFunction(t);const n=e.multidimensionalSubset?.areaOfInterest;return n&&(t=this._addClipFunction(t,n)),s&&!i&&"vector-field"!==e.renderer?.type&&(t=this.combineRendererWithRenderingRule(t)),t}combineRendererWithRenderingRule(e){const t=this.layer,{rasterInfo:i,renderer:s}=t;if(e=e||t.rasterFunction,!s||!et(s))return e;return tt(nt(s,{rasterAttributeTable:i.attributeTable,pixelType:i.pixelType,dataType:i.dataType,bandNames:i.bandInfos.map((({name:e})=>e)),convertColorRampToColormap:t.version<10.6,convertToRFT:!!e?.rasterFunctionDefinition,bandCount:i.bandCount}),e)}_addResampleRasterFunction(e){if(!("vector-field"===this.layer.renderer?.type)||"Resample"===e?.functionName)return e;const t="esriImageServiceDataTypeVector-UV"===this.layer.serviceDataType?7:10,i=this.layer.serviceRasterInfo.pixelSize;let s=new pe({functionName:"Resample",functionArguments:{ResamplingType:t,InputCellSize:i}});return s=e?.rasterFunctionDefinition?new pe({rasterFunctionDefinition:st(s)}):s,tt(s,e)}_addClipFunction(e,t){const i=new pe({functionName:"Clip",functionArguments:{ClippingGeometry:t.toJSON(),ClippingType:1}});return tt(i,e)}};s([n()],ft.prototype,"layer",void 0),s([n({json:{write:!0}})],ft.prototype,"adjustAspectRatio",null),s([r("adjustAspectRatio")],ft.prototype,"writeAdjustAspectRatio",null),s([n({json:{write:!0}})],ft.prototype,"bandIds",null),s([n({json:{write:!0}})],ft.prototype,"compression",void 0),s([n({json:{write:!0}})],ft.prototype,"compressionQuality",null),s([r("compressionQuality")],ft.prototype,"writeCompressionQuality",null),s([n({json:{write:!0}})],ft.prototype,"compressionTolerance",null),s([r("compressionTolerance")],ft.prototype,"writeCompressionTolerance",null),s([n({json:{write:!0}})],ft.prototype,"format",null),s([n({type:String,json:{read:{reader:me.read},write:{writer:me.write}}})],ft.prototype,"interpolation",null),s([n({json:{write:!0}})],ft.prototype,"noData",null),s([n({type:String,json:{read:{reader:he.read},write:{writer:he.write}}})],ft.prototype,"noDataInterpretation",null),s([n({json:{write:!0}})],ft.prototype,"pixelType",void 0),s([n({json:{write:!0}})],ft.prototype,"lercVersion",void 0),s([r("lercVersion")],ft.prototype,"writeLercVersion",null),s([n({type:Number})],ft.prototype,"version",null),s([n({json:{write:!0}})],ft.prototype,"mosaicRule",null),s([n({json:{write:!0,name:"renderingRule"}})],ft.prototype,"rasterFunction",null),ft=s([a("esri.layers.mixins.ExportImageServiceParameters")],ft);const wt=e=>{let t=class extends e{constructor(){super(...arguments),this.make=null,this.model=null,this.focalLength=null,this.pixelSize=null,this.rows=null,this.cols=null}};return s([n({json:{write:!0}})],t.prototype,"make",void 0),s([n({json:{write:!0}})],t.prototype,"model",void 0),s([n({json:{write:!0}})],t.prototype,"focalLength",void 0),s([n({json:{write:!0}})],t.prototype,"pixelSize",void 0),s([n({json:{write:!0}})],t.prototype,"rows",void 0),s([n({json:{write:!0}})],t.prototype,"cols",void 0),t=s([a("esri.rest.support.CameraInfoMixin")],t),t};let vt=class extends(wt(o)){constructor(){super(...arguments),this.id=null,this.referenceUri=null,this.acquisitionDate=null,this.cameraID=null,this.center=null,this.perspectiveCenter=null,this.orientation=null}writeAcquisitionDate(e,t){t.acquisitionDate=e?.getTime()}};s([n({json:{write:!0}})],vt.prototype,"id",void 0),s([n({json:{name:"uri",write:!0}})],vt.prototype,"referenceUri",void 0),s([n({type:Date,json:{write:!0}})],vt.prototype,"acquisitionDate",void 0),s([r("acquisitionDate")],vt.prototype,"writeAcquisitionDate",null),s([n({json:{write:!0}})],vt.prototype,"cameraID",void 0),s([n({type:l,json:{write:!0}})],vt.prototype,"center",void 0),s([n({type:l,json:{write:!0}})],vt.prototype,"perspectiveCenter",void 0),s([n({json:{write:!0}})],vt.prototype,"orientation",void 0),vt=s([a("esri.rest.support.ImageInspectionInfo")],vt);const Rt=vt;let bt=class extends o{constructor(){super(...arguments),this.images=null}};s([n({type:[Rt],json:{write:!0}})],bt.prototype,"images",void 0),bt=s([a("esri.rest.support.FindImagesResult")],bt);const St=bt;let jt=class extends o{constructor(e){super(e),this.north=null,this.up=null,this.spatialReference=null}};s([n({type:Number,json:{write:!0}})],jt.prototype,"north",void 0),s([n({type:Number,json:{write:!0}})],jt.prototype,"up",void 0),s([n({type:u,json:{write:!0}})],jt.prototype,"spatialReference",void 0),jt=s([a("esri.rest.support.ImageAngleResult")],jt);const It=jt;let Ft=class extends o{constructor(){super(...arguments),this.value=null,this.displayValue=null,this.uncertainty=null}};s([n({type:Number,json:{read:!0,write:!0}})],Ft.prototype,"value",void 0),s([n({type:String,json:{read:!0,write:!0}})],Ft.prototype,"displayValue",void 0),s([n({type:Number,json:{read:!0,write:!0}})],Ft.prototype,"uncertainty",void 0),Ft=s([a("esri.rest.support.ImageMeasureResultValue")],Ft);let xt=class extends Ft{constructor(){super(...arguments),this.unit=null}};s([n({type:String,json:{read:c.read,write:c.write}})],xt.prototype,"unit",void 0),xt=s([a("esri.rest.support.ImageMeasureResultLengthValue")],xt);let Dt=class extends Ft{constructor(){super(...arguments),this.unit=null}};s([n({type:String,json:{read:p.read,write:p.write}})],Dt.prototype,"unit",void 0),Dt=s([a("esri.rest.support.ImageMeasureResultAreaValue")],Dt);let Pt=class extends Ft{constructor(){super(...arguments),this.unit=null}};s([n({type:String,json:{read:m.read,write:m.write}})],Pt.prototype,"unit",void 0),Pt=s([a("esri.rest.support.ImageMeasureResultAngleValue")],Pt);let Tt=class extends o{constructor(){super(...arguments),this.name=null,this.sensorName=null}};s([n({type:String,json:{read:!0,write:!0}})],Tt.prototype,"name",void 0),s([n({type:String,json:{read:!0,write:!0}})],Tt.prototype,"sensorName",void 0),Tt=s([a("esri.rest.support.BaseImageMeasureResult")],Tt);let Vt=class extends Tt{constructor(){super(...arguments),this.area=null,this.perimeter=null}};s([n({type:Dt,json:{read:!0,write:!0}})],Vt.prototype,"area",void 0),s([n({type:xt,json:{read:!0,write:!0}})],Vt.prototype,"perimeter",void 0),Vt=s([a("esri.rest.support.ImageAreaResult")],Vt);const Mt=Vt;let At=class extends o{constructor(){super(...arguments),this.area=null,this.geometry=null}readGeometry(e,t){return null==e?null:e.rings?d.fromJSON(e):y.fromJSON(e)}};s([n({type:Number,json:{write:!0}})],At.prototype,"area",void 0),s([n({json:{name:"shape",write:!0}})],At.prototype,"geometry",void 0),s([h("geometry")],At.prototype,"readGeometry",null),At=s([a("esri.rest.support.ImageBoundaryResult")],At);const Ct=At;let Nt=class extends Tt{constructor(){super(...arguments),this.distance=null,this.azimuthAngle=null,this.elevationAngle=null}};s([n({type:xt,json:{read:!0,write:!0}})],Nt.prototype,"distance",void 0),s([n({type:Pt,json:{read:!0,write:!0}})],Nt.prototype,"azimuthAngle",void 0),s([n({type:Pt,json:{read:!0,write:!0}})],Nt.prototype,"elevationAngle",void 0),Nt=s([a("esri.rest.support.ImageDistanceResult")],Nt);const Ot=Nt;let Gt=class extends(wt(o)){constructor(){super(...arguments),this.id=null}};s([n({json:{write:!0}})],Gt.prototype,"id",void 0),Gt=s([a("esri.rest.support.CameraInfo")],Gt);const qt=Gt;let Et=class extends o{constructor(){super(...arguments),this.id=null,this.name=null,this.acquisitionDate=null,this.cameraID=null,this.center=null,this.gps=null,this.orientation=null}writeAcquisitionDate(e,t){t.acquisitionDate=e?.getTime()}};s([n({json:{write:!0}})],Et.prototype,"id",void 0),s([n({json:{write:!0}})],Et.prototype,"name",void 0),s([n({type:Date,json:{write:!0}})],Et.prototype,"acquisitionDate",void 0),s([r("acquisitionDate")],Et.prototype,"writeAcquisitionDate",null),s([n({json:{write:!0}})],Et.prototype,"cameraID",void 0),s([n({type:l,json:{write:!0}})],Et.prototype,"center",void 0),s([n({json:{write:!0}})],Et.prototype,"gps",void 0),s([n({json:{write:!0}})],Et.prototype,"orientation",void 0),Et=s([a("esri.rest.support.ImageGPSInfo")],Et);const _t=Et;let Bt=class extends o{constructor(){super(...arguments),this.images=null,this.cameras=null}};s([n({type:[_t],json:{write:!0}})],Bt.prototype,"images",void 0),s([n({type:[qt],json:{write:!0}})],Bt.prototype,"cameras",void 0),Bt=s([a("esri.rest.support.ImageGPSInfoResult")],Bt);const Ut=Bt;let zt=class extends Tt{constructor(){super(...arguments),this.height=null}};s([n({type:xt,json:{read:!0,write:!0}})],zt.prototype,"height",void 0),zt=s([a("esri.rest.support.ImageHeightResult")],zt);const Ht=zt;let Lt=class extends o{constructor(){super(...arguments),this.catalogItemVisibilities=null,this.catalogItems=null,this.location=null,this.name=null,this.objectId=null,this.processedValues=null,this.properties=null,this.value=null}};s([n({json:{write:!0}})],Lt.prototype,"catalogItemVisibilities",void 0),s([n({type:g,json:{write:!0}})],Lt.prototype,"catalogItems",void 0),s([n({type:l,json:{write:!0}})],Lt.prototype,"location",void 0),s([n({json:{write:!0}})],Lt.prototype,"name",void 0),s([n({json:{write:!0}})],Lt.prototype,"objectId",void 0),s([n({json:{write:!0}})],Lt.prototype,"processedValues",void 0),s([n({json:{write:!0}})],Lt.prototype,"properties",void 0),s([n({json:{write:!0}})],Lt.prototype,"value",void 0),Lt=s([a("esri.rest.support.ImageIdentifyResult")],Lt);const kt=Lt;let Jt=class extends o{constructor(){super(...arguments),this.geometries=null}};s([n({json:{write:!0}})],Jt.prototype,"geometries",void 0),Jt=s([a("esri.rest.support.ImagePixelLocationResult")],Jt);const $t=Jt;let Qt=class extends Tt{constructor(){super(...arguments),this.point=null}};s([n({type:l,json:{name:"point.value",read:!0,write:!0}})],Qt.prototype,"point",void 0),Qt=s([a("esri.rest.support.ImagePointResult")],Qt);const Wt=Qt;let Kt=class extends o{constructor(){super(...arguments),this.attributes=null,this.location=null,this.locationId=null,this.rasterId=null,this.resolution=null,this.pixelValue=null}};s([n({json:{write:!0}})],Kt.prototype,"attributes",void 0),s([n({type:l,json:{write:!0}})],Kt.prototype,"location",void 0),s([n({json:{write:!0}})],Kt.prototype,"locationId",void 0),s([n({json:{write:!0}})],Kt.prototype,"rasterId",void 0),s([n({json:{write:!0}})],Kt.prototype,"resolution",void 0),s([n({json:{write:!0}})],Kt.prototype,"pixelValue",void 0),Kt=s([a("esri.rest.support.ImageSample")],Kt);const Zt=Kt;let Xt=class extends o{constructor(){super(...arguments),this.samples=null}};s([n({type:[Zt],json:{write:!0}})],Xt.prototype,"samples",void 0),Xt=s([a("esri.rest.support.ImageSampleResult")],Xt);const Yt=Xt;let ei=class extends o{constructor(){super(...arguments),this.url=null}};s([n({json:{name:"imageURL",write:!0}})],ei.prototype,"url",void 0),ei=s([a("esri.rest.support.ImageUrlResult")],ei);const ti=ei;let ii=class extends o{constructor(){super(...arguments),this.geometry=null,this.length=null,this.area=null,this.center=null}readCenter(e,t){return e.spatialReference||(e={...e,spatialReference:t.Shape.spatialReference}),l.fromJSON(e)}};s([n({types:f,json:{name:"Shape",read:w,write:!0}})],ii.prototype,"geometry",void 0),s([n({json:{name:"Length",write:!0}})],ii.prototype,"length",void 0),s([n({json:{name:"Area",write:!0}})],ii.prototype,"area",void 0),s([n({json:{name:"Center",write:!0}})],ii.prototype,"center",void 0),s([h("center")],ii.prototype,"readCenter",null),ii=s([a("esri.rest.support.MeasureAreaFromImageResult")],ii);const si=ii;let ni=class extends o{constructor(){super(...arguments),this.geometry=null,this.length=null}};s([n({types:f,json:{name:"Shape",read:w,write:!0}})],ni.prototype,"geometry",void 0),s([n({json:{name:"Length",write:!0}})],ni.prototype,"length",void 0),ni=s([a("esri.rest.support.MeasureLengthFromImageResult")],ni);const ri=ni;function ai(e){const t=e?.time;if(t&&(null!=t.start||null!=t.end)){const i=[];null!=t.start&&i.push(t.start),null==t.end||i.includes(t.end)||i.push(t.end),e.time=i.join(",")}}async function oi(e,t,i){const s=S(e),n=t.geometry?[t.geometry]:[],r=await v(n),a=t.toJSON();ai(a);const o=r?.[0];null!=o&&(a.geometry=Si(o));const l=R({...s.query,f:"json",...a});return j(l,i)}async function li(e,t,i){const s=t.toJSON();null!=s.angleName&&(s.angleName=s.angleName.join(",")),t?.point?.spatialReference?.imageCoordinateSystem&&(s.point.spatialReference=ji(t.point.spatialReference)),t?.spatialReference?.imageCoordinateSystem&&(s.spatialReference=Ii(t.spatialReference));const n=S(e),r=R({...n.query,f:"json",...s}),a=j(r,i),{data:o}=await b(`${n.path}/computeAngles`,a);return o.spatialReference=o.spatialReference?null!=o.spatialReference.geodataXform?new u({wkid:0,imageCoordinateSystem:o.spatialReference}):u.fromJSON(o.spatialReference):null,"NaN"===o.north&&(o.north=null),"NaN"===o.up&&(o.up=null),new It(o)}async function ui(e,t,i){const s=t.toJSON(),{geometries:n}=t;if(n)for(let e=0;e<n.length;e++)n[e].spatialReference?.imageCoordinateSystem&&(s.geometries.geometries[e].spatialReference=ji(n[e].spatialReference));const r=S(e),a=R({...r.query,f:"json",...s}),o=j(a,i),{data:l}=await b(`${r.path}/computePixelLocation`,o);return $t.fromJSON(l)}async function ci(e,t,i){const s=await oi(e,t,i),n=S(e),{data:r}=await b(`${n.path}/computeStatisticsHistograms`,s),{statistics:a}=r;return a?.length&&a.forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:a,histograms:r.histograms}}async function pi(e,t,i){const s=await oi(e,t,i),n=S(e),{data:r}=await b(`${n.path}/computeHistograms`,s);return{histograms:r.histograms}}async function mi(e,t,i){const s=t.toJSON();ai(s),s.outFields?.length&&(s.outFields=s.outFields.join(","));const n=await v(t.geometry),r=n?.[0];null!=r&&(s.geometry=Si(r));const a=S(e),o=R({...a.query,f:"json",...s}),l=j(o,i),{data:u}=await b(`${a.path}/getSamples`,l),c=u?.samples?.map((e=>{const t="NaN"===e.value||""===e.value?null:e.value.split(" ").map((e=>Number(e)));return{...e,pixelValue:t}}));return Yt.fromJSON({samples:c})}async function hi(e,t,i){const s=S(e),n=t.geometry?[t.geometry]:[];return v(n).then((e=>{const n=t.toJSON(),r=e?.[0];null!=r&&(n.geometry=JSON.stringify(Si(r)));const a=R({...s.query,f:"json",...n}),o=j(a,i);return b(s.path+"/identify",o)})).then((e=>kt.fromJSON(e.data)))}async function di(e,t,i){const s=await wi(e,t,[t.fromGeometry,t.toGeometry],i);return Ht.fromJSON(s)}async function yi(e,t,i){const s=await wi(e,t,[t.geometry],i);return Mt.fromJSON(s)}async function gi(e,t,i){const s=await wi(e,t,[t.geometry],i);return Wt.fromJSON(s)}async function fi(e,t,i){const s=await wi(e,t,[t.fromGeometry,t.toGeometry],i);return Ot.fromJSON(s)}async function wi(e,t,i,s){const n=S(e),r=await v(i),a=t.toJSON();null!=r[0]&&(a.fromGeometry=JSON.stringify(Si(r[0]))),null!=r[1]&&(a.toGeometry=JSON.stringify(Si(r[1])));const o=R({...n.query,f:"json",...a}),l=j(o,s),{data:u}=await b(n.path+"/measure",l);return u}async function vi(e,t,i){const s=await bi(e,t,i);return ri.fromJSON(s)}async function Ri(e,t,i){const s=await bi(e,t,i);return si.fromJSON(s)}async function bi(e,t,i){const s=S(e),n=t.toJSON(),r=R({...s.query,f:"json",...n}),a=j(r,i),{data:o}=await b(s.path+"/measureFromImage",a);return o}function Si(e){const t=e.toJSON();return e.spatialReference?.imageCoordinateSystem&&(t.spatialReference=ji(e.spatialReference)),t}function ji(e){const{imageCoordinateSystem:t}=e;if(t){const{id:e,referenceServiceName:i}=t;return null!=e?i?{icsid:e,icsns:i}:{icsid:e}:{ics:t}}return e.toJSON()}function Ii(e,t){if(!e.imageCoordinateSystem)return I(e);const i=ji(e),{icsid:s,icsns:n}=i;return null==s||null!=n&&!t?.toLowerCase().includes("/"+n.toLowerCase()+"/")?JSON.stringify(i):`0:${s}`}async function Fi(e,t,i){const s=S(e),n=t.toJSON();t.outSpatialReference&&(n.outSR=Ii(t.outSpatialReference));const r=R({...s.query,f:"json",...n}),a=j(r,i),{data:o}=await b(s.path+"/queryBoundary",a);return Ct.fromJSON(o)}async function xi(e,t,i){const s=t.toJSON();ai(s),s.objectIds?.length&&(s.objectIds=s.objectIds.join(",")),s.geometry||s.objectIds||s.time||s.where||(s.where="1=1");const n=await v(t.geometry),r=n?.[0];null!=r&&(s.geometry=Si(r));const a=r?.spatialReference??t.geometry?.spatialReference;a&&(s.inSR=Ii(a));const o=S(e),l=R({...o.query,f:"json",...s}),u=j(l,i),{data:c}=await b(`${o.path}/queryGPSInfo`,u);return Ut.fromJSON(c)}async function Di(e,t,i){const s=t.toJSON();t.geometry.spatialReference.imageCoordinateSystem&&(s.geometry=Si(t.geometry)),t.depthOffset&&t.adjust||delete s.options;const n=S(e),r=R({...n.query,f:"json",...s}),a=j(r,i),{data:o}=await b(`${n.path}/imageToMap`,a);return w(o)}async function Pi(e,t,i){const s=t.toJSON();t.rasterIds?.length&&(s.rasterIds=t.rasterIds.join(","));const n=S(e),r=R({...n.query,f:"json",...s}),a=j(r,i),{data:o}=await b(`${n.path}/imageToMapMultiray`,a);return w(o)}async function Ti(e,t,i){const s=t.toJSON(),n=await v(t.geometry),r=n?.[0];null!=r&&(s.geometry=Si(r)),t.visibleOnly||delete s.options;const a=r?.spatialReference??t.geometry?.spatialReference;a&&(s.inSR=Ii(a));const o=S(e),l=R({...o.query,f:"json",...s}),u=j(l,i),{data:c}=await b(`${o.path}/mapToImage`,u);return w(c)}async function Vi(e,t,i){const s=t.toJSON(),n=S(e),r=R({...n.query,f:"json",...s}),a=j(r,i),{data:o}=await b(`${n.path}/getImageUrl`,a);return ti.fromJSON(o)}async function Mi(e,t,i){const s=t.toJSON(),n=await v([t.fromGeometry,t.toGeometry]);null!=n[0]&&(s.fromGeometry=Si(n[0]),n[0].spatialReference&&(s.inSR=Ii(n[0].spatialReference))),null!=n[1]&&(s.toGeometry=Si(n[1])),t.objectIds?.length&&(s.objectIds=s.objectIds.join(","));const r=S(e),a=R({...r.query,f:"json",...s}),o=j(a,i),{data:l}=await b(`${r.path}/find`,o);return St.fromJSON(l)}async function Ai(e,t,i){const s=S(e),n=R({...s?.query,f:"json"}),r=j(n,i),a=`${s?.path}/${t}/info`,o=b(`${a}`,r),u=b(`${a}/keyProperties`,r),c=await Promise.allSettled([o,u]),p="fulfilled"===c[0].status?c[0].value.data:null,m="fulfilled"===c[1].status?c[1].value.data:null;let h=null;p.statistics?.length&&(h=p.statistics.map((e=>({min:e[0],max:e[1],avg:e[2],stddev:e[3]}))));const d=y.fromJSON(p.extent),g=Math.ceil(d.width/p.pixelSizeX-.1),f=Math.ceil(d.height/p.pixelSizeY-.1),w=d.spatialReference,v=new l({x:p.pixelSizeX,y:p.pixelSizeY,spatialReference:w}),I=p.histograms?.length?p.histograms:null,F=new _e({origin:p.origin,blockWidth:p.blockWidth,blockHeight:p.blockHeight,firstPyramidLevel:p.firstPyramidLevel,maximumPyramidLevel:p.maxPyramidLevel});return new Ee({width:g,height:f,bandCount:p.bandCount,extent:d,spatialReference:w,pixelSize:v,pixelType:p.pixelType.toLowerCase(),statistics:h,histograms:I,keyProperties:m,storageInfo:F})}let Ci=class extends(F(o)){constructor(){super(...arguments),this.fromGeometry=null,this.toGeometry=null,this.objectIds=null,this.where=null,this.maxCount=null}};s([n({type:l,json:{read:!0}})],Ci.prototype,"fromGeometry",void 0),s([n({type:l,json:{read:!0,write:!0}})],Ci.prototype,"toGeometry",void 0),s([n({json:{write:!0}})],Ci.prototype,"objectIds",void 0),s([n({type:String,json:{write:!0}})],Ci.prototype,"where",void 0),s([n({type:Number,json:{write:!0}})],Ci.prototype,"maxCount",void 0),Ci=s([a("esri.rest.support.FindImagesParameters")],Ci);const Ni=Ci;var Oi;let Gi=Oi=class extends o{constructor(e){super(e),this.angleNames=null,this.point=null,this.spatialReference=null,this.rasterId=null}clone(){return new Oi(e({angleNames:this.angleNames,point:this.point,spatialReference:this.spatialReference,rasterId:this.rasterId}))}};s([n({type:[String],json:{name:"angleName",write:!0}})],Gi.prototype,"angleNames",void 0),s([n({type:l,json:{write:!0}})],Gi.prototype,"point",void 0),s([n({type:u,json:{write:!0}})],Gi.prototype,"spatialReference",void 0),s([n({type:x,json:{write:!0}})],Gi.prototype,"rasterId",void 0),Gi=Oi=s([a("esri.rest.support.ImageAngleParameters")],Gi);const qi=Gi;const Ei=new D({esriMensurationPoint:"point",esriMensurationCentroid:"centroid",esriMensurationDistanceAndAngle:"distance-and-angle",esriMensurationAreaAndPerimeter:"area-and-perimeter",esriMensurationHeightFromBaseAndTop:"base-and-top",esriMensurationHeightFromBaseAndTopShadow:"base-and-top-shadow",esriMensurationHeightFromTopAndTopShadow:"top-and-top-shadow",esriMensurationPoint3D:"point-3D",esriMensurationCentroid3D:"centroid-3D",esriMensurationDistanceAndAngle3D:"distance-and-angle-3D",esriMensurationAreaAndPerimeter3D:"area-and-perimeter-3D"});let _i=class extends o{constructor(){super(...arguments),this.type=null,this.measureOperation=null,this.mosaicRule=null,this.pixelSize=null,this.raster=void 0}};s([n()],_i.prototype,"type",void 0),s([n({type:Ei.apiValues,json:{read:Ei.read,write:Ei.write}})],_i.prototype,"measureOperation",void 0),s([n({type:de,json:{write:!0}})],_i.prototype,"mosaicRule",void 0),s([n({type:l,json:{write:!0}})],_i.prototype,"pixelSize",void 0),s([n({json:{write:!0}})],_i.prototype,"raster",void 0),_i=s([a("esri.rest.support.BaseImageMeasureParameters")],_i);var Bi;let Ui=Bi=class extends _i{constructor(){super(...arguments),this.type="area-perimeter",this.geometry=null,this.is3D=!1,this.linearUnit="meters",this.areaUnit="square-meters"}writeGeometry(e,t,i){null!=e&&(t.geometryType=P(e),t[i]=e.toJSON())}get measureOperation(){return this.is3D?"area-and-perimeter-3D":"area-and-perimeter"}clone(){return new Bi(e({geometry:this.geometry,is3D:this.is3D,linearUnit:this.linearUnit,areaUnit:this.areaUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([n({types:f,json:{name:"fromGeometry",read:!0,write:!0}})],Ui.prototype,"geometry",void 0),s([r("geometry")],Ui.prototype,"writeGeometry",null),s([n({type:Ei.apiValues,json:{write:Ei.write}})],Ui.prototype,"measureOperation",null),s([n({json:{read:!0}})],Ui.prototype,"is3D",void 0),s([n({type:String,json:{read:c.read,write:c.write}})],Ui.prototype,"linearUnit",void 0),s([n({type:String,json:{read:p.read,write:p.write}})],Ui.prototype,"areaUnit",void 0),Ui=Bi=s([a("esri.rest.support.ImageAreaParameters")],Ui);const zi=Ui;let Hi=class extends(F(o)){constructor(){super(...arguments),this.outSpatialReference=null}};s([n({type:u,json:{name:"outSR",write:!0}})],Hi.prototype,"outSpatialReference",void 0),Hi=s([a("esri.rest.support.ImageBoundaryParameters")],Hi);const Li=Hi;var ki;let Ji=ki=class extends _i{constructor(){super(...arguments),this.type="distance-angle",this.fromGeometry=null,this.toGeometry=null,this.is3D=!1,this.linearUnit="meters",this.angularUnit="degrees"}writeFromGeometry(e,t,i){null!=e&&(t.geometryType=P(e),t[i]=e.toJSON())}get measureOperation(){return this.is3D?"distance-and-angle-3D":"distance-and-angle"}clone(){return new ki(e({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,is3D:this.is3D,linearUnit:this.linearUnit,angularUnit:this.angularUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([n({type:l,json:{read:!0,write:!0}})],Ji.prototype,"fromGeometry",void 0),s([r("fromGeometry")],Ji.prototype,"writeFromGeometry",null),s([n({type:l,json:{read:!0,write:!0}})],Ji.prototype,"toGeometry",void 0),s([n({type:Ei.apiValues,json:{write:Ei.write}})],Ji.prototype,"measureOperation",null),s([n({json:{read:!0}})],Ji.prototype,"is3D",void 0),s([n({type:String,json:{read:c.read,write:c.write}})],Ji.prototype,"linearUnit",void 0),s([n({type:String,json:{read:m.read,write:m.write}})],Ji.prototype,"angularUnit",void 0),Ji=ki=s([a("esri.rest.support.ImageDistanceParameters")],Ji);const $i=Ji;let Qi=class extends(F(o)){constructor(){super(...arguments),this.geometry=null,this.objectIds=null,this.spatialRelationship="intersects",this.timeExtent=null,this.where=null}writeGeometry(e,t,i){null!=e&&(t.geometryType=P(e),t[i]=JSON.stringify(e.toJSON()))}};s([n({types:f,json:{read:w,write:!0}})],Qi.prototype,"geometry",void 0),s([r("geometry")],Qi.prototype,"writeGeometry",null),s([n({json:{write:!0}})],Qi.prototype,"objectIds",void 0),s([T(V,{ignoreUnknown:!1,name:"spatialRel"})],Qi.prototype,"spatialRelationship",void 0),s([n({type:M,json:{name:"time",write:!0}})],Qi.prototype,"timeExtent",void 0),s([n({type:String,json:{write:!0}})],Qi.prototype,"where",void 0),Qi=s([a("esri.rest.support.ImageGPSInfoParameters")],Qi);const Wi=Qi;var Ki;let Zi=Ki=class extends _i{constructor(){super(...arguments),this.type="height",this.fromGeometry=null,this.toGeometry=null,this.operationType="base-and-top",this.linearUnit="meters"}writeFromGeometry(e,t,i){null!=e&&(t.geometryType=P(e),t[i]=e.toJSON())}get measureOperation(){return this.operationType}clone(){return new Ki(e({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,operationType:this.operationType,linearUnit:this.linearUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([n({type:l,json:{read:!0}})],Zi.prototype,"fromGeometry",void 0),s([r("fromGeometry")],Zi.prototype,"writeFromGeometry",null),s([n({type:l,json:{read:!0,write:!0}})],Zi.prototype,"toGeometry",void 0),s([n({type:Ei.apiValues,json:{write:Ei.write}})],Zi.prototype,"measureOperation",null),s([n({json:{read:!0}})],Zi.prototype,"operationType",void 0),s([n({type:String,json:{read:c.read,write:c.write}})],Zi.prototype,"linearUnit",void 0),Zi=Ki=s([a("esri.rest.support.ImageHeightParameters")],Zi);const Xi=Zi;var Yi;let es=Yi=class extends o{constructor(){super(...arguments),this.geometry=null,this.rasterFunctions=null,this.pixelSize=null,this.returnGeometry=!0,this.returnCatalogItems=!0,this.returnPixelValues=!0,this.maxItemCount=null,this.timeExtent=null,this.raster=void 0,this.viewId=void 0,this.processAsMultidimensional=!1}writeGeometry(e,t,i){null!=e&&(t.geometryType=P(e),t[i]=JSON.stringify(e.toJSON()))}set mosaicRule(e){let t=e;t?.mosaicMethod&&(t=de.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}writeMosaicRule(e,t,i){null!=e&&(t[i]=JSON.stringify(e.toJSON()))}get renderingRule(){return A(C.getLogger(this),"renderingRule",{replacement:"rasterFunction",version:"4.27",warnOnce:!0}),this._get("rasterFunction")}set renderingRule(e){A(C.getLogger(this),"renderingRule",{replacement:"rasterFunction",version:"4.27",warnOnce:!0}),this._set("rasterFunction",e)}get renderingRules(){return A(C.getLogger(this),"renderingRules",{replacement:"rasterFunctions",version:"4.27",warnOnce:!0}),this._get("rasterFunctions")}set renderingRules(e){A(C.getLogger(this),"renderingRules",{replacement:"rasterFunctions",version:"4.27",warnOnce:!0}),this._set("rasterFunctions",e)}set rasterFunction(e){let t=e;t?.rasterFunction&&(t=pe.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("rasterFunction",t)}writeRasterFunction(e,t,i){null!=e&&(t[i]=JSON.stringify(e.toJSON())),e.rasterFunctionDefinition&&(t[i]=JSON.stringify(e.rasterFunctionDefinition))}writeRasterFunctions(e,t,i){null!=e&&(t[i]=JSON.stringify(e.map((e=>e.rasterFunctionDefinition||e.toJSON()))))}writePixelSize(e,t,i){null!=e&&(t[i]=JSON.stringify(e))}writeTimeExtent(e,t,i){if(null!=e){const s=null!=e.start?e.start.getTime():null,n=null!=e.end?e.end.getTime():null;t[i]=null!=s?null!=n?`${s},${n}`:`${s}`:null}}clone(){return new Yi(e({geometry:this.geometry,mosaicRule:this.mosaicRule,rasterFunction:this.rasterFunction,rasterFunctions:this.rasterFunctions,pixelSize:this.pixelSize,returnGeometry:this.returnGeometry,returnCatalogItems:this.returnCatalogItems,returnPixelValues:this.returnPixelValues,maxItemCount:this.maxItemCount,processAsMultidimensional:this.processAsMultidimensional,raster:this.raster,viewId:this.viewId,timeExtent:this.timeExtent}))}};s([n({json:{write:!0}})],es.prototype,"geometry",void 0),s([r("geometry")],es.prototype,"writeGeometry",null),s([n({type:de,json:{write:!0}})],es.prototype,"mosaicRule",null),s([r("mosaicRule")],es.prototype,"writeMosaicRule",null),s([n({type:pe})],es.prototype,"renderingRule",null),s([n({type:[pe]})],es.prototype,"renderingRules",null),s([n({type:pe,json:{write:!0,name:"renderingRule"}})],es.prototype,"rasterFunction",null),s([r("rasterFunction")],es.prototype,"writeRasterFunction",null),s([n({type:[pe],json:{write:!0,name:"renderingRules"}})],es.prototype,"rasterFunctions",void 0),s([r("rasterFunctions")],es.prototype,"writeRasterFunctions",null),s([n({type:l,json:{write:!0}})],es.prototype,"pixelSize",void 0),s([r("pixelSize")],es.prototype,"writePixelSize",null),s([n({type:Boolean,json:{write:!0}})],es.prototype,"returnGeometry",void 0),s([n({type:Boolean,json:{write:!0}})],es.prototype,"returnCatalogItems",void 0),s([n({type:Boolean,json:{write:!0}})],es.prototype,"returnPixelValues",void 0),s([n({type:Number,json:{write:!0}})],es.prototype,"maxItemCount",void 0),s([n({type:M,json:{write:{target:"time"}}})],es.prototype,"timeExtent",void 0),s([r("timeExtent")],es.prototype,"writeTimeExtent",null),s([n({json:{write:!0}})],es.prototype,"raster",void 0),s([n({json:{write:!0}})],es.prototype,"viewId",void 0),s([n({type:Boolean,json:{write:!0}})],es.prototype,"processAsMultidimensional",void 0),es=Yi=s([a("esri.rest.support.ImageIdentifyParameters")],es);const ts=es;var is;let ss=is=class extends o{constructor(){super(...arguments),this.geometries=null,this.rasterId=null}writeGeometry(e,t,i){t.geometries={geometryType:"esriGeometryPoint",geometries:e.map((e=>e.toJSON()))}}clone(){return new is({geometries:this.geometries?.map((e=>e.clone()))??[],rasterId:this.rasterId})}};s([n({type:[l],json:{write:!0}})],ss.prototype,"geometries",void 0),s([r("geometries")],ss.prototype,"writeGeometry",null),s([n({type:x,json:{write:!0}})],ss.prototype,"rasterId",void 0),ss=is=s([a("esri.rest.support.ImagePixelLocationParameters")],ss);const ns=ss;var rs;let as=rs=class extends _i{constructor(){super(...arguments),this.type="point",this.geometry=null,this.is3D=!1}writeGeometry(e,t,i){null!=e&&(t.geometryType=P(e),t[i]=e.toJSON())}get measureOperation(){const{is3D:e,geometry:t}=this;return"point"===t.type?e?"point-3D":"point":e?"centroid-3D":"centroid"}clone(){return new rs(e({geometry:this.geometry,is3D:this.is3D,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([n({types:f,json:{name:"fromGeometry",read:w}})],as.prototype,"geometry",void 0),s([r("geometry")],as.prototype,"writeGeometry",null),s([n({type:Ei.apiValues,json:{read:Ei.read,write:Ei.write}})],as.prototype,"measureOperation",null),s([n({json:{read:!0}})],as.prototype,"is3D",void 0),as=rs=s([a("esri.rest.support.ImagePointParameters")],as);const os=as;var ls;let us=ls=class extends o{constructor(){super(...arguments),this.geometry=null,this.interpolation="nearest",this.mosaicRule=null,this.outFields=null,this.pixelSize=null,this.returnFirstValueOnly=!0,this.sampleDistance=null,this.sampleCount=null,this.sliceId=null,this.timeExtent=null}writeGeometry(e,t,i){null!=e&&(t.geometryType=P(e),t[i]=e.toJSON())}set locations(e){if(e?.length){const t=new N({spatialReference:e[0].spatialReference});t.points=e.map((e=>[e.x,e.y])),this._set("locations",e),this.geometry=t}}clone(){return new ls(e({geometry:this.geometry,locations:this.locations,interpolation:this.interpolation,mosaicRule:this.mosaicRule,outFields:this.outFields,raster:this.raster,returnFirstValueOnly:this.returnFirstValueOnly,sampleDistance:this.sampleDistance,sampleCount:this.sampleCount,sliceId:this.sliceId,pixelSize:this.pixelSize,timeExtent:this.timeExtent}))}};s([n({types:f,json:{read:w}})],us.prototype,"geometry",void 0),s([r("geometry")],us.prototype,"writeGeometry",null),s([n()],us.prototype,"locations",null),s([n({type:String,json:{type:me.jsonValues,read:me.read,write:me.write}})],us.prototype,"interpolation",void 0),s([n({type:de,json:{write:!0}})],us.prototype,"mosaicRule",void 0),s([n({type:[String],json:{write:!0}})],us.prototype,"outFields",void 0),s([n({type:l,json:{write:!0}})],us.prototype,"pixelSize",void 0),s([n({type:String,json:{write:!0}})],us.prototype,"raster",void 0),s([n({type:Boolean,json:{write:!0}})],us.prototype,"returnFirstValueOnly",void 0),s([n({type:Number,json:{write:!0}})],us.prototype,"sampleDistance",void 0),s([n({type:Number,json:{write:!0}})],us.prototype,"sampleCount",void 0),s([n({type:Number,json:{write:!0}})],us.prototype,"sliceId",void 0),s([n({type:M,json:{read:{source:"time"},write:{target:"time"}}})],us.prototype,"timeExtent",void 0),us=ls=s([a("esri.rest.support.ImageSampleParameters")],us);const cs=us;let ps=class extends(F(o)){constructor(){super(...arguments),this.geometries=[],this.rasterIds=null,this.outSpatialReference=null}writeGeometries(e,t,i){t.geometries=e?.length?{geometryType:P(e[0]),geometries:e.map((e=>({...e.toJSON(),spatialReference:void 0})))}:null}};s([n({types:[f]})],ps.prototype,"geometries",void 0),s([r("geometries")],ps.prototype,"writeGeometries",null),s([n({type:[x],json:{write:!0}})],ps.prototype,"rasterIds",void 0),s([n({type:u,json:{name:"outSR",write:!0}})],ps.prototype,"outSpatialReference",void 0),ps=s([a("esri.rest.support.ImageToMapMultirayParameters")],ps);const ms=ps;let hs=class extends(F(o)){constructor(){super(...arguments),this.geometry=null,this.rasterId=null,this.outSpatialReference=null,this.depthOffset=0,this.adjust=!1}writeGeometry(e,t,i){null!=e&&(t.geometryType=P(e),t[i]={...e.toJSON(),spatialReference:void 0})}};s([n({types:f,json:{read:w,write:!0}})],hs.prototype,"geometry",void 0),s([r("geometry")],hs.prototype,"writeGeometry",null),s([n({json:{write:!0}})],hs.prototype,"rasterId",void 0),s([n({type:u,json:{name:"outSR",write:!0}})],hs.prototype,"outSpatialReference",void 0),s([n({json:{name:"options.DOff",write:!0}})],hs.prototype,"depthOffset",void 0),s([n({json:{name:"options.Adjust",write:!0}})],hs.prototype,"adjust",void 0),hs=s([a("esri.rest.support.ImageToMapParameters")],hs);const ds=hs;let ys=class extends(F(o)){constructor(){super(...arguments),this.referenceUri=null}};s([n({type:String,json:{name:"uri",write:!0}})],ys.prototype,"referenceUri",void 0),ys=s([a("esri.rest.support.ImageUrlParameters")],ys);const gs=ys;let fs=class extends(F(o)){constructor(){super(...arguments),this.geometry=null,this.rasterId=null,this.visibleOnly=!1}writeGeometry(e,t,i){null!=e&&(t.geometryType=P(e),t[i]=JSON.stringify(e))}};s([n({types:f,json:{read:w,write:!0}})],fs.prototype,"geometry",void 0),s([r("geometry")],fs.prototype,"writeGeometry",null),s([n({json:{write:!0}})],fs.prototype,"rasterId",void 0),s([n({json:{name:"options.VisibleOnly",write:!0}})],fs.prototype,"visibleOnly",void 0),fs=s([a("esri.rest.support.MapToImageParameters")],fs);const ws=fs;var vs;let Rs=vs=class extends o{constructor(){super(...arguments),this.geometry=null,this.rasterId=void 0}writeGeometry(e,t,i){null!=e&&(t.geometryType=P(e),t[i]={...e.toJSON(),spatialReference:void 0})}clone(){const t=e({geometry:this.geometry,rasterId:this.rasterId});return new vs(t)}};s([n({types:f,json:{name:"fromGeometry",read:w,write:!0}})],Rs.prototype,"geometry",void 0),s([r("geometry")],Rs.prototype,"writeGeometry",null),s([n({json:{write:!0}})],Rs.prototype,"rasterId",void 0),Rs=vs=s([a("esri.rest.support.MeasureFromImageParameters")],Rs);const bs=Rs;const Ss=new Set(["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"]),js=k(J,{min:0,max:255});function Is(e){if(!e)return null;const t=JSON.stringify(e).match(/"rasterFunction":"(.*?")/gi),i=t?.map((e=>e.replace('"rasterFunction":"',"").replace('"',"")));return i?i.join("/"):null}const Fs=t=>{let i=class extends t{constructor(){super(...arguments),this._functionRasterInfos={},this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this._cachedRendererJson=null,this._serviceSupportsMosaicRule=null,this._rasterAttributeTableFieldPrefix="Raster.",this.adjustAspectRatio=null,this.bandIds=void 0,this.capabilities=null,this.compressionQuality=void 0,this.compressionTolerance=.01,this.copyright=null,this.defaultMosaicRule=null,this.definitionExpression=null,this.exportImageServiceParameters=null,this.rasterInfo=null,this.fields=null,this.fullExtent=null,this.hasMultidimensions=!1,this.imageMaxHeight=4100,this.imageMaxWidth=4100,this.interpolation=void 0,this.minScale=0,this.maxScale=0,this.multidimensionalInfo=null,this.multidimensionalSubset=null,this.noData=null,this.noDataInterpretation=void 0,this.objectIdField=null,this.geometryType="polygon",this.typeIdField=null,this.types=[],this.pixelFilter=null,this.raster=void 0,this.sourceType=null,this.viewId=void 0,this.symbolizer=null,this.rasterFunctionInfos=null,this.serviceDataType=null,this.spatialReference=null,this.pixelType=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.url=null,this.version=void 0}initialize(){this._set("exportImageServiceParameters",new ft({layer:this}))}readServiceSupportsMosaicRule(e,t){return this._isMosaicRuleSupported(t)}get _rasterFunctionNamesIndex(){const e=new Map;return!this.rasterFunctionInfos||null!=this.rasterFunctionInfos&&this.rasterFunctionInfos.length<1||null!=this.rasterFunctionInfos&&this.rasterFunctionInfos.forEach((t=>{e.set(t.name.toLowerCase().replaceAll(/ /gi,"_"),t.name)})),e}readBandIds(e,t){if(Array.isArray(e)&&e.length>0&&e.every((e=>"number"==typeof e)))return e}readCapabilities(e,t){return this._readCapabilities(t)}writeCompressionQuality(e,t,i){null!=e&&"lerc"!==this.format&&(t[i]=e)}writeCompressionTolerance(e,t,i){"lerc"===this.format&&null!=e&&(t[i]=e)}readDefaultMosaicRule(e,t){return this._serviceSupportsMosaicRule?de.fromJSON(t):null}get fieldsIndex(){return this.fields?new E(this.fields):null}set format(e){e&&Ss.has(e.toLowerCase())&&this._set("format",e.toLowerCase())}readFormat(e,t){return"esriImageServiceDataTypeVector-UV"===t.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===t.serviceDataType||null!=this.pixelFilter?"lerc":"jpgpng"}readMinScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}readMaxScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}set mosaicRule(e){let t=e;t?.mosaicMethod&&(t=de.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}readMosaicRule(e,t){const i=e||t.mosaicRule;return i?de.fromJSON(i):this._isMosaicRuleSupported(t)?de.fromJSON(t):null}writeMosaicRule(e,t,i){let s=this.mosaicRule;const n=this.definitionExpression;s?n&&n!==s.where&&(s=s.clone(),s.where=n):n&&(s=new de({where:n})),this._isValidCustomizedMosaicRule(s)&&(t[i]=s.toJSON())}writeNoData(e,t,i){null!=e&&"number"==typeof e&&(t[i]=js(e))}readObjectIdField(e,t){if(!e){const i=t.fields.find((e=>"esriFieldTypeOID"===e.type||"oid"===e.type));e=i?.name}return e}get parsedUrl(){return _(this.url)}readSourceType(e,t){return this._isMosaicDataset(t)?"mosaic-dataset":"raster-dataset"}set renderer(e){this.loaded&&(e=this._configRenderer(e)),this._set("renderer",e)}readRenderer(e,t,i){const s=t?.layerDefinition?.drawingInfo?.renderer,n=ve(s,i);return null==n?null:("vector-field"===n.type&&t.symbolTileSize&&!s.symbolTileSize&&(n.symbolTileSize=t.symbolTileSize),et(n)||C.getLogger(this).warn("ArcGISImageService","Imagery layer doesn't support given renderer type."),n)}writeRenderer(e,t,i){t.layerDefinition=t.layerDefinition||{},t.layerDefinition.drawingInfo=t.layerDefinition.drawingInfo||{},t.layerDefinition.drawingInfo.renderer=e.toJSON(),"vector-field"===e.type&&(t.symbolTileSize=e.symbolTileSize)}get rasterFields(){const t=this._rasterAttributeTableFieldPrefix,i=new O({name:"Raster.ItemPixelValue",alias:"Item Pixel Value",domain:null,editable:!1,length:50,type:"string"}),s=new O({name:"Raster.ServicePixelValue",alias:"Service Pixel Value",domain:null,editable:!1,length:50,type:"string"}),n=new O({name:"Raster.ServicePixelValue.Raw",alias:"Raw Service Pixel Value",domain:null,editable:!1,length:50,type:"string"});let r=this.fields?e(this.fields):[];r.push(s),this.capabilities?.operations.supportsQuery&&this.fields&&this.fields.length>0&&r.push(i),this.version>=10.4&&null!=this.rasterFunctionInfos&&this.rasterFunctionInfos.some((e=>"none"===e.name.toLowerCase()))&&r.push(n),null!=this.rasterFunctionInfos&&this.rasterFunctionInfos.filter((e=>"none"!==e.name.toLowerCase())).forEach((e=>{r.push(new O({name:"Raster.ServicePixelValue."+e.name,alias:e.name,domain:null,editable:!1,length:50,type:"string"}))})),this._isVectorDataSet()&&(r.push(new O({name:"Raster.Magnitude",alias:"Magnitude",domain:null,editable:!1,type:"double"})),r.push(new O({name:"Raster.Direction",alias:"Direction",domain:null,editable:!1,type:"double"})));const{attributeTable:a}=this.rasterInfo??{};if(null!=a){const i=a.fields.filter((e=>"esriFieldTypeOID"!==e.type&&"value"!==e.name.toLowerCase())).map((i=>{const s=e(i);return s.name=t+i.name,s}));r=r.concat(i)}return r}get renderingRule(){return A(C.getLogger(this),"renderingRule",{replacement:"rasterFunction",version:"4.27",warnOnce:!0}),this.rasterFunction}set renderingRule(e){A(C.getLogger(this),"renderingRule",{replacement:"rasterFunction",version:"4.27",warnOnce:!0}),this._set("rasterFunction",e)}set rasterFunction(e){let t=e;t?.rasterFunction&&(t=pe.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("rasterFunction",t)}readRasterFunction(e,t){const i=t.rasterFunctionInfos;return t.renderingRule||i?.length&&"None"!==i[0].name?this._isRFTJson(t.renderingRule)?pe.fromJSON({rasterFunctionDefinition:t.renderingRule}):pe.fromJSON(t.renderingRule||{rasterFunctionInfos:t.rasterFunctionInfos}):null}readSpatialReference(e,t){const i=e||t.extent.spatialReference;return i?u.fromJSON(i):null}readPixelType(e){return we.fromJSON(e)||e}writePixelType(e,t,i){null!=this.serviceRasterInfo&&this.pixelType===this.serviceRasterInfo.pixelType||(t[i]=we.toJSON(e))}readVersion(e,t){let i=t.currentVersion;return i||(i=t.hasOwnProperty("fields")||t.hasOwnProperty("timeInfo")?10:9.3),i}applyFilter(e){let t=e;return this.pixelFilter&&(t=this._clonePixelData(e),this.pixelFilter(t)),t}async applyRenderer(e,t){let i=e;const{renderer:s,symbolizer:n,pixelFilter:r,bandIds:a}=this;if(!this._isPicture()&&s&&n&&!r){const r=JSON.stringify(this._cachedRendererJson)!==JSON.stringify(s.toJSON()),o=this._rasterJobHandler.instance;if(o){r&&(n.bind(),await o.updateSymbolizer(n,t),this._cachedRendererJson=s.toJSON());const l=await o.symbolize({bandIds:a,...e},t);i={extent:e.extent,pixelBlock:l}}else i={extent:e.extent,pixelBlock:n.symbolize({bandIds:a,...e})}}return i}destroy(){this._shutdownJobHandler()}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}async computeAngles(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputeAngles)throw new B("imagery-layer:compute-angles","this operation is not supported on the input image service");return e=U(qi,e).clone(),li(this.url,e,this._getRequestOptions(t))}async computePixelSpaceLocations(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputePixelLocation)throw new B("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return e=U(ns,e).clone(),ui(this.url,e,this._getRequestOptions(t))}async computeHistograms(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputeHistograms)throw new B("imagery-layer:compute-histograms","this operation is not supported on the input image service");return e=U(Re,e).clone(),this._applyMosaicAndRenderingRules(e),pi(this.url,e,this._getRequestOptions(t))}async computeStatisticsHistograms(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputeStatisticsHistograms)throw new B("imagery-layer:compute-statistics-histograms","this operation is not supported on the input image service");return e=U(Re,e).clone(),this._applyMosaicAndRenderingRules(e),ci(this.url,e,this._getRequestOptions(t))}async measureHeight(e,t){const i=await this._fetchCapabilities(t?.signal);if(!("base-and-top"===e.operationType?i.mensuration.supportsHeightFromBaseAndTop:"base-and-top-shadow"===e.operationType?i.mensuration.supportsHeightFromBaseAndTopShadow:i.mensuration.supportsHeightFromTopAndTopShadow))throw new B("imagery-layer:measure-height","this operation is not supported on the input image service");return e=U(Xi,e).clone(),this._applyMosaicAndRenderingRules(e),di(this.url,e,this._getRequestOptions(t))}async measureAreaAndPerimeter(e,t){const i=await this._fetchCapabilities(t?.signal);if(!(i.mensuration.supportsAreaAndPerimeter&&(!e.is3D||i.mensuration.supports3D)))throw new B("imagery-layer:measure-area-and-perimeter","this operation is not supported on the input image service");return e=U(zi,e).clone(),this._applyMosaicAndRenderingRules(e),yi(this.url,e,this._getRequestOptions(t))}async measureDistanceAndAngle(e,t){const i=await this._fetchCapabilities(t?.signal);if(!(i.mensuration.supportsDistanceAndAngle&&(!e.is3D||i.mensuration.supports3D)))throw new B("imagery-layer:measure-distance-and-angle","this operation is not supported on the input image service");return e=U($i,e).clone(),this._applyMosaicAndRenderingRules(e),fi(this.url,e,this._getRequestOptions(t))}async measurePointOrCentroid(e,t){const i=await this._fetchCapabilities(t?.signal);if(!(i.mensuration.supportsPointOrCentroid&&(!e.is3D||i.mensuration.supports3D)))throw new B("imagery-layer:measure-point-or-centroid","this operation is not supported on the input image service");return e=U(os,e).clone(),this._applyMosaicAndRenderingRules(e),gi(this.url,e,this._getRequestOptions(t))}async measureLengthFromImage(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsMeasureFromImage)throw new B("imagery-layer:measure-length-from-image","this operation is not supported on the input image service");if("polyline"!==e.geometry.type)throw new B("imagery-layer:measure-length-from-image","this input geometry must be a polyline");return e=U(bs,e).clone(),vi(this.url,e,this._getRequestOptions(t))}async measureAreaFromImage(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsMeasureFromImage)throw new B("imagery-layer:measure-area-from-image","this operation is not supported on the input image service");if("polygon"!==e.geometry.type)throw new B("imagery-layer:measure-area-from-image","this input geometry must be a polygon");return e=U(bs,e).clone(),Ri(this.url,e,this._getRequestOptions(t))}getField(e){const{fieldsIndex:t}=this;return null!=t?t.get(e):void 0}getFieldDomain(e,t){const i=this.getField(e);return i?i.domain:null}async fetchImage(e,t,i,s={}){if(null==e||null==t||null==i)throw new B("imagery-layer:fetch-image","Insufficient parameters for requesting an image. A valid extent, width and height values are required.");if(this.renderer||this.symbolizer){const e=await this._generateRasterInfo(this.rasterFunction,{signal:s.signal});e&&(this.rasterInfo=e)}const n=this.getExportImageServiceParameters(e,t,i,s.timeExtent);if(null==n){if(s.requestAsImageElement&&this._canRequestImageElement(this.format)){const e=document.createElement("canvas");if(e.width=t,e.height=i,s.returnImageBitmap){return{imageBitmap:await He(e,`${o(this.parsedUrl)}/exportImage`,s.signal)}}return{imageOrCanvasElement:e}}const{bandIds:n,rasterInfo:r}=this,a=(n?.length||r.bandCount)??0,l=t*i,u=r.pixelType,c=[];for(let e=0;e<a;e++)c.push(Le.createEmptyBand(u,l));return{pixelData:{pixelBlock:new Le({width:t,height:i,pixels:c,mask:new Uint8Array(l),pixelType:u}),extent:e}}}const r=!!s.requestAsImageElement&&!this.pixelFilter,a=r&&!!s.returnImageBitmap,l={imageServiceParameters:n,imageProps:{extent:e,width:t,height:i,format:this.format},requestAsImageElement:r,returnImageBitmap:a,signal:s.signal};return this._requestArrayBuffer(l)}fetchKeyProperties(e){return b(o(this.parsedUrl)+"/keyProperties",{query:this._getQueryParams({renderingRule:this.version>=10.3?e?.rasterFunction:null})}).then((e=>e.data))}fetchRasterAttributeTable(e){return this.version<10.1?Promise.reject(new B("#fetchRasterAttributeTable()","Failed to get rasterAttributeTable")):b(o(this.parsedUrl)+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.3?e?.rasterFunction:null})}).then((e=>g.fromJSON(e.data)))}getCatalogItemRasterInfo(e,t){const i={...t,query:this._getQueryParams()};return Ai(o(this.parsedUrl),e,i)}async getCatalogItemICSInfo(e,t){const{data:i}=await b(o(this.parsedUrl)+"/"+e+"/info/ics",{query:this._getQueryParams(),...t}),s=i?.ics;if(!s)return;let n=null;try{n=(await b(o(this.parsedUrl)+"/"+e+"/info",{query:this._getQueryParams(),...t})).data.extent}catch{}if(!n||!n.spatialReference)return{ics:s,icsToPixelTransform:null,icsExtent:null,northDirection:null};const r=this.version>=10.7?b(o(this.parsedUrl)+"/"+e+"/info/icstopixel",{query:this._getQueryParams(),...t}).then((e=>e.data)).catch((()=>({}))):{},a=n.spatialReference,l={geometries:JSON.stringify({geometryType:"esriGeometryEnvelope",geometries:[n]}),inSR:I(a),outSR:"0:"+e},c=b(o(this.parsedUrl)+"/project",{query:this._getQueryParams(l),...t}).then((e=>e.data)).catch((()=>({}))),p=5,m=(n.xmin+n.xmax)/2,h=(n.ymax-n.ymin)/(p+1),d=n.ymin+h,g=[];for(let e=0;e<p;e++)g.push({x:m,y:d+h*e});const f={geometries:JSON.stringify({geometryType:"esriGeometryPoint",geometries:g}),inSR:I(a),outSR:"0:"+e},w=b(o(this.parsedUrl)+"/project",{query:this._getQueryParams(f),...t}).then((e=>e.data)).catch((()=>({}))),v=await Promise.all([r,c,w]);let R=v[0].ipxf;if(null==R){const e=s.geodataXform?.xf_0;"topup"===e?.name?.toLowerCase()&&6===e?.coefficients?.length&&(R={affine:{name:"ics [sensor: Frame] to pixel (column, row) transformation",coefficients:e.coefficients,cellsizeRatio:0,type:"GeometricXform"}})}const S=y.fromJSON(v[1]?.geometries?.[0]);S&&(S.spatialReference=new u({wkid:0,imageCoordinateSystem:s}));const j=v[2].geometries?v[2].geometries.filter((e=>null!=e?.x&&null!=e.y&&"NaN"!==e.x&&"NaN"!==e.y)):[],F=j.length;if(F<3)return{ics:s,icsToPixelTransform:R,icsExtent:S,northDirection:null};let x=0,D=0,P=0,T=0;for(let e=0;e<F;e++)x+=j[e].x,D+=j[e].y,P+=j[e].x*j[e].x,T+=j[e].x*j[e].y;const V=(F*T-x*D)/(F*P-x*x);let M=0;const A=j[p-1].x>j[0].x,C=j[p-1].y>j[0].y;return V===1/0?M=C?90:270:0===V?M=A?0:180:V>0?M=A?180*Math.atan(V)/Math.PI:180*Math.atan(V)/Math.PI+180:V<0&&(M=C?180+180*Math.atan(V)/Math.PI:360+180*Math.atan(V)/Math.PI),{ics:s,icsToPixelTransform:R,icsExtent:S,northDirection:M}}async generateRasterInfo(e,t){if(e=U(pe,e),this.serviceRasterInfo&&(!e||"none"===e.functionName?.toLowerCase()||this._isVectorFieldResampleFunction(e)))return this.serviceRasterInfo;const i=Is(e);if(!i)throw new B("imagery-layer:generate-raster-info","the rendering rule is not supported");if(this._functionRasterInfos[i])return this._functionRasterInfos[i];const s={...t,query:this._getQueryParams()},n=be(o(this.parsedUrl),e,s);this._functionRasterInfos[i]=n;try{return await n}catch(e){throw this._functionRasterInfos[i]=null,e}}getExportImageServiceParameters(e,t,i,s){e=e.clone().shiftCentralMeridian();const n=Ii(e.spatialReference,o(this.parsedUrl));this.pixelType!==this.serviceRasterInfo.pixelType&&(this.exportImageServiceParameters.pixelType=this.pixelType);const r=this.exportImageServiceParameters.toJSON(),{bandIds:a,noData:l}=r;let{renderingRule:u}=r;const c=this.rasterFunction?.rasterFunctionDefinition,p=!this.renderer||"raster-stretch"===this.renderer.type;if(a?.length&&this._hasRasterFunction(this.rasterFunction)&&!c&&p){const e={rasterFunction:"ExtractBand",rasterFunctionArguments:{BandIds:a}};if("Stretch"===u.rasterFunction)e.rasterFunctionArguments.Raster=u.rasterFunctionArguments.Raster,u.rasterFunctionArguments.Raster=e;else if("Colormap"===u.rasterFunction){const t=u.rasterFunctionArguments.Raster;"Stretch"===t?.rasterFunction?(e.rasterFunctionArguments.Raster=t.rasterFunctionArguments.Raster,t.rasterFunctionArguments.Raster=e):(e.rasterFunctionArguments.Raster=t,u.rasterFunctionArguments.Raster=e)}else e.rasterFunctionArguments.Raster=u,u=e;r.bandIds=void 0}else r.bandIds=a?.join(",");l instanceof Array&&l.length>0&&(r.noData=l.join(","));const m=this._processMultidimensionalIntersection(null,s,this.exportImageServiceParameters.mosaicRule);if(m.isOutSide)return null;r.mosaicRule=null!=m.mosaicRule?JSON.stringify(m.mosaicRule):null,s=m.timeExtent,r.renderingRule=this._getRenderingRuleString(pe.fromJSON(u));const h={};if(null!=s){const{start:e,end:t}=s.toJSON();e&&t&&e===t?h.time=""+e:null==e&&null==t||(h.time=`${e??"null"},${t??"null"}`)}return{bbox:e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:n,imageSR:n,size:t+","+i,...r,...h}}async getSamples(e,t){const i=await this._fetchCapabilities(t?.signal);if(!i?.operations.supportsGetSamples)throw new B("imagery-layer:get-samples","getSamples operation is not supported on the input image service");e=U(cs,e).clone();const{raster:s}=this;return s&&null==e.raster&&(e.raster=s),mi(this.url,e,this._getRequestOptions(t))}async identify(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsIdentify)throw new B("imagery-layer:identify","identify operation is not supported on the input image service");e=U(ts,e).clone(),this.version<10.91&&"extent"===e.geometry?.type&&(e.geometry=d.fromExtent(e.geometry));const i=this._processMultidimensionalIntersection(e.geometry,e.timeExtent,e.mosaicRule||this.mosaicRule);if(i.isOutSide)throw new B("imagery-layer:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");e.timeExtent=i.timeExtent,e.mosaicRule=i.mosaicRule;const{raster:s,rasterFunction:n}=this;return n&&null==e.rasterFunction&&(e.rasterFunction=n),s&&null==e.raster&&(e.raster=s),hi(this.url,e,this._getRequestOptions(t))}async imageToMap(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsImageToMap)throw new B("imagery-layer:image-to-map","imageToMap operation is not supported on the input image service");return e=U(ds,e),Di(o(this.parsedUrl),e,this._getRequestOptions(t))}async imageToMapMultiray(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsImageToMapMultiray)throw new B("imagery-layer:image-to-map-multiray","imageToMapMultiray operation is not supported on the input image service");return e=U(ms,e),Pi(o(this.parsedUrl),e,this._getRequestOptions(t))}async mapToImage(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsMapToImage)throw new B("imagery-layer:map-to-image","mapToImage operation is not supported on the input image service");return e=U(ws,e),Ti(o(this.parsedUrl),e,this._getRequestOptions(t))}async findImages(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsFindImages)throw new B("imagery-layer:find-images","findImages operation is not supported on the input image service");return e=U(Ni,e),Mi(o(this.parsedUrl),e,this._getRequestOptions(t))}async getImageUrl(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsGetImageUrl)throw new B("imagery-layer:get-image-url","getImageUrl operation is not supported on the input image service");return e=U(gs,e),Vi(o(this.parsedUrl),e,this._getRequestOptions(t))}createQuery(){const e=new z;return e.outFields=["*"],e.returnGeometry=!0,e.where=this.definitionExpression||"1=1",e}async queryBoundary(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsQueryBoundary)throw new B("imagery-layer:query-boundary","queryBoundary operation is not supported on the input image service");return e=U(Li,e??{outSpatialReference:this.spatialReference}).clone(),Fi(o(this.parsedUrl),e,this._getRequestOptions(t))}async queryRasters(e,t){return({query:e,requestOptions:t}=await this._prepareForQuery(e,t)),$e(this.url,e,t)}async queryObjectIds(e,t){return({query:e,requestOptions:t}=await this._prepareForQuery(e,t)),Qe(this.url,e,t)}async queryGPSInfo(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsQueryGPSInfo)throw new B("imagery-layer:query-gps-info","queryGPSInfo operation is not supported on the input image service");return e=U(Wi,e??{outSpatialReference:this.spatialReference}).clone(),xi(o(this.parsedUrl),e,this._getRequestOptions(t))}async queryRasterCount(e,t){return({query:e,requestOptions:t}=await this._prepareForQuery(e,t)),We(this.url,e,t)}async queryVisibleRasters(e,t){if(!e)throw new B("imagery-layer: query-visible-rasters","missing query parameter");await this.load();const{pixelSize:i,returnDomainValues:s,returnTopmostRaster:n,showNoDataRecords:r}=t||{pixelSize:null,returnDomainValues:!1,returnTopmostRaster:!1,showNoDataRecords:!1};let a=!1,o=null,l=null;const u="raster.servicepixelvalue",c=this._rasterFunctionNamesIndex;if(null!=e.outFields&&(a=e.outFields.some((e=>!e.toLowerCase().includes(u))),this.version>=10.4)){const t=e.outFields.filter((e=>e.toLowerCase().includes(u)&&e.length>u.length)).map((e=>{const t=e.slice(u.length+1);return[this._updateRenderingRulesFunctionName(t,c),t]}));o=t.map((e=>new pe({functionName:e[0]}))),l=t.map((e=>e[1]));const{rasterFunction:i}=this;0===o.length?i?.functionName?(o.push(i),l.push(i.functionName)):o=null:i?.functionName&&!o.some((e=>e.functionName===i.functionName))&&(o.push(i),l.push(i.functionName))}const p=null==e.outSpatialReference||e.outSpatialReference.equals(this.spatialReference),{multidimensionalSubset:m}=this;let h=e.timeExtent||this.timeExtent;if(m){const{isOutside:t,intersection:i}=Te(m,{geometry:e.geometry,timeExtent:e.timeExtent,multidimensionalDefinition:this.exportImageServiceParameters.mosaicRule?.multidimensionalDefinition});if(t)throw new B("imagery-layer:query-visible-rasters","the request cannot be fulfilled when falling outside of the multidimensional subset");null!=i?.timeExtent&&(h=i.timeExtent)}const y=this._combineMosaicRuleWithTimeExtent(this.exportImageServiceParameters.mosaicRule,h);let g=e.geometry;this.version<10.91&&"extent"===g?.type&&(g=d.fromExtent(g));const f=this._getQueryParams({geometry:g,timeExtent:h,mosaicRule:y,rasterFunction:this.version<10.4?this.rasterFunction:null,rasterFunctions:o,pixelSize:i,returnCatalogItems:a,returnGeometry:p,raster:this.raster,maxItemCount:n?1:null});delete f.f;const w=new ts(f);try{await this._generateRasterInfo(this.rasterFunction);const i=await hi(this.url,w,{signal:t?.signal,query:{...this.customParameters}}),n=e.outFields,o=null!=i.value&&i.value.toLowerCase().includes("nodata");if(!(a&&!p&&i?.catalogItems?.features.length&&(r||!o)))return this._processVisibleRastersResponse(i,{returnDomainValues:s,templateRRFunctionNames:l,showNoDataRecords:r,templateFields:n});const u=this.objectIdField||"ObjectId",c=i.catalogItems?.features??[],m=c.map((e=>e.attributes?.[u])),h=new z({objectIds:m,returnGeometry:!0,outSpatialReference:e.outSpatialReference,outFields:[u]}),y=await this.queryRasters(h);return y?.features?.length&&y.features.forEach((t=>{c.forEach((i=>{i.attributes[u]===t.attributes[u]&&(i.geometry=new d(t.geometry),null!=e.outSpatialReference&&(i.geometry.spatialReference=e.outSpatialReference))}))})),this._processVisibleRastersResponse(i,{returnDomainValues:s,templateRRFunctionNames:l,showNoDataRecords:r,templateFields:n})}catch{throw new B("imagery-layer:query-visible-rasters","encountered error when querying visible rasters")}}async fetchVariableStatisticsHistograms(e,t){const i=b(o(this.parsedUrl)+"/statistics",{query:this._getQueryParams({variable:e}),signal:t}).then((e=>e.data?.statistics)),s=b(o(this.parsedUrl)+"/histograms",{query:this._getQueryParams({variable:e}),signal:t}).then((e=>e.data?.histograms)),n=await Promise.all([i,s]);return n[0]&&n[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:n[0]||null,histograms:n[1]||null}}async createFlowMesh(e,t){const i=this._rasterJobHandler.instance;return i?i.createFlowMesh(e,t):ke(e.meshType,e.simulationSettings,e.flowData,null!=t.signal?t.signal:(new AbortController).signal)}getMultidimensionalSubsetVariables(e){const t=e??this.serviceRasterInfo.multidimensionalInfo;return Ve(this.multidimensionalSubset,t)}async _fetchService(e){await this._fetchServiceInfo(e),this.rasterInfo||(this.rasterInfo=this.serviceRasterInfo);const t=this.sourceJSON,i=null!=this.serviceRasterInfo?Promise.resolve(this.serviceRasterInfo):Se(o(this.parsedUrl),t,{signal:e,query:this._getQueryParams()}).then((e=>(this._set("serviceRasterInfo",e),this._set("multidimensionalInfo",e.multidimensionalInfo),je(e,t),e))),s=this._hasRasterFunction(this.rasterFunction)?this._generateRasterInfo(this.rasterFunction,{signal:e}):null,n=this._getRasterFunctionInfos();return Promise.all([i,s,n]).then((e=>{e[1]?this._set("rasterInfo",e[1]):this._set("rasterInfo",e[0]),e[2]&&this._set("rasterFunctionInfos",e[2]),this.renderer&&!this._isSupportedRenderer(this.renderer)&&(this._set("renderer",null),C.getLogger(this).warn("ArcGISImageService","Switching to the default renderer. Renderer applied is not valid for this Imagery Layer")),this._set("renderer",this._configRenderer(this.renderer)),this.addHandles([H((()=>this.rasterFunction),(e=>{(this.renderer||this.symbolizer||this.popupEnabled&&this.popupTemplate)&&this._generateRasterInfo(e).then((e=>{e&&(this.rasterInfo=e)}))}))]);const{serviceRasterInfo:t}=this;null!=t.multidimensionalInfo&&this._updateMultidimensionalDefinition(t)}))}_combineMosaicRuleWithTimeExtent(e,t){const i=this.timeInfo,{multidimensionalInfo:s}=this.serviceRasterInfo;if(null==e||null==s||null==t||null==i?.startField)return e;const{startField:n}=i,r=s.variables.some((e=>e.dimensions.some((e=>e.name===n))))?n:"StdTime";if(e=e.clone(),"mosaic-dataset"===this.sourceType)return e.multidimensionalDefinition=e.multidimensionalDefinition?.filter((e=>e.dimensionName!==r)),this._cleanupMultidimensionalDefinition(e);e.multidimensionalDefinition=e.multidimensionalDefinition||[];const a=e.multidimensionalDefinition.filter((e=>e.dimensionName===r)),o=null!=t.start?t.start.getTime():null,l=null!=t.end?t.end.getTime():null,u=null==o||null==l||o===l,c=u?[o||l]:[[o,l]],p=this.version>=10.8;if(a.length)a.forEach((e=>{e.dimensionName===r&&(p?(e.dimensionName=null,e.isSlice=!1,e.values=[]):(e.isSlice=u,e.values=c))}));else if(!p){const t=e.multidimensionalDefinition.filter((e=>null!=e.variableName&&null==e.dimensionName));t.length?t.forEach((e=>{e.dimensionName=r,e.isSlice=u,e.values=c})):e.multidimensionalDefinition.push(new Me({variableName:"",dimensionName:r,isSlice:u,values:c}))}return this._cleanupMultidimensionalDefinition(e)}_cleanupMultidimensionalDefinition(e){return null==e?null:(e.multidimensionalDefinition&&(e.multidimensionalDefinition=e.multidimensionalDefinition.filter((e=>!(!e.variableName&&!e.dimensionName))),0===e.multidimensionalDefinition.length&&(e.multidimensionalDefinition=null)),"mosaic-dataset"!==this.sourceType&&null==e.multidimensionalDefinition?null:e)}async _prepareForQuery(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsQuery)throw new B("imagery-layer:query-rasters","query operation is not supported on the input image service");return e=null!=e?U(z,e):this.createQuery(),t=this._getRequestOptions(t),this.raster&&(t.query={...t.query,raster:this.raster}),{query:e,requestOptions:t}}async _initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new Pe;this._rasterJobHandler.connectionPromise=e.initialize().then((()=>{this._rasterJobHandler.instance=e}),(()=>{})),await this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null}_isSupportedRenderer(e){const{rasterInfo:t,rasterFunction:i}=this;return"unique-value"===e.type&&this._hasRasterFunction(i)&&1===t?.bandCount&&["u8","s8"].includes(t.pixelType)||null!=t&&null!=e&&Ie(t).includes(e.type)}async _fetchCapabilities(e){return this.capabilities||await this._fetchServiceInfo(e),this.capabilities}async _fetchServiceInfo(e){let t=this.sourceJSON;if(!t){const{data:i,ssl:s}=await b(o(this.parsedUrl),{query:this._getQueryParams(),signal:e});t=i,this.sourceJSON=t,s&&(this.url=this.url.replace(/^http:/i,"https:"))}if(t.capabilities?.toLowerCase().split(",").map((e=>e.trim())).indexOf("tilesonly")>-1)throw new B("imagery-layer:fetch-service-info","use ImageryTileLayer to open tiles-only image services");this.read(t,{origin:"service",url:this.parsedUrl})}_isMosaicDataset(e){return e.serviceSourceType?"esriImageServiceSourceTypeMosaicDataset"===e.serviceSourceType:e.fields?.length>0}_isMosaicRuleSupported(e){if(!e)return!1;const t=this._isMosaicDataset(e),i=e.currentVersion>=10.71&&e.hasMultidimensions&&!(e.fields?.length>1);return t||i}_isVectorFieldResampleFunction(e){if(null==e)return!1;const{functionName:t,functionArguments:i}=e,s="resample"===t?.toLowerCase(),n=i?.ResampleType||i?.resampleType;return s&&(7===n||10===n)}_isPicture(){return!this.format||this.format.includes("jpg")||this.format.includes("png")}_configRenderer(e){const t=this._isPicture(),{rasterInfo:i}=this;if(!t&&!this.pixelFilter||this._isVectorDataSet()){if(!this.bandIds&&i.bandCount>=3){const e=Fe(i);!e||3===i.bandCount&&0===e[0]&&1===e[1]&&2===e[2]||(this.bandIds=e)}e||(e=xe(i,{bandIds:this.bandIds,variableName:this.rasterFunction?null:this.mosaicRule?.multidimensionalDefinition?.[0].variableName}));const t=De(e.toJSON());this.symbolizer?(this.symbolizer.rendererJSON=t,this.symbolizer.rasterInfo=i):this.symbolizer=new Be({rendererJSON:t,rasterInfo:i}),this.symbolizer.bind().success||(this.symbolizer=null)}return e}_clonePixelData(e){return null==e?e:{extent:e.extent&&e.extent.clone(),pixelBlock:null!=e.pixelBlock?e.pixelBlock.clone():null}}_getQueryParams(e){null!=e?.renderingRule&&"string"!=typeof e.renderingRule&&(e.renderingRule=this._getRenderingRuleString(e.renderingRule));const{raster:t,viewId:i}=this;return{raster:t,viewId:i,f:"json",...e,...this.customParameters}}_getRequestOptions(e){return{...e,query:{...e?.query,...this.customParameters}}}_decodePixelBlock(e,t,i){return this._rasterJobHandler.instance?this._rasterJobHandler.instance.decode({data:e,options:t}):Ue(e,t,i)}async _getRasterFunctionInfos(e){const t=this.sourceJSON.rasterFunctionInfos;if(this.loaded)return t;if(t&&this.version>=10.3){if(1===t.length&&"none"===t[0].name.toLowerCase())return t;const i=await b(o(this.parsedUrl)+"/rasterFunctionInfos",{query:this._getQueryParams(),signal:e});return i.data?.rasterFunctionInfos}return null}_canRequestImageElement(e){return!this.pixelFilter&&(!e||e.includes("png"))}async _requestArrayBuffer(e){const{imageProps:t,requestAsImageElement:i,returnImageBitmap:s,signal:n}=e;if(i&&this._canRequestImageElement(t.format)){const i=`${o(this.parsedUrl)}/exportImage`,{data:r}=await b(i,{responseType:s?"blob":"image",query:this._getQueryParams({f:"image",...this.refreshParameters,...e.imageServiceParameters}),signal:n});if(r instanceof Blob){return{imageBitmap:await He(r,i,n),params:t}}return{imageOrCanvasElement:r,params:t}}const r=this._initJobHandler(),a=b(o(this.parsedUrl)+"/exportImage",{responseType:"array-buffer",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:n}),l=(await Promise.all([a,r]))[0].data,u=t.format||"jpgpng";let c=u;if("bsq"!==c&&"bip"!==c&&(c=ze(l)),!c)throw new B("imagery-layer:fetch-image","unsupported format signature "+String.fromCharCode.apply(null,new Uint8Array(l)));const p={signal:n},m="gif"===u||"bmp"===u||u.includes("png")&&("png"===c||"jpg"===c)?Ue(l,{useCanvas:!0,...t},p):this._decodePixelBlock(l,{width:t.width,height:t.height,planes:null,pixelType:null,noDataValue:null,format:u},p);return{pixelData:{pixelBlock:await m,extent:t.extent},params:t}}_generateRasterInfo(e,t){return this.generateRasterInfo(e,t).catch((()=>null))}_isValidCustomizedMosaicRule(e){return e&&JSON.stringify(e.toJSON())!==JSON.stringify(this.defaultMosaicRule?.toJSON())}_updateMultidimensionalDefinition(e){if(this._isValidCustomizedMosaicRule(this.mosaicRule))return;let t=Ae(e,{multidimensionalSubset:this.multidimensionalSubset});if(null!=t&&t.length>0){this.mosaicRule=this.mosaicRule||new de;const e=this.mosaicRule.multidimensionalDefinition;!this.sourceJSON.defaultVariableName&&this.rasterFunction&&"none"!==this.rasterFunction.functionName?.toLowerCase()&&t.forEach((e=>e.variableName="")),t=t.filter((({variableName:e,dimensionName:t})=>e&&"*"!==e||t)),!e?.length&&t.length&&(this.mosaicRule.multidimensionalDefinition=t)}}_processVisibleRastersResponse(e,t){t=t||{};const i=e.value,{templateRRFunctionNames:s,showNoDataRecords:n,returnDomainValues:r,templateFields:a}=t,o=e.processedValues;let l=e.catalogItems?.features,u=e.properties?.Values?.map((e=>e.replaceAll(/ /gi,", ")))||[];const c=this.objectIdField||"ObjectId",p="string"==typeof i&&i.toLowerCase().includes("nodata"),m=[];if(i&&!l&&!p){const e={};e[c]=0;u=[i],l=[new L(this.fullExtent,null,e)]}if(!l)return[];let h,d,y;this._updateResponseFieldNames(l,a),p&&!n&&(l=[]);for(let e=0;e<l.length;e++){if(h=l[e],null!=i){if(d=u[e],y=this.rasterFunction&&o&&o.length>0&&s&&s.length>0&&s.includes(this.rasterFunction.functionName)?o[s.indexOf(this.rasterFunction.functionName)]:i,"nodata"===d.toLowerCase()&&!n)continue;const t="Raster.ItemPixelValue",r="Raster.ServicePixelValue";h.attributes[t]=d,h.attributes[r]=y,this._updateFeatureWithMagDirValues(h,d);const a=this.fields&&this.fields.length>0;let l=this.rasterFunction&&null!=this.serviceRasterInfo.attributeTable?a?d:i:y;this.rasterFunction||(l=a?d:i),this._updateFeatureWithRasterAttributeTableValues(h,l)}if(h.sourceLayer=h.layer=this,r&&this._updateFeatureWithDomainValues(h),s&&o&&s.length===o.length)for(let e=0;e<s.length;e++){const t="Raster.ServicePixelValue."+s[e];h.attributes[t]=o[e]}m.push(l[e])}return m}_processMultidimensionalIntersection(e,t,i){const{multidimensionalSubset:s}=this;if(!s)return{isOutSide:!1,timeExtent:t,mosaicRule:i=this._combineMosaicRuleWithTimeExtent(i,t)};if(s){const{isOutside:i,intersection:n}=Te(s,{geometry:e,timeExtent:t});if(i)return{isOutSide:!0,timeExtent:null,mosaicRule:null};null!=n?.timeExtent&&(t=n.timeExtent)}if(i=this._combineMosaicRuleWithTimeExtent(i,t),i?.multidimensionalDefinition){const{isOutside:e}=Te(s,{multidimensionalDefinition:i.multidimensionalDefinition});if(e)return{isOutSide:!0,timeExtent:null,mosaicRule:null}}return{isOutSide:!1,timeExtent:t,mosaicRule:i}}_updateFeatureWithRasterAttributeTableValues(e,t){const i=this.rasterInfo.attributeTable||this.serviceRasterInfo.attributeTable;if(null==i)return;const{features:s,fields:n}=i,r=n.map((e=>e.name)).find((e=>"value"===e.toLowerCase()));if(!r)return;const a=s.filter((e=>e.attributes[r]===(null!=t?parseInt(t,10):null)));a&&a[0]&&n.forEach((t=>{const i=this._rasterAttributeTableFieldPrefix+t.name;e.attributes[i]=a[0].attributes[t.name]}))}_updateFeatureWithMagDirValues(e,t){if(!this._isVectorDataSet())return;const i=t.split(/,\s*/).map((e=>parseFloat(e))),s=i.map((e=>[e])),n=i.map((e=>({minValue:e,maxValue:e,noDataValue:null}))),r=new Le({height:1,width:1,pixelType:"f32",pixels:s,statistics:n});null!=this.pixelFilter&&this.pixelFilter({pixelBlock:r,extent:new y(0,0,0,0,this.spatialReference)});const a="esriImageServiceDataTypeVector-MagDir"===this.serviceDataType?[r.pixels[0][0],r.pixels[1][0]]:Je([r.pixels[0][0],r.pixels[1][0]]);e.attributes["Raster.Magnitude"]=a[0],e.attributes["Raster.Direction"]=a[1]}_updateFeatureWithDomainValues(e){const t=this.fields&&this.fields.filter((e=>e.domain&&"coded-value"===e.domain.type));null!=t&&t.forEach((t=>{const i=e.attributes[t.name];if(null!=i){const s=t.domain.codedValues.find((e=>e.code===i));s&&(e.attributes[t.name]=s.name)}}))}_updateResponseFieldNames(e,t){if(!t||t.length<1)return;const i=this.fieldsIndex;null!=i&&e.forEach((e=>{if(e?.attributes)for(const s of t){const t=i.get(s)?.name;t&&t!==s&&(e.attributes[s]=e.attributes[t],delete e.attributes[t])}}))}_getRenderingRuleString(e){if(e){let t=e.toJSON();return t=t.rasterFunctionDefinition??t,(t.thumbnail||t.thumbnailEx)&&(t.thumbnail=t.thumbnailEx=null),JSON.stringify(t)}return null}_hasRasterFunction(e){return null!=e?.functionName&&"none"!==e.functionName.toLowerCase()}_updateRenderingRulesFunctionName(e,t){if(!e||e.length<1)return;if("Raw"===e)return e.replace("Raw","None");const i=e.toLowerCase().replaceAll(/ /gi,"_");return t.has(i)?t.get(i):e}_isRFTJson(e){return e?.name&&e.arguments&&e.function&&e.hasOwnProperty("functionType")}_isVectorDataSet(){return"esriImageServiceDataTypeVector-UV"===this.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===this.serviceDataType}_applyMosaicAndRenderingRules(e){const{raster:t,mosaicRule:i,rasterFunction:s}=this;s&&e instanceof Re&&null==e.rasterFunction&&(e.rasterFunction=s),i&&null==e.mosaicRule&&(e.mosaicRule=i),t&&null==e.raster&&(e.raster=t)}_readCapabilities(e){const t=e.capabilities?e.capabilities.toLowerCase().split(",").map((e=>e.trim())):["image","catalog"],{currentVersion:i,advancedQueryCapabilities:s,maxRecordCount:n}=e,r=t.includes("image"),a="esriImageServiceDataTypeElevation"===e.serviceDataType,o=!(!e.spatialReference&&!e.extent?.spatialReference),l=t.includes("edit"),u=t.includes("mensuration")&&o,c=null==e.mensurationCapabilities?[]:e.mensurationCapabilities.toLowerCase().split(",").map((e=>e.trim())),p=u&&c.includes("basic"),m=this._isMosaicDataset(e)&&t.includes("catalog"),h=t.includes("download");return{data:{supportsAttachment:!1},operations:{supportsComputeHistograms:r,supportsExportImage:r,supportsIdentify:r,supportsImageToMap:i>=11.2&&m,supportsImageToMapMultiray:i>=11.2&&m,supportsMapToImage:i>=11.2&&m,supportsFindImages:i>=11.2&&m,supportsGetImageUrl:i>=11.2&&h,supportsMeasure:u,supportsMeasureFromImage:i>=11.2,supportsDownload:h,supportsQuery:m&&e.fields&&e.fields.length>0,supportsGetSamples:i>=10.2&&r,supportsProject:i>=10.3&&r,supportsComputeStatisticsHistograms:i>=10.4&&r,supportsQueryBoundary:i>=10.6&&r,supportsCalculateVolume:i>=10.7&&a,supportsComputePixelLocation:i>=10.7&&m,supportsComputeAngles:i>=10.91,supportsQueryGPSInfo:i>=11.2&&m,supportsAdd:l,supportsDelete:l,supportsEditing:l,supportsUpdate:l,supportsCalculate:!1,supportsTruncate:!1,supportsValidateSql:!1,supportsChangeTracking:!1,supportsQueryAttachments:!1,supportsResizeAttachments:!1,supportsSync:!1,supportsExceedsLimitStatistics:!1,supportsQueryAnalytics:!1,supportsQueryTopFeatures:!1,supportsAsyncConvert3D:!1},query:{maxRecordCount:n,maxRecordCountFactor:void 0,supportsStatistics:!!s?.supportsStatistics,supportsOrderBy:!!s?.supportsOrderBy,supportsDistinct:!!s?.supportsDistinct,supportsPagination:!!s?.supportsPagination,supportsStandardizedQueriesOnly:!!s?.useStandardizedQueries,supportsPercentileStatistics:!!s?.supportsPercentileStatistics,supportsCentroid:!!s?.supportsReturningGeometryCentroid,supportsDistance:!!s?.supportsQueryWithDistance,supportsExtent:!!s?.supportsReturningQueryExtent,supportsGeometryProperties:!!s?.supportsReturningGeometryProperties,supportsHavingClause:!!s?.supportsHavingClause,supportsQuantization:!1,supportsQuantizationEditMode:!1,supportsQueryGeometry:!1,supportsResultType:!1,supportsMaxRecordCountFactor:!1,supportsSqlExpression:!1,supportsTopFeaturesQuery:!1,supportsQueryByAnonymous:!1,supportsQueryByOthers:!1,supportsHistoricMoment:!1,supportsFormatPBF:!1,supportsDisjointSpatialRelationship:!1,supportsCacheHint:!1,supportsSpatialAggregationStatistics:!1,supportedSpatialAggregationStatistics:{envelope:!1,centroid:!1,convexHull:!1},supportsDefaultSpatialReference:!!s?.supportsDefaultSR,supportsFullTextSearch:!1,supportsCompactGeometry:!1,standardMaxRecordCount:void 0,tileMaxRecordCount:void 0},mensuration:{supportsDistanceAndAngle:p,supportsAreaAndPerimeter:p,supportsPointOrCentroid:p,supportsHeightFromBaseAndTop:u&&c.includes("base-top height"),supportsHeightFromBaseAndTopShadow:u&&c.includes("base-top shadow height"),supportsHeightFromTopAndTopShadow:u&&c.includes("top-top shadow height"),supports3D:u&&c.includes("3d")}}}};function o(e){return e?.path??""}return s([n({clonable:!1})],i.prototype,"_functionRasterInfos",void 0),s([n({clonable:!1})],i.prototype,"_rasterJobHandler",void 0),s([n({clonable:!1})],i.prototype,"_cachedRendererJson",void 0),s([n({readOnly:!0})],i.prototype,"_serviceSupportsMosaicRule",void 0),s([h("_serviceSupportsMosaicRule",["currentVersion","fields"])],i.prototype,"readServiceSupportsMosaicRule",null),s([n({readOnly:!0})],i.prototype,"_rasterAttributeTableFieldPrefix",void 0),s([n({readOnly:!0})],i.prototype,"_rasterFunctionNamesIndex",null),s([n()],i.prototype,"adjustAspectRatio",void 0),s([n({type:[x],json:{write:!0}})],i.prototype,"bandIds",void 0),s([h("bandIds")],i.prototype,"readBandIds",null),s([n({readOnly:!0,json:{read:!1}})],i.prototype,"capabilities",void 0),s([h("service","capabilities",["capabilities","currentVersion","serviceDataType"])],i.prototype,"readCapabilities",null),s([n({type:Number})],i.prototype,"compressionQuality",void 0),s([r("compressionQuality")],i.prototype,"writeCompressionQuality",null),s([n({type:Number})],i.prototype,"compressionTolerance",void 0),s([r("compressionTolerance")],i.prototype,"writeCompressionTolerance",null),s([n({json:{read:{source:"copyrightText"}}})],i.prototype,"copyright",void 0),s([n({readOnly:!0,dependsOn:["_serviceSupportsMosaicRule"]})],i.prototype,"defaultMosaicRule",void 0),s([h("defaultMosaicRule",["defaultMosaicMethod"])],i.prototype,"readDefaultMosaicRule",null),s([n({type:String,json:{name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],i.prototype,"definitionExpression",void 0),s([n({readOnly:!0,constructOnly:!0})],i.prototype,"exportImageServiceParameters",void 0),s([n()],i.prototype,"rasterInfo",void 0),s([n({readOnly:!0,type:[O]})],i.prototype,"fields",void 0),s([n({readOnly:!0})],i.prototype,"fieldsIndex",null),s([n({type:["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"],json:{write:!0}})],i.prototype,"format",null),s([h("service","format",["serviceDataType"])],i.prototype,"readFormat",null),s([n({type:y})],i.prototype,"fullExtent",void 0),s([n({readOnly:!0})],i.prototype,"hasMultidimensions",void 0),s([n({json:{read:{source:"maxImageHeight"}}})],i.prototype,"imageMaxHeight",void 0),s([n({json:{read:{source:"maxImageWidth"}}})],i.prototype,"imageMaxWidth",void 0),s([n({type:String,json:{type:me.jsonValues,read:me.read,write:me.write}})],i.prototype,"interpolation",void 0),s([n()],i.prototype,"minScale",void 0),s([h("service","minScale")],i.prototype,"readMinScale",null),s([n()],i.prototype,"maxScale",void 0),s([h("service","maxScale")],i.prototype,"readMaxScale",null),s([n({type:de})],i.prototype,"mosaicRule",null),s([h("mosaicRule",["mosaicRule","defaultMosaicMethod"])],i.prototype,"readMosaicRule",null),s([r("mosaicRule")],i.prototype,"writeMosaicRule",null),s([n()],i.prototype,"multidimensionalInfo",void 0),s([n({type:ye,json:{write:!0}})],i.prototype,"multidimensionalSubset",void 0),s([n({json:{type:x}})],i.prototype,"noData",void 0),s([r("noData")],i.prototype,"writeNoData",null),s([n({type:String,json:{type:he.jsonValues,read:he.read,write:he.write}})],i.prototype,"noDataInterpretation",void 0),s([n({type:String,readOnly:!0,json:{read:{source:["fields"]}}})],i.prototype,"objectIdField",void 0),s([h("objectIdField")],i.prototype,"readObjectIdField",null),s([n({readOnly:!0})],i.prototype,"geometryType",void 0),s([n({})],i.prototype,"typeIdField",void 0),s([n({})],i.prototype,"types",void 0),s([n({readOnly:!0})],i.prototype,"parsedUrl",null),s([n({type:Function})],i.prototype,"pixelFilter",void 0),s([n()],i.prototype,"raster",void 0),s([n({readOnly:!0})],i.prototype,"sourceType",void 0),s([h("sourceType",["serviceSourceType","fields"])],i.prototype,"readSourceType",null),s([n()],i.prototype,"viewId",void 0),s([n({types:ge,json:{name:"layerDefinition.drawingInfo.renderer",origins:{"web-scene":{types:fe,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type&&"flow"!==e.type})}}}}})],i.prototype,"renderer",null),s([h("renderer")],i.prototype,"readRenderer",null),s([r("renderer")],i.prototype,"writeRenderer",null),s([n({clonable:!1})],i.prototype,"symbolizer",void 0),s([n(G)],i.prototype,"opacity",void 0),s([n({readOnly:!0})],i.prototype,"rasterFields",null),s([n({constructOnly:!0})],i.prototype,"rasterFunctionInfos",void 0),s([n({type:pe})],i.prototype,"renderingRule",null),s([n({type:pe,json:{name:"renderingRule"}})],i.prototype,"rasterFunction",null),s([h("rasterFunction",["renderingRule","rasterFunctionInfos"])],i.prototype,"readRasterFunction",null),s([n({readOnly:!0})],i.prototype,"serviceDataType",void 0),s([n({readOnly:!0,type:u})],i.prototype,"spatialReference",void 0),s([h("spatialReference",["spatialReference","extent"])],i.prototype,"readSpatialReference",null),s([n({json:{type:we.jsonValues}})],i.prototype,"pixelType",void 0),s([h("pixelType")],i.prototype,"readPixelType",null),s([r("pixelType")],i.prototype,"writePixelType",null),s([n({constructOnly:!0,type:Ee})],i.prototype,"serviceRasterInfo",void 0),s([n()],i.prototype,"sourceJSON",void 0),s([n(q)],i.prototype,"url",void 0),s([n({readOnly:!0})],i.prototype,"version",void 0),s([h("version",["currentVersion","fields","timeInfo"])],i.prototype,"readVersion",null),i=s([a("esri.layers.mixins.ArcGISImageService")],i),i};let xs=class extends($(Q(W(K(Z(Fs(X(Y(ee(te(F(ie)))))))))))){constructor(...e){super(...e),this.isReference=null,this.operationalLayerType="ArcGISImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.type="imagery",this._debouncedSaveOperations=se((async(e,t,i)=>{const{save:s,saveAs:n}=await import("./p-4a6d3a75.js");switch(e){case ne.SAVE:return s(this,t);case ne.SAVE_AS:return n(this,i,t)}}))}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(re).then((()=>this._fetchService(t)))),Promise.resolve(this)}get legendEnabled(){return!this._isPreviewLayer&&(this._get("legendEnabled")??!0)}set legendEnabled(e){this._set("legendEnabled",e)}get listMode(){return this._isPreviewLayer?"hide":this._get("listMode")}set listMode(e){this._set("listMode",e)}writeOperationalLayerType(e,t,i){const s="vector-field"===this.renderer?.type;t[i]=s?"ArcGISImageServiceVectorLayer":"ArcGISImageServiceLayer"}get defaultPopupTemplate(){return this.createPopupTemplate()}get _isPreviewLayer(){return!(!this.raster||!this.url?.toLowerCase().includes("/rasterrendering/imageserver"))}createPopupTemplate(e){const t=this.rasterFields,i=this.title,s=new Set;let n=!1,r=!1;this.capabilities&&(n=this.capabilities.operations.supportsQuery&&this.fields&&this.fields.length>0,r="esriImageServiceDataTypeVector-UV"===this.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===this.serviceDataType);const a=new Set;n&&a.add("raster.itempixelvalue");for(const e of t){const t=e.name.toLowerCase();a.has(t)||t.includes("raster.servicepixelvalue.")||s.add(e.name)}r&&s.add("raster.magnitude").add("raster.direction");const o=ae({fields:t,title:i},{...e,visibleFieldNames:s});return o?.fieldInfos&&this.rasterInfo?.pixelType.startsWith("f")&&o.fieldInfos.forEach((({format:e,fieldName:t})=>{e&&/^raster\.(item|service)pixelvalue/i.test(t)&&(e.places=2)})),o}queryFeatures(e,t){return this.queryRasters(e,t).then((e=>{if(e?.features)for(const t of e.features)t.layer=t.sourceLayer=this;return e}))}queryFeatureCount(e,t){return this.queryRasterCount(e,t)}redraw(){this.emit("redraw")}async save(e){return this._debouncedSaveOperations(ne.SAVE,e)}async saveAs(e,t){return this._debouncedSaveOperations(ne.SAVE_AS,t,e)}serviceSupportsSpatialReference(e){return oe(this,e)}write(e,t){if(!this._isPreviewLayer)return super.write(e,t);if(t?.messages){const e=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new B("layer:unsupported",`Imagery preview layer (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e}'`,{layer:this}))}return null}};s([n(le)],xs.prototype,"legendEnabled",null),s([n({type:["show","hide"]})],xs.prototype,"listMode",null),s([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],xs.prototype,"isReference",void 0),s([n({type:["ArcGISImageServiceLayer"],json:{origins:{"web-map":{type:["ArcGISImageServiceLayer","ArcGISImageServiceVectorLayer"],read:!1,write:{target:"layerType",ignoreOrigin:!0}}}}})],xs.prototype,"operationalLayerType",void 0),s([r("web-map","operationalLayerType")],xs.prototype,"writeOperationalLayerType",null),s([n(ue)],xs.prototype,"popupEnabled",void 0),s([n({type:ce,json:{read:{source:"popupInfo"},write:{target:"popupInfo"}}})],xs.prototype,"popupTemplate",void 0),s([n({readOnly:!0})],xs.prototype,"defaultPopupTemplate",null),s([n({readOnly:!0,json:{read:!1}})],xs.prototype,"type",void 0),s([n({readOnly:!0})],xs.prototype,"_isPreviewLayer",null),xs=s([a("esri.layers.ImageryLayer")],xs);const Ds=xs;export default Ds;
//# sourceMappingURL=p-8623e3c4.js.map