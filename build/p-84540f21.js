import{nz as s,cH as t,h as e,e5 as o,nA as n,bl as r,d5 as a,U as i,W as c,ds as u,dv as l,du as p,s as f,df as d,bm as m}from"./p-3013819f.js";import{h,i as w,o as y,N as g,A as b}from"./p-4fb66b05.js";import{r as T,n as A,c as j,u as P,p as I,a as E,d as F,l as v,t as M}from"./p-dc0c3631.js";import{u as N,s as S,i as D}from"./p-c2c5c63d.js";import"./p-3b51db5e.js";const q={upload:{createFromFiles:.8,loadMesh:.2},uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};function x(s,t=(s=>{}),e){return new B(s,t,e)}class B{constructor(s,t=(s=>{}),e){if(this.onProgress=t,this.taskName=e,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,"number"==typeof s){this._weights={};for(let t=0;t<s;t++){const e=t,o=1/s;this._weights[e]=o,this._progressMap.set(e,0)}}else this._weights=s;this.emitProgress()}emitProgress(){let s=0;for(const[t,e]of this._progressMap.entries()){s+=e*this._weights[t]}if(1===s&&e("enable-feature:esri-3dofl-upload-timings")){const s=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${s} sec`);for(const[t,e]of this._timingsMap){const o=Math.round(e.end-e.start)/1e3,n=Math.round(o/s*100);console.log(this.taskName??"Task",{stepKey:t,stepTime:o,relativeTime:n})}}this.onProgress(s)}setProgress(s,t){if(this._progressMap.set(s,t),e("enable-feature:esri-3dofl-upload-timings")){const e=performance.now();this._startTime??=e;const n=o(this._timingsMap,s,(()=>({start:e,end:0})));1===t&&(n.end=e)}this.emitProgress()}simulate(s,t){return C((t=>this.setProgress(s,t)),t)}makeOnProgress(s){return t=>this.setProgress(s,t)}}function C(s=(s=>{}),e=O){const o=performance.now();s(0);const n=setInterval((()=>{const t=performance.now()-o,n=1-Math.exp(-t/e);s(n)}),L);return t((()=>{clearInterval(n),s(1)}))}function $(t,e=U){return s(n(t*H/e))}function R(t,e=k){return s(n(t*H/e))}const U=10,k=10,H=8e-6,L=r(50),O=r(1e3);const G=1e6,J=20*G,W=2e9,_=3;async function z({data:s,name:t,description:e},o,n){let r=null;try{const l=a(o,"uploads"),p=a(l,"info"),{data:f}=await i(p,{query:{f:"json"},responseType:"json"});c(n);const d=u(o),m=f.maxUploadFileSize*G,h=d?W:m,w=d?Math.min(J,m):J;if(s.size>h)throw new Error("Data too large");const y=a(l,"register"),{data:g}=await i(y,{query:{f:"json",itemName:K(t),description:e},responseType:"json",method:"post"});if(c(n),!g.success)throw new Error("Registration failed");const{itemID:b}=g.item;r=a(l,b);const T=a(r,"uploadPart"),A=Math.ceil(s.size/w),j=new Array;for(let t=0;t<A;++t)j.push(s.slice(t*w,Math.min((t+1)*w,s.size)));const P=j.slice().reverse(),I=new Array,E=x(A,n?.onProgress,"uploadItem"),F=async()=>{for(;0!==P.length;){const s=j.length-P.length,t=P.pop(),e=new FormData,o=E.simulate(s,$(t.size));try{e.append("f","json"),e.append("file",t),e.append("partId",`${s}`);const{data:r}=await i(T,{timeout:0,body:e,responseType:"json",method:"post"});if(c(n),!r.success)throw new Error("Part upload failed")}finally{o.remove()}}};for(let s=0;s<_&&0!==P.length;++s)I.push(F());await Promise.all(I);const v=a(r,"commit"),{data:M}=await i(v,{query:{f:"json",parts:j.map(((s,t)=>t)).join(",")},responseType:"json",method:"post"});if(c(n),!M.success)throw new Error("Commit failed");return M.item}catch(s){if(null!=r){const s=a(r,"delete");await i(s,{query:{f:"json"},responseType:"json",method:"post"})}throw s}}function K(s){return s.replaceAll("/","_").replaceAll("\\","_")}async function Q(s,t,e){const o=s.length;if(!o)return e?.onProgress?.(1),[];const n=x(o,e?.onProgress,"uploadAssets");return Promise.all(s.map(((s,o)=>V(s,t,{...e,onProgress:n.makeOnProgress(o)}))))}async function V(s,{layer:t,ongoingUploads:e},o){const n=e.get(s);if(n)return n;if(!ws(t))throw new T;if(X(s,t))return o?.onProgress?.(1),s;const r=Y(s,t,o);e.set(s,r);try{await r}finally{e.delete(s)}return s}function X(s,t){const{parsedUrl:e}=t;return null!=e&&s.metadata.externalSources.some((s=>h(s,e)))}async function Y(s,t,e){const{metadata:o}=s,{displaySource:n}=o,r=ns(n?.source,t),a=!!r,i=o.externalSources.length>0,u=a?Z(r,t,e):i?ss(s,t,e):ts(s,t,e),l=await u;return c(e),s.addExternalSources([l]),s}async function Z(s,t,e){return{source:await as(s,t,e),original:!0}}async function ss(s,t,e){const o=ys(t),{externalSources:n}=s.metadata,r=os(n,t);if(!r)throw new A;const a=x(q.uploadConvertibleSource,e?.onProgress,"uploadConvertibleSource"),i=await as(r,t,{onProgress:a.makeOnProgress("uploadEditSource")});s.addExternalSources([{source:i,original:!0}]);const c=r.reduce(((s,{asset:t})=>t instanceof File?s+t.size:s),0),u=a.simulate("serviceAssetsToGlb",R(c));try{return{source:await ds(i,t,o)}}finally{u.remove()}}async function ts(s,t,e){const o=x(q.uploadLocalMesh,e?.onProgress,"uploadLocalMesh"),n=es(s,t,{...e,onProgress:o.makeOnProgress("meshToAssetBlob")});return{source:await is([n],t,{...e,onProgress:o.makeOnProgress("uploadAssetBlobs")}),extent:s.extent.clone(),original:!0}}async function es(s,t,e){const o=ys(t),n=await s.load(e),r=await n.toBinaryGLTF({ignoreLocalTransform:!0});c(e);const a=await r.buffer();return c(e),{blob:new Blob([a.data],{type:a.type}),assetName:`${l()}.glb`,assetType:o}}function os(s,t){for(const e of s){const s=ns(e.source,t);if(s)return s}return null}function ns(s,t){if(!s)return null;const{infoFor3D:{supportedFormats:e,editFormats:o}}=t,n=b(s),r=new Array;let a=!1;for(let s=0;s<n.length;++s){const t=rs(n[s],e);if(!t)return null;o.includes(t.assetType)&&(a=!0),r.push(t)}return a?r:null}function rs(s,t){const e=g(s,t);return e?{asset:s,assetType:e}:null}async function as(s,t,e){return is(s.map((s=>cs(s,e))),t,e)}async function is(s,t,e){const o=x(q.uploadAssetBlobs,e?.onProgress,"uploadAssetBlobs"),n=await ls(s,t,{...e,onProgress:o.makeOnProgress("prepareAssetItems")});c(e);const r=n.map((({item:s})=>s)),{uploadResults:a}=await ps(r,t,{...e,onProgress:o.makeOnProgress("uploadAssetItems")});return c(e),s.map(((s,e)=>fs(n[e],a[e],t)))}async function cs(s,t){const{asset:e,assetType:o}=s;if(e instanceof File)return{blob:e,assetName:e.name,assetType:o};const n=await e.toBlob(t);return c(t),{blob:n,assetName:e.assetName,assetType:o}}async function us(s,t,e){const{blob:o,assetType:n,assetName:r}=s;let a=null;try{const s=await z({data:o,name:r},t.url,e);c(e),a={assetType:n,assetUploadId:s.itemID}}catch(s){p(s),gs().warnOnce(`Service ${t.url} does not support the REST Uploads API.`)}if(!a){const s=await d(o);if(c(e),!s.isBase64)throw new P;a={assetType:n,assetData:s.data}}if(!a)throw new I;return{item:a,assetName:r}}function ls(s,t,e){const o=x(s.length,e?.onProgress,"prepareAssetItems");return Promise.all(s.map((async(s,n)=>{const r=us(await s,t,{...e,onProgress:o.makeOnProgress(n)});return c(e),r})))}async function ps(s,t,e){const o=C(e?.onProgress);try{const o=await i(a(t.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(s)},method:"post",responseType:"json"});if(c(e),o.data.uploadResults.length!==s.length)throw new E(s.length,o.data.uploadResults.length);return o.data}finally{o.remove()}}function fs(s,t,e){const{success:o}=t;if(!o){const{error:e}=t;throw new F(s.assetName,e)}const{assetHash:n}=t,{assetName:r,item:{assetType:a}}=s,{infoFor3D:{supportedFormats:i}}=e,c=S(a,i);if(!c)throw new j(a);return new w(r,c,[new y(`${e.parsedUrl.path}/assets/${n}`,n)])}async function ds(s,t,e){const o=s.map((({assetName:s,parts:t})=>({assetName:s,assetHash:t[0].partHash}))),n=t.capabilities?.operations.supportsAsyncConvert3D,r={f:"json",assets:JSON.stringify(o),transportType:"esriTransportTypeUrl",targetFormat:e,async:n},i=a(t.parsedUrl.path,"convert3D");let c;try{c=(await(n?hs:ms)(i,{query:r,responseType:"json",timeout:0})).data}catch(s){throw new v}const{supportedFormats:u}=t.infoFor3D;return c.assets.map((s=>{const t=N(s.contentType,u);if(!t)throw new j(t);return new w(s.assetName,s.contentType,[new y(s.assetURL,s.assetHash)])}))}function ms(s,t){return i(s,t)}async function hs(s,t){const e=(await i(s,t)).data.statusUrl;for(;;){const s=(await i(e,{query:{f:"json"},responseType:"json"})).data;switch(s.status){case"Completed":return i(s.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(s.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await m(bs)}}function ws(s){return!!s.infoFor3D&&!!s.url}function ys(s){const{infoFor3D:t}=s,e=N("model/gltf-binary",t.supportedFormats)??D("glb",t.supportedFormats);if(!e)throw new M;return e}function gs(){return f.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const bs=r(1e3);export{Q as uploadAssets};
//# sourceMappingURL=p-84540f21.js.map