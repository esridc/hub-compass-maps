import{d9 as r,a as e,cM as n,cL as t,du as a,U as i,dq as s}from"./p-028496e2.js";async function o(n,t){const a=r(n);if(!a)throw new e("invalid-url","Invalid scene service url");const i={...t,sceneServerUrl:a.url.path,layerId:a.sublayer??void 0};if(i.sceneLayerItem??=await l(i),null==i.sceneLayerItem)return f(i.sceneServerUrl.replace("/SceneServer","/FeatureServer"),i);const s=await y(i);if(!s?.url)throw new e("related-service-not-found","Could not find feature service through portal item relationship");i.featureServiceItem=s;const o=await f(s.url,i);return o.portalItem=s,o}async function l(r){const e=(await u(r)).serviceItemId;if(!e)return null;const i=new n({id:e,apiKey:r.apiKey}),s=await c(r);null!=s&&(i.portal=new t({url:s}));try{return i.load({signal:r.signal})}catch(r){return a(r),null}}async function u(r){if(r.rootDocument)return r.rootDocument;const e={query:{f:"json",...r.customParameters,token:r.apiKey},responseType:"json",signal:r.signal};try{const n=await i(r.sceneServerUrl,e);r.rootDocument=n.data}catch{r.rootDocument={}}return r.rootDocument}async function c(r){const e=s?.findServerInfo(r.sceneServerUrl);if(e?.owningSystemUrl)return e.owningSystemUrl;const n=r.sceneServerUrl.replace(/(.*\/rest)\/.*/i,"$1")+"/info";try{const e=(await i(n,{query:{f:"json"},responseType:"json",signal:r.signal})).data.owningSystemUrl;if(e)return e}catch(r){a(r)}return null}async function f(n,t){const a=r(n);if(!a)throw new e("invalid-feature-service-url","Invalid feature service url");const s=a.url.path,o=t.layerId;if(null==o)return{serverUrl:s};const l=u(t),c=t.featureServiceItem?await t.featureServiceItem.fetchData("json"):null,f=(c?.layers?.[0]||c?.tables?.[0])?.customParameters,y=r=>{const e={query:{f:"json",...f},responseType:"json",authMode:r,signal:t.signal};return i(s,e)},w=y("anonymous").catch((()=>y("no-prompt"))),[d,v]=await Promise.all([w,l]),p=v?.layers,h=d.data&&d.data.layers;if(!Array.isArray(h))throw new Error("expected layers array");if(Array.isArray(p))for(let r=0;r<Math.min(p.length,h.length);r++){if(p[r].id===o)return{serverUrl:s,layerId:h[r].id}}else if(null!=o&&o<h.length)return{serverUrl:s,layerId:h[o].id};throw new Error("could not find matching associated sublayer")}async function y({sceneLayerItem:r,signal:e}){if(!r)return null;try{const t=(await r.fetchRelatedItems({relationshipType:"Service2Service",direction:"reverse"},{signal:e})).find((r=>"Feature Service"===r.type))||null;if(!t)return null;const a=new n({portal:t.portal,id:t.id});return await a.load(),a}catch(r){return a(r),null}}export{o as s};
//# sourceMappingURL=p-abeef152.js.map