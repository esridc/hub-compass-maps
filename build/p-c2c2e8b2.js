import{x as e}from"./p-aad64c9f.js";import{u as t}from"./p-dc92c2ea.js";class n{constructor(e){this.data=e,this.type="encoded-mesh-texture",this.encoding=t.KTX2_ENCODING}}function r(e){return"encoded-mesh-texture"===e?.type}async function o(e){const t=new Blob([e]),n=await t.text();return JSON.parse(n)}async function c(r,o){if(o===t.KTX2_ENCODING)return new n(r);const c=new Blob([r],{type:o}),s=URL.createObjectURL(c),a=new Image;if(e("esri-iPhone"))return new Promise(((e,t)=>{const n=()=>{o(),e(a)},r=e=>{o(),t(e)},o=()=>{URL.revokeObjectURL(s),a.removeEventListener("load",n),a.removeEventListener("error",r)};a.addEventListener("load",n),a.addEventListener("error",r),a.src=s}));try{a.src=s,await a.decode()}catch(e){console.warn("Failed decoding HTMLImageElement")}return URL.revokeObjectURL(s),a}export{o as n,c as o,r,n as t};
//# sourceMappingURL=p-c2c2e8b2.js.map