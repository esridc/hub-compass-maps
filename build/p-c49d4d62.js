import{az as t,ki as i,bD as s,F as r,hc as e,w as o,r as p,p as h,q as n}from"./p-aad64c9f.js";import{c as a,y as c,C as m,T as l,j as u,S as f,w as j}from"./p-8e63cf87.js";import{j as d,y as b}from"./p-bbb18646.js";import{t as g}from"./p-d8c74537.js";import{F as w}from"./p-4f2b7ad8.js";import"./p-2af77f97.js";import"./p-3f2fef32.js";import"./p-31b7e91d.js";import"./p-23e8befe.js";import"./p-2d2f231a.js";import"./p-17d8c81f.js";import"./p-dc645a50.js";import"./p-1c4b55c0.js";import"./p-2ea4a2b9.js";import"./p-22458323.js";import"./p-7ce0ff48.js";import"./p-a0004a96.js";import"./p-d6556377.js";import"./p-682c165c.js";import"./p-44881b12.js";import"./p-e7002be3.js";import"./p-717596a8.js";import"./p-204b6b8c.js";import"./p-9ad0e060.js";import"./p-c0b174ee.js";import"./p-875cbb57.js";import"./p-da522976.js";import"./p-aff89b86.js";import"./p-d492d39b.js";import"./p-591e796f.js";import"./p-559f4b2d.js";import"./p-7281a451.js";import"./p-b947b9d2.js";import"./p-b8a25c33.js";import"./p-e7a66915.js";import"./p-deddb82e.js";import"./p-fa2632fc.js";import"./p-4295487d.js";import"./p-1c285990.js";import"./p-e3657bc3.js";import"./p-bac7b09c.js";import"./p-2250105d.js";const y=["route-info","direction-line","direction-point","polygon-barrier","polyline-barrier","point-barrier","stop"],_={graphic:null,property:null,oldValue:null,newValue:null};function v(t){return t instanceof a||t instanceof c||t instanceof m||t instanceof l||t instanceof u||t instanceof f||t instanceof j}function F(i){return t.isCollection(i)&&i.length&&v(i.at(0))}function I(t){return Array.isArray(t)&&t.length>0&&v(t[0])}const V=new Set(["default"]);let k=class extends(d(b)){constructor(){super(...arguments),this._graphics=new t,this._highlightIds=new Map,this._networkFeatureMap=new Map,this._networkGraphicMap=new Map}get _routeItems(){return new i({getCollections:()=>null==this.layer||this.destroyed?[]:[null!=this.layer.routeInfo?new t([this.layer.routeInfo]):null,this.layer.directionLines,this.layer.directionPoints,this.layer.polygonBarriers,this.layer.polylineBarriers,this.layer.pointBarriers,this.layer.stops]})}initialize(){this._updatingHandles.addOnCollectionChange((()=>this._routeItems),(t=>this._routeItemsChanged(t)),s)}destroy(){this._networkFeatureMap.clear(),this._networkGraphicMap.clear(),this._graphics.removeAll(),this._get("_routeItems")?.destroy()}attach(){this._createGraphicsView()}detach(){this._destroyGraphicsView()}async fetchPopupFeaturesAtLocation(t,i){return this._graphicsView.hitTest(t).filter((({popupTemplate:t})=>!!t))}highlight(t){let i;i=v(t)?[this._getNetworkFeatureUid(t)]:I(t)?t.map((t=>this._getNetworkFeatureUid(t))):F(t)?t.map((t=>this._getNetworkFeatureUid(t))).toArray():[t.uid];const s=i.filter(r);return s.length?(this._addHighlight(s),e((()=>this._removeHighlight(s)))):e()}async hitTest(t,i){if(this.suspended)return null;const s=this._graphicsView.hitTest(t).filter(r).map((t=>this._networkGraphicMap.get(t)));if(!s.length)return null;const{layer:e}=this;return s.reverse().map((i=>({type:"route",layer:e,mapPoint:t,networkFeature:i})))}isUpdating(){return this._graphicsView.updating}moveEnd(){}update(t){this._graphicsView.processUpdate(t)}viewChange(){this._graphicsView.viewChange()}_addHighlight(t){for(const i of t)if(this._highlightIds.has(i)){const t=this._highlightIds.get(i);this._highlightIds.set(i,t+1)}else this._highlightIds.set(i,1);this._updateHighlight()}_createGraphic(t){const i=t.toGraphic();return i.layer=this.layer,i.sourceLayer=this.layer,i}_createGraphicsView(){const t=this.view,i=()=>this.requestUpdate(),s=new g(t.featuresTilingScheme);this._graphicsView=new w({container:s,graphics:this._graphics,requestUpdateCallback:i,view:t}),this.container.addChild(s),this._updateHighlight()}_destroyGraphicsView(){this.container.removeChild(this._graphicsView.container),this._graphicsView.destroy()}_getDrawOrder(t){const i=this._networkGraphicMap.get(t);return y.indexOf(i.type)}_getNetworkFeatureUid(t){return this._networkFeatureMap.has(t)?this._networkFeatureMap.get(t).uid:null}_removeHighlight(t){for(const i of t)if(this._highlightIds.has(i)){const t=this._highlightIds.get(i)-1;0===t?this._highlightIds.delete(i):this._highlightIds.set(i,t)}this._updateHighlight()}_routeItemsChanged(t){if(t.removed.length){this._graphics.removeMany(t.removed.map((t=>{const i=this._networkFeatureMap.get(t);return this._networkFeatureMap.delete(t),this._networkGraphicMap.delete(i),i})));for(const i of t.removed)this.removeHandles(i)}if(t.added.length){this._graphics.addMany(t.added.map((t=>{const i=this._createGraphic(t);return null==i.symbol?null:(this._networkFeatureMap.set(t,i),this._networkGraphicMap.set(i,t),i)})).filter(r));for(const i of t.added)this.addHandles([o((()=>i.geometry),((t,s)=>{this._updateGraphic(i,"geometry",t,s)})),o((()=>i.symbol),((t,s)=>{this._updateGraphic(i,"symbol",t,s)}))],i);this._graphics.sort(((t,i)=>this._getDrawOrder(t)-this._getDrawOrder(i)))}}_updateGraphic(t,i,s,r){if(!this._networkFeatureMap.has(t)){const i=this._createGraphic(t);return this._networkFeatureMap.set(t,i),this._networkGraphicMap.set(i,t),void this._graphics.add(i)}const e=this._networkFeatureMap.get(t);e[i]=s,_.graphic=e,_.property=i,_.oldValue=r,_.newValue=s,this._graphicsView.graphicUpdateHandler(_)}_updateHighlight(){const t=Array.from(this._highlightIds.keys()),i=this._getHighlightBits(V);this._graphicsView.setHighlight(t.map((t=>({objectId:t,highlightFlags:i}))))}};p([h()],k.prototype,"_graphics",void 0),p([h()],k.prototype,"_routeItems",null),k=p([n("esri.views.2d.layers.RouteLayerView2D")],k);const C=k;export default C;
//# sourceMappingURL=p-c49d4d62.js.map