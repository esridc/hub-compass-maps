import{dY as t,ee as s,er as i,bD as e,cY as h,cn as o,d8 as r,c4 as n,e6 as p,c1 as a,em as l,a0 as c,da as m,fx as u,e as d,iK as f,jr as j,jg as w,dN as b,w as y,r as v,p as g,q as x}from"./p-aad64c9f.js";import{h as P}from"./p-f590152b.js";import{l as M}from"./p-fff6add7.js";import{u as _}from"./p-36525d97.js";import{e as z}from"./p-3f2fef32.js";import{a as A,j as C,y as E}from"./p-bbb18646.js";import{t as T}from"./p-d8c74537.js";import{F as S}from"./p-4f2b7ad8.js";import"./p-2af77f97.js";import"./p-717596a8.js";import"./p-682c165c.js";import"./p-22458323.js";import"./p-1c4b55c0.js";import"./p-2ea4a2b9.js";import"./p-7ce0ff48.js";import"./p-a0004a96.js";import"./p-44881b12.js";import"./p-e7002be3.js";import"./p-204b6b8c.js";import"./p-9ad0e060.js";import"./p-c0b174ee.js";import"./p-875cbb57.js";import"./p-da522976.js";import"./p-aff89b86.js";import"./p-d492d39b.js";import"./p-591e796f.js";import"./p-559f4b2d.js";import"./p-7281a451.js";import"./p-b947b9d2.js";import"./p-b8a25c33.js";import"./p-e7a66915.js";import"./p-2d2f231a.js";import"./p-17d8c81f.js";import"./p-dc645a50.js";import"./p-deddb82e.js";import"./p-31b7e91d.js";import"./p-23e8befe.js";import"./p-d6556377.js";import"./p-fa2632fc.js";import"./p-4295487d.js";import"./p-1c285990.js";import"./p-e3657bc3.js";import"./p-bac7b09c.js";import"./p-2250105d.js";const D=2;class U extends z{constructor(o){super(),this.element=o,this._handles=new t,this.isWrapAround=!1,this.perspectiveTransform=s(),this.wrapAroundShift=0,this.clipGeometry=null,this._handles.add(i((()=>this.element),(()=>{const t=this.element;this.ready(),t&&this._handles.add(h(t,"play",(()=>this.requestRender())))}),e))}getMesh(t){throw new Error("Method not implemented.")}destroy(){this._handles.destroy(),this.texture=o(this.texture)}get textureSize(){if(!this.texture)return[1,1];const t=this.texture.descriptor;return[t.width,t.height]}get dvsMat3(){return this.parent.dvsMat3}beforeRender(t){const s=this.element;if(null==s)return;const{context:i}=t,{videoWidth:e,videoHeight:h}=s;if(0!==e&&0!==h){if(this.texture)s.paused||this.texture.setData(s);else{const t=new m;t.wrapMode=r.CLAMP_TO_EDGE,t.preMultiplyAlpha=!0,t.width=e,t.height=h,this.texture=new n(i,t,s)}s.paused||(this.texture.generateMipmap(),this.requestRender()),super.beforeRender(t)}}_createTransforms(){return null}updateDrawCoords(t,s,i,e){const h=this.element,o=this._getFrameInfo();if(!h||!o)return;this._initializeData(t,o,i);const{controlPoints:r,horizon:n}=o,l=Math.sqrt(r.length),c=l,{x:m,y:u}=t,d=this._vertices,f=r[0],j=r[l-1],w=r[(c-1)*l],b=r[(c-1)*l+l-1],y=p(n?n[0].mapPoint:f.mapPoint,i),v=p(n?n[1].mapPoint:j.mapPoint,i),g=p(w.mapPoint,i),x=p(b.mapPoint,i);this.clipGeometry=n?new A({geometry:a.fromJSON({rings:[[[g.x,g.y],[x.x,x.y],[v.x,v.y],[y.x,y.y],[g.x,g.y]]],spatialReference:i})}):null;for(let t=0;t<r.length;t++){const s=r[t],{sourcePoint:e,mapPoint:h}=s;if(null==e||null==h)continue;const o=p(h,i);d[t*D+0]=o.x-m,d[t*D+1]=o.y-u}let P=s;if(e){const t=Math.min(y.x,v.x,g.x,x.x),s=Math.max(y.x,v.x,g.x,x.x),{worldWidth:i,xBounds:h}=e,[o,r]=h;t<o&&s>o?P=i:s>r&&t<r&&(P=-i)}this.wrapAroundShift=P,this.isWrapAround=0!==P}draw(t,s){this.isReady&&this._vertices&&this._indices&&this._texCoords?s.render(t,{transform:{dvs:this.dvsMat3},config:{perspective:this.perspectiveTransform,texSize:this.textureSize,wrapAroundShift:this.wrapAroundShift,isWrapAround:this.isWrapAround,opacity:this.opacity,texture:{texture:this.texture,unit:0}},position:this._vertices,tex:this._texCoords,index:this._indices}):this.requestRender()}_initializeData(t,s,i){if(null!=this._vertices&&null!=this._indices)return;const{controlPoints:e}=s,h=Math.sqrt(e.length),o=h,r=new Float32Array(D*e.length),n=new Uint16Array(2*e.length);for(let s=0;s<e.length;s++){const h=e[s],{sourcePoint:o,mapPoint:a}=h;if(null==o||null==a)continue;const l=p(a,i);r[s*D+0]=l.x-t.x,r[s*D+1]=l.y-t.y,n[2*s+0]=o.x,n[2*s+1]=o.y}const a=new Uint16Array(o*h+(o-2)*(h+2));let l=0;for(let t=0;t<o;t++){for(let s=0;s<h;s++)a[l++]=t*h+s,a[l++]=(t+1)*h+s;t<o-2&&(a[l++]=(t+1)*h+(h-1),a[l++]=(t+1)*h)}this._vertices=r,this._texCoords=n,this._indices=a}_getFrameInfo(){if(!this.groundControlPoints)return null;const t=this._getFrameControlPoints(),s=this.frameHorizonPoints;let i=null;if(s){const t=s.startX,e=s.startY,h=s.endX,o=s.endY;i=[{sourcePoint:l(t,e),mapPoint:new c(s.startLongitude,s.startLatitude)},{sourcePoint:l(h,o),mapPoint:new c(s.endLongitude,s.endLatitude)}]}return{controlPoints:t,horizon:i}}_getFrameControlPoints(){const t=this.groundControlPoints,s=t?.length;if(!s)return[];const i=new Array(s),e=Math.max(...t.map((({x:t})=>t))),h=this.element.videoWidth/e;for(let e=0;e<s;e++){const{x:s,y:o,lat:r,lon:n}=t[e];i[e]={sourcePoint:l(s*h,-o*h),mapPoint:new c(n,r)}}return i}}const V=new u([255,127,0]);let F=class extends(C(E)){constructor(){super(...arguments),this._graphicsLayer=new P,this._frameOutlineGraphic=new d({symbol:new f({outline:{type:"simple-line",color:V}})}),this._sensorTrailGraphic=new d({symbol:new j({color:V})}),this._lineOfSightGraphic=new d({symbol:new j({color:V})}),this._sensorLocationGraphic=new d({symbol:new w({color:V})}),this._frameCenterGraphic=new d({symbol:new w({color:V,style:"cross"})}),this._overlayContainer=null,this.layer=null,this.symbolColor=V,this.visibleTelemetryElements=null}destroy(){this._graphicsLayer=b(this._graphicsLayer)}initialize(){this.addHandles(y((()=>this.symbolColor),(()=>{this._frameOutlineGraphic.symbol.outline.color=this.symbolColor,this._sensorTrailGraphic.symbol.color=this.symbolColor,this._lineOfSightGraphic.symbol.color=this.symbolColor,this._sensorLocationGraphic.symbol.color=this.symbolColor,this._frameCenterGraphic.symbol.color=this.symbolColor}),e)),this._graphicsLayer.graphics.addMany([this._frameOutlineGraphic,this._sensorTrailGraphic,this._lineOfSightGraphic,this._sensorLocationGraphic,this._frameCenterGraphic]),this.visibleTelemetryElements=new M({frame:this.layer.telemetryDisplay?.frame??!1,frameCenter:this.layer.telemetryDisplay?.frameCenter??!0,frameOutline:this.layer.telemetryDisplay?.frameOutline??!0,lineOfSight:this.layer.telemetryDisplay?.lineOfSight??!0,sensorLocation:this.layer.telemetryDisplay?.sensorLocation??!0,sensorTrail:this.layer.telemetryDisplay?.sensorTrail??!0})}attach(){this._overlayContainer=new _,this.container.addChild(this._overlayContainer),this._addOverlayMultipoint(),this.graphicsView=new S({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this._graphicsLayer.graphics,container:new T(this.view.featuresTilingScheme)}),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this._graphicsLayer.on("graphic-update",this.graphicsView.graphicUpdateHandler)),this.addAttachHandles([y((()=>[this.layer.telemetryDisplay?.frame,this.layer.telemetryDisplay?.frameCenter,this.layer.telemetryDisplay?.frameOutline,this.layer.telemetryDisplay?.sensorLocation,this.layer.telemetryDisplay?.sensorTrail,this.layer.telemetryDisplay?.lineOfSight]),(()=>this._updateVisibleTelemetryElements()),e),y((()=>[this.layer.telemetry,this.visibleTelemetryElements?.frameCenter,this.visibleTelemetryElements?.frameOutline,this.visibleTelemetryElements?.sensorLocation,this.visibleTelemetryElements?.sensorTrail,this.visibleTelemetryElements?.lineOfSight]),(()=>this._updateGraphicGeometries()),e)])}detach(){this._overlayContainer.removeAllChildren(),this.container.removeAllChildren(),this.graphicsView=b(this.graphicsView)}supportsSpatialReference(t){return!0}moveEnd(){}viewChange(){this.graphicsView.viewChange()}update(t){this.graphicsView.processUpdate(t)}isUpdating(){return!this.graphicsView||this.graphicsView.updating}_updateVisibleTelemetryElements(){this.visibleTelemetryElements&&this.layer.telemetryDisplay&&(this.visibleTelemetryElements.frame=this.layer.telemetryDisplay.frame,this.visibleTelemetryElements.frameCenter=this.layer.telemetryDisplay.frameCenter,this.visibleTelemetryElements.frameOutline=this.layer.telemetryDisplay.frameOutline,this.visibleTelemetryElements.lineOfSight=this.layer.telemetryDisplay.lineOfSight,this.visibleTelemetryElements.sensorLocation=this.layer.telemetryDisplay.sensorLocation,this.visibleTelemetryElements.sensorTrail=this.layer.telemetryDisplay.sensorTrail)}_updateGraphicGeometries(){const{telemetry:t}=this.layer,{visibleTelemetryElements:s}=this;t&&s&&(s.frameOutline&&t.frameOutline?this._frameOutlineGraphic.geometry=this.layer.telemetry.frameOutline:this._frameOutlineGraphic.geometry=null,s.sensorTrail&&t.sensorTrail?this._sensorTrailGraphic.geometry=this.layer.telemetry.sensorTrail:this._sensorTrailGraphic.geometry=null,s.lineOfSight&&t.lineOfSight?this._lineOfSightGraphic.geometry=this.layer.telemetry.lineOfSight:this._lineOfSightGraphic.geometry=null,s.sensorLocation&&t.sensorLocation?this._sensorLocationGraphic.geometry=this.layer.telemetry.sensorLocation:this._sensorLocationGraphic.geometry=null,s.frameCenter&&t.frameCenter?this._frameCenterGraphic.geometry=this.layer.telemetry.frameCenter:this._frameCenterGraphic.geometry=null)}async _addOverlayMultipoint(){if(!this.layer.videoElement)return;const t=new U(this.layer.videoElement);this.addAttachHandles([y((()=>[this.layer.frameHorizonPoints,this.layer.groundControlPoints]),(()=>{const{visibleTelemetryElements:s}=this;s?.frame?(t.frameHorizonPoints=this.layer.frameHorizonPoints,t.groundControlPoints=this.layer.groundControlPoints,t.opacity=1):t.opacity=0}),e)]),this._overlayContainer.addChild(t),this.view.stage.requestRender()}};v([g()],F.prototype,"graphicsView",void 0),v([g()],F.prototype,"layer",void 0),v([g()],F.prototype,"symbolColor",void 0),v([g({type:M})],F.prototype,"visibleTelemetryElements",void 0),F=v([x("esri.views.2d.layers.VideoLayerView2D")],F);const O=F;export default O;
//# sourceMappingURL=p-146b8ebd.js.map