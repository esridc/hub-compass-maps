import{r as e,p as t,hx as i,E as s,oj as r,o9 as a,T as n,q as l,pN as o,pO as u,a3 as y,oC as d,I as p,U as c,d as h,hP as f,kX as b,bG as w,t as m,s as v,a8 as g,pP as S,eM as I,pQ as x,x as j,ot as F,pR as q,n as D,pS as T,b8 as O,az as P,k5 as L,p2 as M,o7 as E,X as C,a7 as V,oI as R,hQ as k,ju as A,nq as N,iU as B,pT as Q,iV as $,ow as _,b7 as G,jO as J,pU as U,oB as X,o8 as z,ab as Z,gZ as W,bZ as H,oM as K,ps as Y,je as ee,ki as te,w as ie,iM as se,pV as re,pB as ae}from"./p-aad64c9f.js";import{j as ne}from"./p-dad6a156.js";const le=b=>{let w=class extends b{constructor(){super(...arguments),this.capabilities=void 0,this.copyright=null,this.fullExtent=null,this.legendEnabled=!0,this.spatialReference=null,this.version=void 0,this._allLayersAndTablesMap=null}readCapabilities(e,t){const i=t.capabilities&&t.capabilities.split(",").map((e=>e.toLowerCase().trim()));if(!i)return{operations:{supportsExportMap:!1,supportsExportTiles:!1,supportsIdentify:!1,supportsQuery:!1,supportsTileMap:!1},exportMap:null,exportTiles:null};const s=this.type,r="tile"!==s&&!!t.supportsDynamicLayers,a=i.includes("query"),n=i.includes("map"),l=!!t.exportTilesAllowed,u=i.includes("tilemap"),y=i.includes("data"),d="tile"!==s&&(!t.tileInfo||r),p="tile"!==s&&(!t.tileInfo||r),c="tile"!==s,h=t.cimVersion?o.parse(t.cimVersion):null,f=h?.greaterEqual(1,4)??!1,b=h?.greaterEqual(2,0)??!1;return{operations:{supportsExportMap:n,supportsExportTiles:l,supportsIdentify:a,supportsQuery:y,supportsTileMap:u},exportMap:n?{supportsArcadeExpressionForLabeling:f,supportsSublayersChanges:c,supportsDynamicLayers:r,supportsSublayerVisibility:d,supportsSublayerDefinitionExpression:p,supportsCIMSymbols:b}:null,exportTiles:l?{maxExportTilesCount:+t.maxExportTilesCount}:null}}readVersion(e,t){let i=t.currentVersion;return i||(i=t.hasOwnProperty("capabilities")||t.hasOwnProperty("tables")?10:t.hasOwnProperty("supportedImageFormatTypes")?9.31:9.3),i}async fetchRelatedService(e){const t=this.portalItem;if(!t||!u(t))return null;this._relatedFeatureServicePromise||(this._relatedFeatureServicePromise=t.fetchRelatedItems({relationshipType:"Service2Service",direction:"reverse"},e).then((e=>e.find((e=>"Feature Service"===e.type))??null),(()=>null)));const i=await this._relatedFeatureServicePromise;return y(e),i?{itemId:i.id,url:i.url}:null}async fetchSublayerInfo(e,t){const{source:i}=e;if(this?.portalItem&&"tile"===this.type&&"map-layer"===i?.type&&u(this.portalItem)&&e.originIdOf("url")<d.SERVICE){const s=await this.fetchRelatedService(t);s&&(e.url=p(s.url,i.mapLayerId.toString()),e.layerItemId=s.itemId)}const{url:s}=e;let r;if("data-layer"===i.type){r=(await c(s,{responseType:"json",query:{f:"json",...this.customParameters,token:this.apiKey},...t})).data}else if(s&&e.originIdOf("url")>d.SERVICE)try{const e=await this._fetchAllLayersAndTablesFromService(s),t=h(s)?.sublayer??i.mapLayerId;r=e.get(t)}catch{}else{let s=e.id;"map-layer"===i?.type&&(s=i.mapLayerId);try{r=(await this.fetchAllLayersAndTables(t)).get(s)}catch{}}return r}async fetchAllLayersAndTables(e){return this._fetchAllLayersAndTablesFromService(this.parsedUrl?.path,e)}async _fetchAllLayersAndTablesFromService(e,t){await this.load(t),this._allLayersAndTablesMap||=new Map;const i=h(e),s=f(this._allLayersAndTablesMap,i?.url.path,(()=>c(p(i?.url.path,"/layers"),{responseType:"json",query:{f:"json",...this.customParameters,token:this.apiKey}}).then((e=>{const t=new Map,{layers:i,tables:s}=e.data,r=[...i??[],...s??[]];for(const e of r)t.set(e.id,e);return{result:t}}),(e=>({error:e}))))),r=await s;if(y(t),"result"in r)return r.result;throw r.error}};return e([t({readOnly:!0})],w.prototype,"capabilities",void 0),e([i("service","capabilities",["capabilities","exportTilesAllowed","maxExportTilesCount","supportsDynamicLayers","tileInfo"])],w.prototype,"readCapabilities",null),e([t({json:{read:{source:"copyrightText"}}})],w.prototype,"copyright",void 0),e([t({type:s})],w.prototype,"fullExtent",void 0),e([t(r)],w.prototype,"id",void 0),e([t({type:Boolean,json:{origins:{service:{read:{enabled:!1}}},read:{source:"showLegend"},write:{target:"showLegend"}}})],w.prototype,"legendEnabled",void 0),e([t(a)],w.prototype,"popupEnabled",void 0),e([t({type:n})],w.prototype,"spatialReference",void 0),e([t({readOnly:!0})],w.prototype,"version",void 0),e([i("service","version",["currentVersion","capabilities","tables","supportedImageFormatTypes"])],w.prototype,"readVersion",null),w=e([l("esri.layers.mixins.ArcGISMapService")],w),w};var oe;function ue(e){return"esriSMS"===e?.type}function ye(e,t,i){const s=this.originIdOf(t)>=Y(i.origin);return{ignoreOrigin:!0,allowNull:s,enabled:!!i&&("map-image"===i.layer?.type&&(i.writeSublayerStructure||s))}}function de(e,t,i){return{enabled:!!i&&("tile"===i.layer?.type&&(i.origin&&this.originIdOf(t)>=Y(i.origin)||this._isOverridden(t)))}}function pe(e,t,i){return{ignoreOrigin:!0,enabled:i&&i.writeSublayerStructure||!1}}function ce(e,t,i){return{ignoreOrigin:!0,enabled:!!i&&(i.writeSublayerStructure||this.originIdOf(t)>=Y(i.origin))}}let he=0;const fe=new Set(["layer","parent","loaded","loadStatus","loadError","loadWarnings"]);let be=oe=class extends(b(w(m))){constructor(e){super(e),this.capabilities=void 0,this.maxScaleRange={minScale:0,maxScale:0},this.fields=null,this.fullExtent=null,this.geometryType=null,this.globalIdField=null,this.isTable=!1,this.legendEnabled=!0,this.objectIdField=null,this.parent=null,this.popupEnabled=!0,this.popupTemplate=null,this.relationships=null,this.sourceJSON=null,this.spatialReference=null,this.title=null,this.typeIdField=null,this.type="sublayer",this.types=null,this._lastParsedUrl=null}async load(e){return this.addResolvingPromise((async()=>{const{layer:t,url:i}=this;if(!t&&!i)throw new v("sublayer:missing-layer","Sublayer can't be loaded without being part of a layer",{sublayer:this});const s=t?await t.fetchSublayerInfo(this,e):(await c(i,{responseType:"json",query:{f:"json"},...e})).data;s&&(this.sourceJSON=s,this.read({layerDefinition:s},{origin:"service",layer:t,url:g(i)}))})()),this}readCapabilities(e,t){t=t.layerDefinition||t;const{operations:{supportsQuery:i,supportsQueryAttachments:s},query:{supportsFormatPBF:r,supportsOrderBy:a,supportsPagination:n},data:{supportsAttachment:l},queryRelated:o}=S(t,this.url);return{exportMap:{supportsModification:!!t.canModifyLayer},operations:{supportsQuery:i,supportsQueryAttachments:s},data:{supportsAttachment:l},query:{supportsFormatPBF:r,supportsOrderBy:a,supportsPagination:n},queryRelated:o}}get defaultPopupTemplate(){return this.createPopupTemplate()}set definitionExpression(e){this._setAndNotifyLayer("definitionExpression",e)}get effectiveScaleRange(){const{minScale:e,maxScale:t}=this;return{minScale:e,maxScale:t}}readMaxScaleRange(e,t){return{minScale:(t=t.layerDefinition||t).minScale??0,maxScale:t.maxScale??0}}get fieldsIndex(){return new I(this.fields||[])}set floorInfo(e){this._setAndNotifyLayer("floorInfo",e)}readGlobalIdFieldFromService(e,t){if((t=t.layerDefinition||t).globalIdField)return t.globalIdField;if(t.fields)for(const e of t.fields)if("esriFieldTypeGlobalID"===e.type)return e.name}get id(){const e=this._get("id");return e??he++}set id(e){this._get("id")!==e&&(!1!==this.layer?.capabilities?.exportMap?.supportsDynamicLayers?this._set("id",e):this._logLockedError("id","capability not available 'layer.capabilities.exportMap.supportsDynamicLayers'"))}readIsTable(e,t){return"Table"===t.type}set labelingInfo(e){this._setAndNotifyLayer("labelingInfo",e)}writeLabelingInfo(e,t,i,s){e&&e.length&&(t.layerDefinition={drawingInfo:{labelingInfo:e.map((e=>e.write({},s)))}})}set labelsVisible(e){this._setAndNotifyLayer("labelsVisible",e)}set layer(e){this._set("layer",e),this.sublayers?.forEach((t=>t.layer=e))}set listMode(e){this._set("listMode",e)}set minScale(e){this._setAndNotifyLayer("minScale",e)}readMinScale(e,t){return t.minScale||t.layerDefinition?.minScale||0}set maxScale(e){this._setAndNotifyLayer("maxScale",e)}readMaxScale(e,t){return t.maxScale||t.layerDefinition?.maxScale||0}readObjectIdFieldFromService(e,t){if((t=t.layerDefinition||t).objectIdField)return t.objectIdField;const i=t.fields?.find((e=>"esriFieldTypeOID"===e.type));return i?.name}set opacity(e){this._setAndNotifyLayer("opacity",e)}readOpacity(e,t){const{layerDefinition:i}=t;return 1-.01*(i?.transparency??i?.drawingInfo?.transparency??0)}writeOpacity(e,t,i,s){t.layerDefinition={drawingInfo:{transparency:100-100*e}}}writeParent(e,t){this.parent&&this.parent!==this.layer?t.parentLayerId=x(this.parent.id):t.parentLayerId=-1}get queryTask(){if(!this.layer)return null;const{capabilities:e,fieldsIndex:t,layer:i,url:s}=this,{spatialReference:r}=i,a="gdbVersion"in i?i.gdbVersion:void 0,n=j("featurelayer-pbf")&&e?.query.supportsFormatPBF;return new ne({fieldsIndex:t,gdbVersion:a,pbfSupported:n,queryAttachmentsSupported:e?.operations?.supportsQueryAttachments??!1,sourceSpatialReference:r,url:s})}set renderer(e){if(F(e,this.fieldsIndex),e)for(const t of e.getSymbols())if(q(t)){D.getLogger(this).warn("Sublayer renderer should use 2D symbols");break}this._setAndNotifyLayer("renderer",e)}get source(){return this._get("source")||new T({mapLayerId:this.id})}set source(e){this._setAndNotifyLayer("source",e)}set sublayers(e){this._handleSublayersChange(e,this._get("sublayers")),this._set("sublayers",e)}castSublayers(e){return O(P.ofType(oe),e)}writeSublayers(e,t,i){this.sublayers?.length&&(t[i]=this.sublayers.map((e=>e.id)).toArray().reverse())}readTitle(e,t){return t.layerDefinition?.name??t.name}readTypeIdField(e,t){let i=(t=t.layerDefinition||t).typeIdField;if(i&&t.fields){i=i.toLowerCase();const e=t.fields.find((e=>e.name.toLowerCase()===i));e&&(i=e.name)}return i}get url(){const e=this.layer?.parsedUrl??this._lastParsedUrl,t=this.source;if(!e)return null;if(this._lastParsedUrl=e,"map-layer"===t?.type)return`${e.path}/${t.mapLayerId}`;const i={layer:JSON.stringify({source:this.source})};return`${e.path}/dynamicLayer?${L(i)}`}set url(e){this._overrideIfSome("url",e)}set visible(e){this._setAndNotifyLayer("visible",e)}writeVisible(e,t,i,s){t[i]=this.getAtOrigin("defaultVisibility","service")||e}clone(){const{store:e}=M(this),t=new oe;return M(t).store=e.clone(fe),this.commitProperty("url"),t._lastParsedUrl=this._lastParsedUrl,t}createPopupTemplate(e){return E(this,e)}createQuery(){return new C({returnGeometry:!0,where:this.definitionExpression||"1=1"})}async createFeatureLayer(){if(this.hasOwnProperty("sublayers"))return null;const e=(await import("./p-aad64c9f.js").then((function(e){return e.s$}))).default,{layer:t,url:i}=this;let s;if(i&&this.originIdOf("url")>d.SERVICE)s=new e({url:i});else{if(!t?.parsedUrl)throw new v("createFeatureLayer:missing-information","Cannot create a FeatureLayer without a url or a parent layer");{const i=t.parsedUrl;s=new e({url:i.path}),i&&this.source&&("map-layer"===this.source.type?s.layerId=this.source.mapLayerId:s.dynamicDataSource=this.source)}}return null!=t?.refreshInterval&&(s.refreshInterval=t.refreshInterval),this.definitionExpression&&(s.definitionExpression=this.definitionExpression),this.floorInfo&&(s.floorInfo=V(this.floorInfo)),this.originIdOf("labelingInfo")>d.SERVICE&&(s.labelingInfo=V(this.labelingInfo)),this.originIdOf("labelsVisible")>d.DEFAULTS&&(s.labelsVisible=this.labelsVisible),this.originIdOf("legendEnabled")>d.DEFAULTS&&(s.legendEnabled=this.legendEnabled),this.originIdOf("visible")>d.DEFAULTS&&(s.visible=this.visible),this.originIdOf("minScale")>d.DEFAULTS&&(s.minScale=this.minScale),this.originIdOf("maxScale")>d.DEFAULTS&&(s.maxScale=this.maxScale),this.originIdOf("opacity")>d.DEFAULTS&&(s.opacity=this.opacity),this.originIdOf("popupTemplate")>d.DEFAULTS&&(s.popupTemplate=V(this.popupTemplate)),this.originIdOf("renderer")>d.SERVICE&&(s.renderer=V(this.renderer)),"data-layer"===this.source?.type&&(s.dynamicDataSource=this.source.clone()),this.originIdOf("title")>d.DEFAULTS&&(s.title=this.title),"map-image"===t?.type&&t.originIdOf("customParameters")>d.DEFAULTS&&(s.customParameters=t.customParameters),"tile"===t?.type&&t.originIdOf("customParameters")>d.DEFAULTS&&(s.customParameters=t.customParameters),s}getField(e){return this.fieldsIndex.get(e)}getFeatureType(e){return R(this.types,this.typeIdField,e)}getFieldDomain(e,t){const i=t?.feature,s=this.getFeatureType(i);if(s){const t=s.domains&&s.domains[e];if(t&&"inherited"!==t.type)return t}return this._getLayerDomain(e)}async queryAttachments(e,t){await this.load(),e=k.from(e);const i=this.capabilities;if(!i?.data?.supportsAttachment)throw new v("queryAttachments:not-supported","this layer doesn't support attachments");const{attachmentTypes:s,objectIds:r,globalIds:a,num:n,size:l,start:o,where:u}=e;if(!i?.operations?.supportsQueryAttachments){if(s?.length>0||a?.length>0||l?.length>0||n||o||u)throw new v("queryAttachments:option-not-supported","when 'capabilities.operations.supportsQueryAttachments' is false, only objectIds is supported",e)}if(!(r?.length||a?.length||u))throw new v("queryAttachments:invalid-query","'objectIds', 'globalIds', or 'where' are required to perform attachment query",e);return this.queryTask.executeAttachmentQuery(e,t)}async queryFeatureCount(e=this.createQuery(),t){if(await this.load(),!this.capabilities.operations.supportsQuery)throw new v("queryFeatureCount:not-supported","this layer doesn't support queries.");if(!this.url)throw new v("queryFeatureCount:not-supported","this layer has no url.");const i=this.layer?.apiKey;return await this.queryTask.executeForCount(e,{...t,query:{...this.layer?.customParameters,token:i}})}async queryFeatures(e=this.createQuery(),t){if(await this.load(),!this.capabilities.operations.supportsQuery)throw new v("queryFeatures:not-supported","this layer doesn't support queries.");if(!this.url)throw new v("queryFeatures:not-supported","this layer has no url.");const i=await this.queryTask.execute(e,{...t,query:{...this.layer?.customParameters,token:this.layer?.apiKey}});if(i?.features)for(const e of i.features)e.sourceLayer=this;return i}async queryObjectIds(e=this.createQuery(),t){if(await this.load(),!this.capabilities.operations.supportsQuery)throw new v("queryObjectIds:not-supported","this layer doesn't support queries.");if(!this.url)throw new v("queryObjectIds:not-supported","this layer has no url.");const i=this.layer?.apiKey;return await this.queryTask.executeForIds(e,{...t,query:{...this.layer?.customParameters,token:i}})}async queryRelatedFeatures(e,t){if(await this.load(),!this.capabilities.operations.supportsQuery)throw new v("queryRelatedFeatures:not-supported","this layer doesn't support queries.");if(!this.url)throw new v("queryRelatedFeatures:not-supported","this layer has no url.");const i=this.layer?.apiKey;return await this.queryTask.executeRelationshipQuery(e,{...t,query:{...this.layer?.customParameters,token:i}})}async queryRelatedFeaturesCount(e,t){if(await this.load(),!this.capabilities.operations.supportsQuery)throw new v("queryRelatedFeaturesCount:not-supported","this layer doesn't support queries.");if(!this.capabilities.queryRelated.supportsCount)throw new v("queryRelatedFeaturesCount:not-supported","this layer doesn't support query related counts.");if(!this.url)throw new v("queryRelatedFeaturesCount:not-supported","this layer has no url.");const i=this.layer?.apiKey;return await this.queryTask.executeRelationshipQueryForCount(e,{...t,query:{...this.layer?.customParameters,token:i}})}toExportImageJSON(e){const t={id:this.id,source:this.source?.toJSON()||{mapLayerId:this.id,type:"mapLayer"}},i=ee(e,this.definitionExpression);null!=i&&(t.definitionExpression=i);const s=["renderer","labelingInfo","opacity","labelsVisible"].reduce(((e,t)=>(e[t]=this.originIdOf(t),e)),{}),r=Object.keys(s).some((e=>s[e]>d.SERVICE));if(r){const e=t.drawingInfo={};if(s.renderer>d.SERVICE&&(e.renderer=this.renderer?this.renderer.toJSON():null),s.labelsVisible>d.SERVICE&&(e.showLabels=this.labelsVisible),this.labelsVisible&&s.labelingInfo>d.SERVICE)if(this.labelingInfo){!this.loaded&&this.labelingInfo?.some((e=>!e.labelPlacement))&&D.getLogger(this).warnOnce(`A Sublayer (title: ${this.title}, id: ${this.id}) has an undefined 'labelPlacement' and so labels cannot be displayed. Either define a valid 'labelPlacement' or call Sublayer.load() to use a default value based on geometry type.`,{sublayer:this});let t=this.labelingInfo;null!=this.geometryType&&(t=A(this.labelingInfo,N.toJSON(this.geometryType))),e.showLabels=!0,e.labelingInfo=t.filter((e=>e.labelPlacement)).map((e=>e.toJSON({origin:"service",layer:this.layer})))}else e.showLabels=!1;s.opacity>d.SERVICE&&(e.transparency=100-100*this.opacity),this._assignDefaultSymbolColors(e.renderer)}return t}_assignDefaultSymbolColors(e){this._forEachSimpleMarkerSymbols(e,(e=>{e.color||"esriSMSX"!==e.style&&"esriSMSCross"!==e.style||(e.outline?.color?e.color=e.outline.color:e.color=[0,0,0,0])}))}_forEachSimpleMarkerSymbols(e,t){if(e){const i=("uniqueValueInfos"in e?e.uniqueValueInfos:"classBreakInfos"in e?e.classBreakInfos:null)??[];for(const e of i)ue(e.symbol)&&t(e.symbol);"symbol"in e&&ue(e.symbol)&&t(e.symbol),"defaultSymbol"in e&&ue(e.defaultSymbol)&&t(e.defaultSymbol)}}_setAndNotifyLayer(e,t){const i=this.layer,s=this._get(e);let r,a;switch(e){case"definitionExpression":case"floorInfo":r="supportsSublayerDefinitionExpression";break;case"minScale":case"maxScale":case"visible":r="supportsSublayerVisibility";break;case"labelingInfo":case"labelsVisible":case"opacity":case"renderer":case"source":r="supportsDynamicLayers",a="supportsModification"}const n=M(this).getDefaultOrigin();if("service"!==n){if(r&&!1===this.layer?.capabilities?.exportMap?.[r])return void this._logLockedError(e,`capability not available 'layer.capabilities.exportMap.${r}'`);if(a&&!1===this.capabilities?.exportMap[a])return void this._logLockedError(e,`capability not available 'capabilities.exportMap.${a}'`)}"source"!==e||"not-loaded"===this.loadStatus?(this._set(e,t),"service"!==n&&s!==t&&i&&i.emit&&i.emit("sublayer-update",{propertyName:e,target:this})):this._logLockedError(e,"'source' can't be changed after calling sublayer.load()")}_handleSublayersChange(e,t){t&&(t.forEach((e=>{e.parent=null,e.layer=null})),this.removeAllHandles()),e&&(e.forEach((e=>{e.parent=this,e.layer=this.layer})),this.addHandles([e.on("after-add",(({item:e})=>{e.parent=this,e.layer=this.layer})),e.on("after-remove",(({item:e})=>{e.parent=null,e.layer=null})),e.on("before-changes",(e=>{(this.layer?.capabilities?.exportMap?.supportsSublayersChanges??1)||(D.getLogger(this).error(new v("sublayer:sublayers-non-modifiable","Sublayer can't be added, moved, or removed from the layer's sublayers",{sublayer:this,layer:this.layer})),e.preventDefault())}))]))}_logLockedError(e,t){const{layer:i,declaredClass:s}=this;D.getLogger(s).error(new v("sublayer:locked",`Property '${String(e)}' can't be changed on Sublayer from the layer '${i?.id}'`,{reason:t,sublayer:this,layer:i}))}_getLayerDomain(e){return this.fieldsIndex.get(e)?.domain??null}};be.test={isMapImageLayerOverridePolicy:e=>e===pe||e===ye,isTileImageLayerOverridePolicy:e=>e===de},e([t({readOnly:!0})],be.prototype,"capabilities",void 0),e([i("service","capabilities",["layerDefinition.canModifyLayer","layerDefinition.capabilities"])],be.prototype,"readCapabilities",null),e([t()],be.prototype,"defaultPopupTemplate",null),e([t({type:String,value:null,json:{name:"layerDefinition.definitionExpression",write:{allowNull:!0,overridePolicy:ye}}})],be.prototype,"definitionExpression",null),e([t({readOnly:!0})],be.prototype,"effectiveScaleRange",null),e([i("service","maxScaleRange",["minScale","maxScale"])],be.prototype,"readMaxScaleRange",null),e([t({type:[B],json:{origins:{service:{read:{source:"layerDefinition.fields"}}}}})],be.prototype,"fields",void 0),e([t({readOnly:!0})],be.prototype,"fieldsIndex",null),e([t({type:Q,value:null,json:{name:"layerDefinition.floorInfo",read:{source:"layerDefinition.floorInfo"},write:{target:"layerDefinition.floorInfo",overridePolicy:ye},origins:{"web-scene":{read:!1,write:!1}}}})],be.prototype,"floorInfo",null),e([t({type:s,json:{read:{source:"layerDefinition.extent"}}})],be.prototype,"fullExtent",void 0),e([t({type:N.apiValues,json:{origins:{service:{name:"layerDefinition.geometryType",read:{reader:N.read}}}}})],be.prototype,"geometryType",void 0),e([t({type:String})],be.prototype,"globalIdField",void 0),e([i("service","globalIdField",["layerDefinition.globalIdField","layerDefinition.fields"])],be.prototype,"readGlobalIdFieldFromService",null),e([t({type:$,json:{write:{ignoreOrigin:!0}}})],be.prototype,"id",null),e([t({readOnly:!0})],be.prototype,"isTable",void 0),e([i("service","isTable",["type"])],be.prototype,"readIsTable",null),e([t({value:null,type:[_],json:{read:{source:"layerDefinition.drawingInfo.labelingInfo"},write:{target:"layerDefinition.drawingInfo.labelingInfo",overridePolicy:pe}}})],be.prototype,"labelingInfo",null),e([G("labelingInfo")],be.prototype,"writeLabelingInfo",null),e([t({type:Boolean,value:!0,json:{read:{source:"layerDefinition.drawingInfo.showLabels"},write:{target:"layerDefinition.drawingInfo.showLabels",overridePolicy:pe}}})],be.prototype,"labelsVisible",null),e([t({value:null})],be.prototype,"layer",null),e([t({type:String,json:{write:{overridePolicy:de}}})],be.prototype,"layerItemId",void 0),e([t({type:Boolean,value:!0,json:{origins:{service:{read:{enabled:!1}}},read:{source:"showLegend"},write:{target:"showLegend",overridePolicy:ce}}})],be.prototype,"legendEnabled",void 0),e([t({type:["show","hide","hide-children"],value:"show",json:{read:!1,write:!1,origins:{"web-scene":{read:!0,write:!0}}}})],be.prototype,"listMode",null),e([t({type:Number,value:0,json:{write:{overridePolicy:pe}}})],be.prototype,"minScale",null),e([i("minScale",["minScale","layerDefinition.minScale"])],be.prototype,"readMinScale",null),e([t({type:Number,value:0,json:{write:{overridePolicy:pe}}})],be.prototype,"maxScale",null),e([i("maxScale",["maxScale","layerDefinition.maxScale"])],be.prototype,"readMaxScale",null),e([t()],be.prototype,"objectIdField",void 0),e([i("service","objectIdField",["layerDefinition.objectIdField","layerDefinition.fields"])],be.prototype,"readObjectIdFieldFromService",null),e([t({type:Number,value:1,json:{write:{target:"layerDefinition.drawingInfo.transparency",overridePolicy:pe}}})],be.prototype,"opacity",null),e([i("opacity",["layerDefinition.drawingInfo.transparency","layerDefinition.transparency"])],be.prototype,"readOpacity",null),e([G("opacity")],be.prototype,"writeOpacity",null),e([t({json:{type:$,write:{target:"parentLayerId",writerEnsuresNonNull:!0,overridePolicy:pe}}})],be.prototype,"parent",void 0),e([G("parent")],be.prototype,"writeParent",null),e([t({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,t)=>!t.disablePopup},write:{target:"disablePopup",overridePolicy:ce,writer(e,t,i){t[i]=!e}}}})],be.prototype,"popupEnabled",void 0),e([t({type:J,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy:ce}}})],be.prototype,"popupTemplate",void 0),e([t({readOnly:!0})],be.prototype,"queryTask",null),e([t({type:[U],readOnly:!0,json:{origins:{service:{read:{source:"layerDefinition.relationships"}}}}})],be.prototype,"relationships",void 0),e([t({types:X,value:null,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:pe},origins:{"web-scene":{types:z,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:pe}}}}})],be.prototype,"renderer",null),e([t({types:{key:"type",base:null,typeMap:{"data-layer":Z,"map-layer":T}},cast(e){if(e){if("mapLayerId"in e)return W(T,e);if("dataSource"in e)return W(Z,e)}return e},json:{name:"layerDefinition.source",write:{overridePolicy:pe}}})],be.prototype,"source",null),e([t()],be.prototype,"sourceJSON",void 0),e([t({type:n,json:{origins:{service:{read:{source:"layerDefinition.extent.spatialReference"}}}}})],be.prototype,"spatialReference",void 0),e([t({value:null,json:{type:[$],write:{target:"subLayerIds",allowNull:!0,overridePolicy:pe}}})],be.prototype,"sublayers",null),e([H("sublayers")],be.prototype,"castSublayers",null),e([G("sublayers")],be.prototype,"writeSublayers",null),e([t({type:String,json:{name:"name",write:{overridePolicy:ce}}})],be.prototype,"title",void 0),e([i("service","title",["name","layerDefinition.name"])],be.prototype,"readTitle",null),e([t({type:String})],be.prototype,"typeIdField",void 0),e([t({json:{read:!1},readOnly:!0,value:"sublayer"})],be.prototype,"type",void 0),e([i("typeIdField",["layerDefinition.typeIdField"])],be.prototype,"readTypeIdField",null),e([t({type:[K],json:{origins:{service:{read:{source:"layerDefinition.types"}}}}})],be.prototype,"types",void 0),e([t({type:String,json:{name:"layerUrl",write:{overridePolicy:de}}})],be.prototype,"url",null),e([t({type:Boolean,value:!0,json:{read:{source:"defaultVisibility"},write:{target:"defaultVisibility",overridePolicy:pe}}})],be.prototype,"visible",null),e([G("visible")],be.prototype,"writeVisible",null),be=oe=e([l("esri.layers.support.Sublayer")],be);const we=be;function me(e,t){const i=[],s={};return e?(e.forEach((e=>{const r=new we;if(r.read(e,t),s[r.id]=r,null!=e.parentLayerId&&-1!==e.parentLayerId){const t=s[e.parentLayerId];t.sublayers||(t.sublayers=[]),t.sublayers.unshift(r)}else i.unshift(r)})),i):i}const ve=P.ofType(we);function ge(e,t){e&&e.forEach((e=>{t(e),e.sublayers&&e.sublayers.length&&ge(e.sublayers,t)}))}const Se=i=>{let s=class extends i{constructor(...e){super(...e),this.allSublayers=new te({getCollections:()=>[this.sublayers],getChildrenFunction:e=>e.sublayers}),this.sublayersSourceJSON={[d.SERVICE]:{},[d.PORTAL_ITEM]:{},[d.WEB_SCENE]:{},[d.WEB_MAP]:{}},this.subtables=null,this.addHandles([ie((()=>this.sublayers),((e,t)=>this._handleSublayersChange(e,t)),se),ie((()=>this.subtables),((e,t)=>this._handleSublayersChange(e,t)),se)])}destroy(){this.allSublayers.destroy()}readSublayers(e,t){if(!t||!e)return;const{sublayersSourceJSON:i}=this,s=Y(t.origin);if(s<d.SERVICE)return;if(i[s]={context:t,visibleLayers:e.visibleLayers||i[s].visibleLayers,layers:e.layers||i[s].layers},s>d.SERVICE)return;this._set("serviceSublayers",this.createSublayersForOrigin("service").sublayers);const{sublayers:r,origin:a}=this.createSublayersForOrigin("web-document"),n=M(this);n.setDefaultOrigin(a),this._set("sublayers",new ve(r)),n.setDefaultOrigin("user")}findSublayerById(e){return this.allSublayers.find((t=>t.id===e))}createServiceSublayers(){return this.createSublayersForOrigin("service").sublayers}createSublayersForOrigin(e){const t=Y("web-document"===e?"web-map":e);let i=d.SERVICE,s=this.sublayersSourceJSON[d.SERVICE].layers,r=this.sublayersSourceJSON[d.SERVICE].context,a=null;const n=[d.PORTAL_ITEM,d.WEB_SCENE,d.WEB_MAP].filter((e=>e<=t));for(const e of n){const t=this.sublayersSourceJSON[e];re(t.layers)&&(i=e,s=t.layers,r=t.context,t.visibleLayers&&(a={visibleLayers:t.visibleLayers,context:t.context}))}const l=[d.PORTAL_ITEM,d.WEB_SCENE,d.WEB_MAP].filter((e=>e>i&&e<=t));let o=null;for(const e of l){const{layers:t,visibleLayers:i,context:s}=this.sublayersSourceJSON[e];t&&(o={layers:t,context:s}),i&&(a={visibleLayers:i,context:s})}const u=me(s,r),y=new Map,p=new Set;if(o)for(const e of o.layers)y.set(e.id,e);if(a?.visibleLayers)for(const e of a.visibleLayers)p.add(e);return ge(u,(e=>{o&&e.read(y.get(e.id),o.context),a&&e.read({defaultVisibility:p.has(e.id)},a.context)})),{origin:ae(i),sublayers:new ve({items:u})}}read(e,t){super.read(e,t),this.readSublayers(e,t)}_handleSublayersChange(e,t){t&&(t.forEach((e=>{e.parent=null,e.layer=null})),this.removeHandles("sublayers-owner")),e&&(e.forEach((e=>{e.parent=this,e.layer=this})),this.addHandles([e.on("after-add",(({item:e})=>{e.parent=this,e.layer=this})),e.on("after-remove",(({item:e})=>{e.parent=null,e.layer=null}))],"sublayers-owner"),"tile"===this.type&&this.addHandles(e.on("before-changes",(e=>{D.getLogger("esri.layers.TileLayer").error(new v("tilelayer:sublayers-non-modifiable","ISublayer can't be added, moved, or removed from the layer's sublayers",{layer:this})),e.preventDefault()})),"sublayers-owner"))}};return e([t({readOnly:!0})],s.prototype,"allSublayers",void 0),e([t({readOnly:!0,type:P.ofType(we)})],s.prototype,"serviceSublayers",void 0),e([t({value:null,type:ve,json:{read:!1,write:{allowNull:!0,ignoreOrigin:!0}}})],s.prototype,"sublayers",void 0),e([t({readOnly:!0})],s.prototype,"sublayersSourceJSON",void 0),e([t({type:ve,json:{read:{source:"tables"}}})],s.prototype,"subtables",void 0),s=e([l("esri.layers.mixins.SublayersOwner")],s),s};export{le as f,Se as m,we as t};
//# sourceMappingURL=p-9bb3ed3d.js.map