import{r as t,p as s,jw as i,q as e,w as r,s as o,cX as n,hc as p,ae as a}from"./p-aad64c9f.js";import{n as c,r as h}from"./p-72f8c1e2.js";import"./p-2af77f97.js";import"./p-875cbb57.js";import"./p-da522976.js";import"./p-aff89b86.js";import"./p-d492d39b.js";import"./p-c2679c90.js";import"./p-bbb18646.js";import"./p-3f2fef32.js";import"./p-23e8befe.js";import"./p-2d2f231a.js";import"./p-17d8c81f.js";import"./p-dc645a50.js";import"./p-1c4b55c0.js";import"./p-2ea4a2b9.js";import"./p-22458323.js";import"./p-7ce0ff48.js";import"./p-a0004a96.js";import"./p-d6556377.js";import"./p-682c165c.js";import"./p-44881b12.js";import"./p-e7002be3.js";import"./p-717596a8.js";import"./p-204b6b8c.js";import"./p-9ad0e060.js";import"./p-c0b174ee.js";import"./p-591e796f.js";import"./p-559f4b2d.js";import"./p-7281a451.js";import"./p-b947b9d2.js";import"./p-b8a25c33.js";import"./p-e7a66915.js";import"./p-deddb82e.js";import"./p-008cf576.js";import"./p-be38a32f.js";import"./p-de84037a.js";import"./p-aa4c9855.js";import"./p-b323b506.js";import"./p-3e7cecc4.js";const m=r=>{let o=class extends r{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...t){super(...t),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&"connected"===this._streamConnectionStatus?"paused":this._streamConnectionStatus}_onSuspendedChange(t){t?this._doPause():this._isUserPaused||this._doResume()}};return t([s()],o.prototype,"_isUserPaused",void 0),t([s({readOnly:!0})],o.prototype,"connectionStatus",null),t([s({type:i})],o.prototype,"filter",void 0),o=t([e("esri.views.layers.StreamLayerView")],o),o};let d=class extends(m(h)){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([r((()=>this.layer.customParameters),(async t=>{(await this.getWorker()).streamMessenger.updateCustomParameters(t)})),this.layer.on("send-message-to-socket",(async t=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(t)})),this.layer.on("send-message-to-client",(async t=>{(await this.getWorker()).streamMessenger.sendMessageToClient(t),this._isUserPaused&&"type"in t&&"clear"===t.type&&this.incrementSourceRefreshVersion()})),r((()=>this.layer.purgeOptions),(()=>this._update())),r((()=>this.suspended),this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new o("stream-controller",this.pipelineErrorString):null}on(t,s){if(Array.isArray(t))return n(t.map((t=>this.on(t,s))));const i=["data-received","message-received"].includes(t);i&&this.getWorker().then((s=>s.streamMessenger.enableEvent(t,!0)));const e=super.on(t,s),r=this;return p((()=>{e.remove(),i&&(r._workerProxy.closed||r.hasEventListener(t)||r.getWorker().then((s=>s.streamMessenger.enableEvent(t,!1))))}))}async queryLatestObservations(t,s){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new o("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const i=await this.getWorker();return c(i.features.executeQueryForLatestObservations(this._cleanUpQuery(t),s).then((t=>{const s=a.fromJSON(t);return s.features.forEach((t=>{t.layer=this.layer,t.sourceLayer=this.layer})),s})),new a({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){null!=this._refreshInterval&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval((()=>this.incrementSourceRefreshVersion()),this.layer.updateInterval)}_doDisconnect(){this.getWorker().then((t=>t.streamMessenger.disconnect())),this._doPause()}_doConnect(){this.getWorker().then((t=>t.streamMessenger.connect())),this.resume()}_doClear(){this.getWorker().then((t=>t.streamMessenger.clear())),null==this._refreshInterval&&this.incrementSourceRefreshVersion()}_createClientOptions(){const t=super._createClientOptions(),s=this;return{...t,get container(){return s.featureContainer},setProperty:t=>{this.set(t.propertyName,t.value)}}}};t([s()],d.prototype,"pipelineConnectionStatus",void 0),t([s()],d.prototype,"pipelineErrorString",void 0),t([s({readOnly:!0})],d.prototype,"connectionError",null),t([s({readOnly:!0})],d.prototype,"_streamConnectionStatus",null),d=t([e("esri.views.2d.layers.StreamLayerView2D")],d);const l=d;export default l;
//# sourceMappingURL=p-5748998b.js.map