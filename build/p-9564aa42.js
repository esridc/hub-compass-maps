import{j as t,iX as i,iY as s,iZ as e,i_ as r,eX as h,di as a,n as p,r as n,p as c,q as o}from"./p-aad64c9f.js";import{r as l,n as m}from"./p-260ceb60.js";import{j as u,y as f}from"./p-bbb18646.js";import{i as j}from"./p-3e7cecc4.js";import"./p-2af77f97.js";import"./p-2527295a.js";import"./p-3f2fef32.js";import"./p-682c165c.js";import"./p-22458323.js";import"./p-1c4b55c0.js";import"./p-2ea4a2b9.js";import"./p-7ce0ff48.js";import"./p-a0004a96.js";import"./p-44881b12.js";import"./p-e7002be3.js";import"./p-717596a8.js";import"./p-204b6b8c.js";import"./p-9ad0e060.js";import"./p-c0b174ee.js";import"./p-875cbb57.js";import"./p-da522976.js";import"./p-aff89b86.js";import"./p-d492d39b.js";import"./p-d6556377.js";const d=[0,0];let w=class extends(j(l(u(f)))){constructor(){super(...arguments),this._tileStrategy=null,this._fetchQueue=null,this.layer=null}get tileMatrixSet(){const{activeLayer:i}=this.layer,{tileMatrixSet:s}=i;if(s&&t(s.tileInfo?.spatialReference,this.view.spatialReference))return s;const e=this._getTileMatrixSetBySpatialReference(i);return e&&e.id!==i.tileMatrixSetId?(i.tileMatrixSetId=e.id,e):null}update(t){this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume()}attach(){const t=this.tileMatrixSet?.tileInfo;t&&(this._tileInfoView=new i(t),this._fetchQueue=new s({tileInfoView:this._tileInfoView,concurrency:16,process:(t,i)=>this.fetchTile(t,i),scheduler:this.scheduler,priority:e.MAPVIEW_FETCH_QUEUE}),this._tileStrategy=new r({cachePolicy:"keep",resampling:!0,acquireTile:t=>this.acquireTile(t),releaseTile:t=>this.releaseTile(t),tileInfoView:this._tileInfoView}),this.addAttachHandles(this._updatingHandles.add((()=>[this.layer?.activeLayer?.styleId,this.tileMatrixSet]),(()=>this.doRefresh()))),super.attach())}detach(){super.detach(),this._tileStrategy?.destroy(),this._fetchQueue?.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(i){return this.layer.activeLayer.tileMatrixSets?.some((s=>t(s.tileInfo?.spatialReference,i)))??!1}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh((t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t))))}}acquireTile(t){const i=this._bitmapView.createTile(t),s=i.bitmap;return[s.x,s.y]=this._tileInfoView.getTileCoords(d,i.key),s.resolution=this._tileInfoView.getTileResolution(i.key),[s.width,s.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(i)),this._bitmapView.addChild(i),this.requestUpdate(),i}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",(()=>t.destroy())),this.requestUpdate()}async fetchTile(t,i={}){const s="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:e,resamplingLevel:r=0}=i;if(!s)return this._fetchImage(t,e);const p=new h(0,0,0,0);let n;try{await s.fetchAvailabilityUpsample(t.level,t.row,t.col,p,{signal:e}),n=await this._fetchImage(p,e)}catch(s){if(a(s))throw s;if(r<3){const s=this._tileInfoView.getTileParentId(t.id);if(s){const e=new h(s),a=await this.fetchTile(e,{...i,resamplingLevel:r+1});return m(this._tileInfoView,a,e,t)}}throw s}return m(this._tileInfoView,n,p,t)}canResume(){const t=super.canResume();return t?null!==this.tileMatrixSet:t}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const i=await this._fetchQueue.push(t.key);t.bitmap.source=i,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",(()=>this.requestUpdate()))}catch(t){a(t)||p.getLogger(this).error(t)}this.requestUpdate()}}async _fetchImage(t,i){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:i})}_getTileMatrixSetBySpatialReference(i){return i.tileMatrixSets?.find((i=>t(i.tileInfo?.spatialReference,this.view.spatialReference)))}};n([c({readOnly:!0})],w.prototype,"tileMatrixSet",null),w=n([o("esri.views.2d.layers.WMTSLayerView2D")],w);const b=w;export default b;
//# sourceMappingURL=p-9564aa42.js.map