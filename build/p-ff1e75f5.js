import{hx as t,a as i,X as a}from"./p-3013819f.js";class s{constructor(t,i=0,a=t.lods[t.lods.length-1].level){this.tileInfo=t,this.minLOD=i,this.maxLOD=a,t.lodAt(i)||(this.minLOD=t.lods[0].level),t.lodAt(a)||(this.maxLOD=t.lods[t.lods.length-1].level)}get effectiveMinLOD(){return this.minLOD??this.tileInfo.lods[0].level}get effectiveMaxLOD(){return this.maxLOD??this.tileInfo.lods[this.tileInfo.lods.length-1].level}getAvailability(t,i,a){const s=this.tileInfo?.lodAt(t);return!s||t<this.minLOD||t>this.maxLOD?"unavailable":s.cols&&s.rows?a>=s.cols[0]&&a<=s.cols[1]&&i>=s.rows[0]&&i<=s.rows[1]?"unknown":"unavailable":"unknown"}async fetchAvailability(a,s,e,n){await t(n);const l=this.getAvailability(a,s,e);if("unavailable"===l)throw new i("tile-map:tile-unavailable","Tile is not available",{level:a,row:s,col:e});return l}async fetchAvailabilityUpsample(i,s,e,n,l){await t(l),n.level=i,n.row=s,n.col=e;const h=this.tileInfo;return h.updateTileInfo(n),this.fetchAvailability(i,s,e,l).catch((t=>{if(a(t))throw t;if(h.upsampleTile(n))return this.fetchAvailabilityUpsample(n.level,n.row,n.col,n,l);throw t}))}}export{s as e};
//# sourceMappingURL=p-ff1e75f5.js.map