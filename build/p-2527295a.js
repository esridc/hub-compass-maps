import{av as t,dm as s,gK as i,dz as h,fe as e,dy as n,ed as r,eZ as l,d9 as a,dq as o,dV as u,ch as c,d8 as d,c4 as f,da as g}from"./p-aad64c9f.js";import{e as p}from"./p-3f2fef32.js";class x{constructor(t,s,i){this.pixelBlock=t,this.extent=s,this.originalPixelBlock=i}get width(){return null!=this.pixelBlock?this.pixelBlock.width:0}get height(){return null!=this.pixelBlock?this.pixelBlock.height:0}render(t){const s=this.pixelBlock;if(null==s)return;const i=this.filter({extent:this.extent,pixelBlock:this.originalPixelBlock??s});if(null==i.pixelBlock)return;i.pixelBlock.maskIsAlpha&&(i.pixelBlock.premultiplyAlpha=!0);const h=i.pixelBlock.getAsRGBA(),e=t.createImageData(i.pixelBlock.width,i.pixelBlock.height);e.data.set(h),t.putImageData(e,0,0)}getRenderedRasterPixels(){const t=this.filter({extent:this.extent,pixelBlock:this.pixelBlock});return null==t.pixelBlock?null:(t.pixelBlock.maskIsAlpha&&(t.pixelBlock.premultiplyAlpha=!0),{width:t.pixelBlock.width,height:t.pixelBlock.height,renderedRasterPixels:new Uint8Array(t.pixelBlock.getAsRGBA().buffer)})}}function w(t){return t&&"render"in t}function m(t){const s=document.createElement("canvas");return s.width=t.width,s.height=t.height,t.render(s.getContext("2d")),s}function v(t){return w(t)?t instanceof x?t.getRenderedRasterPixels()?.renderedRasterPixels:m(t):t}class y extends p{constructor(t=null,s=!1){super(),this.blendFunction="standard",this._sourceWidth=0,this._sourceHeight=0,this._textureInvalidated=!1,this._texture=null,this.stencilRef=0,this.coordScale=[1,1],this._height=void 0,this.pixelRatio=1,this.resolution=0,this.rotation=0,this._source=null,this._width=void 0,this.x=0,this.y=0,this.immutable=s,this.source=t,this.requestRender=this.requestRender.bind(this)}destroy(){this._texture&&(this._texture.dispose(),this._texture=null),null!=this._uploadStatus&&(this._uploadStatus.controller.abort(),this._uploadStatus=null)}get isSourceScaled(){return this.width!==this._sourceWidth||this.height!==this._sourceHeight}get height(){return void 0!==this._height?this._height:this._sourceHeight}set height(t){this._height=t}get source(){return this._source}set source(t){null==t&&null==this._source||(this._source=t,this.invalidateTexture(),this.requestRender())}get width(){return void 0!==this._width?this._width:this._sourceWidth}set width(t){this._width=t}beforeRender(t){super.beforeRender(t),this.updateTexture(t)}async setSourceAsync(i,h){null!=this._uploadStatus&&this._uploadStatus.controller.abort();const e=new AbortController,n=t();return s(h,(()=>e.abort())),s(e,(t=>n.reject(t))),this._uploadStatus={controller:e,resolver:n},this.source=i,n.promise}invalidateTexture(){this._textureInvalidated||(this._textureInvalidated=!0,this._source instanceof HTMLImageElement?(this._sourceHeight=this._source.naturalHeight,this._sourceWidth=this._source.naturalWidth):this._source&&(this._sourceHeight=this._source.height,this._sourceWidth=this._source.width))}transitionStep(t,s){t>=64&&(this.fadeTransitionEnabled=!1),super.transitionStep(t,s)}setTransform(t){const s=i(this.transforms.displayViewScreenMat3),[a,o]=t.toScreenNoRotation([0,0],[this.x,this.y]),u=this.resolution/this.pixelRatio/t.resolution,c=u*this.width,d=u*this.height,f=Math.PI*this.rotation/180;h(s,s,e(a,o)),h(s,s,e(c/2,d/2)),n(s,s,-f),h(s,s,e(-c/2,-d/2)),r(s,s,e(c,d)),l(this.transforms.displayViewScreenMat3,t.displayViewMat3,s)}setSamplingProfile(t){this._texture&&(t.mips&&!this._texture.descriptor.hasMipmap&&this._texture.generateMipmap(),this._texture.setSamplingMode(t.samplingMode))}bind(t,s){this._texture&&t.bindTexture(this._texture,s)}async updateTexture({context:t,painter:s}){if(!this._textureInvalidated)return;if(this._textureInvalidated=!1,this._texture||(this._texture=this._createTexture(t)),!this.source)return void this._texture.setData(null);this._texture.resize(this._sourceWidth,this._sourceHeight);const i=v(this.source);try{if(null!=this._uploadStatus){const{controller:t,resolver:h}=this._uploadStatus,e={signal:t.signal},{width:n,height:r}=this,l=this._texture,a=s.textureUploadManager;await a.enqueueTextureUpdate({data:i,texture:l,width:n,height:r},e),h.resolve(),this._uploadStatus=null}else this._texture.setData(i);this.ready()}catch(t){a(t)}}onDetach(){this.destroy()}_createTransforms(){return{displayViewScreenMat3:o()}}_createTexture(t){const s=this.immutable,i=new g;return i.internalFormat=s?u.RGBA8:c.RGBA,i.wrapMode=d.CLAMP_TO_EDGE,i.isImmutable=s,i.width=this._sourceWidth,i.height=this._sourceHeight,new f(t,i)}}export{y as S,m as f,w as g,x as l};
//# sourceMappingURL=p-2527295a.js.map