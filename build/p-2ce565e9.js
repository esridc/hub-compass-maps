import{eM as t,s as e,ly as s,lw as i,lu as r,d$ as n,di as o,n as a,j as l,bn as p,U as d,aH as c,lv as u}from"./p-aad64c9f.js";import{o as h,r as f,e as m,n as y,t as j}from"./p-875cbb57.js";import{m as g}from"./p-339b5e24.js";import{x as w,j as b}from"./p-e3657bc3.js";import{V as I}from"./p-02236077.js";import{I as F,N as T,E as x}from"./p-07f1865a.js";import{l as E,a as R,u as S}from"./p-4c90e3f2.js";import{j as v,p as _,d as D,f as O,y as P}from"./p-512046c6.js";import"./p-2af77f97.js";import"./p-da522976.js";import"./p-aff89b86.js";import"./p-d492d39b.js";import"./p-56b85bad.js";import"./p-5ae33da2.js";import"./p-1c285990.js";import"./p-e2849960.js";import"./p-bac7b09c.js";import"./p-cea3971b.js";import"./p-4295487d.js";import"./p-1317d6d9.js";import"./p-bdd45e95.js";import"./p-ca379176.js";import"./p-85c76b3c.js";import"./p-49632661.js";import"./p-e33d4456.js";const Q={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsQueryWithCacheHint:!0,supportsQueryWithDistance:!0,supportsQueryWithResultType:!0,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};class q{constructor(){this._queryEngine=null,this._snapshotFeatures=async t=>{const e=await this._fetch(t);return this._createFeatures(e)}}destroy(){this._queryEngine?.destroy(),this._queryEngine=this._createDefaultAttributes=null}async load(n,o={}){this._loadOptions={url:n.url,customParameters:n.customParameters};const a=[],[l]=await Promise.all([n.url?this._fetch(o?.signal):null,this._checkProjection(n.spatialReference)]),d=F(l,{geometryType:n.geometryType}),c=n.fields||d.fields||[],h=null!=n.hasZ?n.hasZ:d.hasZ,f=d.geometryType;let m=n.objectIdField||d.objectIdFieldName||"__OBJECTID";const y=n.spatialReference||p;let j=n.timeInfo;c===d.fields&&d.unknownFields.length>0&&a.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:d.unknownFields}});const w=new t(c);let b=w.get(m);b?("esriFieldTypeString"!==b.type&&(b.type="esriFieldTypeOID"),b.editable=!1,b.nullable=!1,m=b.name):(b={alias:m,name:m,type:"string"===d.objectIdFieldType?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},c.unshift(b));const T={};for(const t of c){if(null==t.name&&(t.name=t.alias),null==t.alias&&(t.alias=t.name),!t.name)throw new e("geojson-layer:invalid-field-name","field name is missing",{field:t});if(!s.jsonValues.includes(t.type))throw new e("geojson-layer:invalid-field-type",`invalid type for field "${t.name}"`,{field:t});if(t.name!==b.name){const e=i(t);void 0!==e&&(T[t.name]=e)}null==t.length&&(t.length=r(t))}if(j){if(j.startTimeField){const t=w.get(j.startTimeField);t?(j.startTimeField=t.name,t.type="esriFieldTypeDate"):j.startTimeField=null}if(j.endTimeField){const t=w.get(j.endTimeField);t?(j.endTimeField=t.name,t.type="esriFieldTypeDate"):j.endTimeField=null}if(j.trackIdField){const t=w.get(j.trackIdField);t?j.trackIdField=t.name:(j.trackIdField=null,a.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:j}}))}j.startTimeField||j.endTimeField||(a.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:j}}),j=null)}const x=f?S(f):void 0,v=w.dateFields.length?{timeZoneIANA:u}:null,_={warnings:a,featureErrors:[],layerDefinition:{...Q,drawingInfo:x??void 0,templates:E(T),extent:void 0,geometryType:f,objectIdField:m,fields:c,hasZ:!!h,timeInfo:j,dateFieldsTimeReference:v}};this._queryEngine=new I({fieldsIndex:t.fromLayerJSON({fields:c,timeInfo:j,dateFieldsTimeReference:v}),geometryType:f,hasM:!1,hasZ:h,objectIdField:m,spatialReference:y,timeInfo:j,featureStore:new g({geometryType:f,hasM:!1,hasZ:h})});const D=this._queryEngine.fieldsIndex.requiredFields.indexOf(b);D>-1&&this._queryEngine.fieldsIndex.requiredFields.splice(D,1),this._createDefaultAttributes=R(T,m);const O=await this._createFeatures(l);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,O);const P=this._normalizeFeatures(O,_.featureErrors);this._queryEngine.featureStore.addMany(P);const{fullExtent:q,timeExtent:C}=await this._queryEngine.fetchRecomputedExtents();if(_.layerDefinition.extent=q,C){const{start:t,end:e}=C;_.layerDefinition.timeInfo.timeExtent=[t,e]}return _}async applyEdits(t){const{spatialReference:e,geometryType:s}=this._queryEngine;return await Promise.all([v(e,s),w(t.adds,e),w(t.updates,e)]),await this._waitSnapshotComplete(),this._applyEdits(t)}async queryFeatures(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(t,e.signal)}async queryFeatureCount(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(t,e.signal)}async queryObjectIds(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(t,e.signal)}async queryExtent(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(t,e.signal)}async querySnapping(t,e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(t,e.signal)}async refresh(t){this._loadOptions.customParameters=t,this._snapshotTask?.abort(),this._snapshotTask=n(this._snapshotFeatures),this._snapshotTask.promise.then((t=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,t);const e=this._normalizeFeatures(t);e&&this._queryEngine.featureStore.addMany(e)}),(t=>{this._queryEngine.featureStore.clear(),o(t)||a.getLogger("esri.layers.GeoJSONLayer").error(new e("geojson-layer:refresh","An error occurred during refresh",{error:t}))})),await this._waitSnapshotComplete();const{fullExtent:s,timeExtent:i}=await this._queryEngine.fetchRecomputedExtents();return{extent:s,timeExtent:i}}async _createFeatures(t){if(null==t)return[];const{geometryType:e,hasZ:s,objectIdField:i}=this._queryEngine,r=T(t,{geometryType:e,hasZ:s,objectIdField:i});if(!l(this._queryEngine.spatialReference,p))for(const t of r)null!=t.geometry&&(t.geometry=h(b(f(t.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),p,this._queryEngine.spatialReference)));return r}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(t){const{url:e,customParameters:s}=this._loadOptions,i=(await d(e??"",{responseType:"json",query:{...s},signal:t})).data;return x(i),i}_normalizeFeatures(t,e){const{objectIdField:s,fieldsIndex:i}=this._queryEngine,r=[];for(const n of t){const t=this._createDefaultAttributes(),o=_(i,t,n.attributes,!0);o?e?.push(o):(this._assignObjectId(t,n.attributes,!0),n.attributes=t,n.objectId=t[s],r.push(n))}return r}async _applyEdits(t){const{adds:e,updates:s,deletes:i}=t,r={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(e?.length&&this._applyAddEdits(r,e),s?.length&&this._applyUpdateEdits(r,s),i?.length){for(const t of i)r.deleteResults.push(D(t));this._queryEngine.featureStore.removeManyById(i)}const{fullExtent:n,timeExtent:o}=await this._queryEngine.fetchRecomputedExtents();return{extent:n,timeExtent:o,featureEditResults:r}}_applyAddEdits(t,e){const{addResults:s}=t,{geometryType:i,hasM:r,hasZ:n,objectIdField:o,spatialReference:a,featureStore:l,fieldsIndex:p}=this._queryEngine,d=[];for(const r of e){if(r.geometry&&i!==c(r.geometry)){s.push(O("Incorrect geometry type."));continue}const e=this._createDefaultAttributes(),n=_(p,e,r.attributes);if(n)s.push(n);else{if(this._assignObjectId(e,r.attributes),r.attributes=e,null!=r.uid){const e=r.attributes[o];t.uidToObjectId[r.uid]=e}if(null!=r.geometry){const t=r.geometry.spatialReference??a;r.geometry=b(P(r.geometry,t),t,a)}d.push(r),s.push(D(r.attributes[o]))}}l.addMany(m([],d,i,n,r,o))}_applyUpdateEdits({updateResults:t},e){const{geometryType:s,hasM:i,hasZ:r,objectIdField:n,spatialReference:o,featureStore:a,fieldsIndex:l}=this._queryEngine;for(const p of e){const{attributes:e,geometry:d}=p,u=e?.[n];if(null==u){t.push(O(`Identifier field ${n} missing`));continue}if(!a.has(u)){t.push(O(`Feature with object id ${u} missing`));continue}const h=y(a.getFeature(u),s,r,i);if(null!=d){if(s!==c(d)){t.push(O("Incorrect geometry type."));continue}const e=d.spatialReference??o;h.geometry=b(P(d,e),e,o)}if(e){const s=_(l,h.attributes,e);if(s){t.push(s);continue}}a.add(j(h,s,r,i,n)),t.push(D(u))}}_createObjectIdGenerator(t,e){const s=t.fieldsIndex.get(t.objectIdField);if("esriFieldTypeString"===s.type)return()=>s.name+"-"+Date.now().toString(16);let i=Number.NEGATIVE_INFINITY;for(const t of e)t.objectId&&(i=Math.max(i,t.objectId));return i=Math.max(0,i)+1,()=>i++}_assignObjectId(t,e,s=!1){const i=this._queryEngine.objectIdField;t[i]=s&&i in e?e[i]:this._objectIdGenerator()}async _checkProjection(t){try{await w(p,t)}catch{throw new e("geojson-layer","Projection not supported")}}}export default q;
//# sourceMappingURL=p-2ce565e9.js.map