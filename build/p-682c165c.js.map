{"version":3,"names":["n","constructor","i","this","_rctx","_attributes","name","offset","type","r","SHORT","count","layout","hash","t","attributes","stride","_vertexBuffer","e","createVertex","s","STATIC_DRAW","Uint16Array","_vao","o","Map","a","_count","length","bind","bindVAO","unbind","dispose","draw","drawArrays","TRIANGLE_STRIP","brushEffect","prepareState","drawMany","visible","nearest","defines","samplingMode","NEAREST","mips","bilinear","LINEAR","bicubic","trilinear","LINEAR_MIPMAP_LINEAR","state","resolution","pixelRatio","Math","round","rotation","isSourceScaled","d","super","arguments","_desc","vsPath","fsPath","_quad","context","setBlendingEnabled","setColorMask","setStencilWriteMask","setStencilTestEnabled","renderingOptions","painter","l","requestRender","c","allowDelayedRender","m","source","isReady","p","u","materialManager","getProgram","compiled","timeline","begin","blendFunction","setBlendFunctionSeparate","ONE","ONE_MINUS_SRC_ALPHA","setStencilFunction","EQUAL","stencilRef","coordScale","f","computedOpacity","_","transforms","M","setSamplingProfile","useProgram","setUniformMatrix3fv","displayViewScreenMat3","setUniform1i","setUniform2fv","setUniform1f","end","Float32Array","y","w","N","Object","freeze","defineProperty","__proto__","ONES","UNIT_W","UNIT_X","UNIT_Y","UNIT_Z","ZEROS","clone","create","createView","fromValues","ones","unitW","unitX","unitY","unitZ","zeros","Symbol","toStringTag","value","background","bitBlit","debug","overlay","dot","filtering","heatmap","heatmapResolve","highlight","materials","fill","hittest","icon","heatmapAccumulate","label","line","pie","shared","text","blit","bloom","composite","gaussianBlur","luminosityHighPass","blur","dra","sobel","filterEffect","pp","raster","bitmap","common","flow","imagery","particles","streamlines","hillshade","lut","magdir","reproject","rfx","aspect","bandarithmetic","colormap2rgb","compositeband","computechange","contrast","convolution","curvature","extractband","focalstatistics","grayscale","local","mask","ndvi","remap","slope","stretch","vs","scalar","stencil","test","tileInfo","util","split","forEach","resolveIncludes","shaders","vertexShader","fragmentShader","geometry","location","_color","_program","setFaceCullingEnabled","setStencilOp","KEEP","REPLACE","ALWAYS","getVAO","bufferLayouts","indexBuffer","setUniform4fv","displayMat3","drawElements","TRIANGLES","size","UNSIGNED_INT","BYTE","UNSIGNED_SHORT","_initialized","_solidProgram","_solidVertexArrayObject","setDepthWriteEnabled","setDepthTestEnabled","_initialize","setStencilFunctionSeparate","FRONT_AND_BACK","GREATER","rangeX","rangeY","Int8Array","h","tileDebugInfoTexture","debugInfo","display","minOrderedLength","minUnorderedLength","triangleCount","memory","bytesUsed","bytesReserved","_destroyed","key","x","width","height","destroy","debugSlot","parent","_stage","children","indexOf","setTransform","tileMat3","toScreenNoRotation","displayViewMat3","destroyed","labelMat2d","viewMat2d","_createTransforms","containsScreenPoint","viewMat3","next","Array","isArray","data","values","last","_head","head","maxAvailableSpace","start","max","firstFit","free","clear","instance","materialKey","target","textureKey","indexEnd","extend","render","techniqueRef","getStencilReference","getAttributePrecisionPackFactors","instanceId","getMesh","drawCompute","drawGeometry","getComputeVAO","Uint32Array","BYTES_PER_ELEMENT","POINTS","getGeometryVAO","_length","_minOrderedLength","_materialKeys","Set","static","records","getInstance","addRecord","indexStart","indexCount","vertexStart","vertexCount","drawPhase","infos","_tail","STRICT_ORDER","_insert","g","E","symbologyPlane","STRICT_MARKERS_AND_TEXT","MARKER","TEXT","add","_insertAtHead","_insertAtEnd","_insertAtMiddle","_indexOnly","vertex","operations","index","copyRecord","push","srcFrom","dstFrom","mutate","has","acquireUint32Array","_array","_pool","array","getUint32View","buffer","byteOffset","expand","byteLength","set","releaseUint32Array","_data","ArrayBuffer","BYTE_LENGTH","_freeList","_pages","_pagesByBuffer","_bytesAllocated","_bytesTotal","console","log","_addPage","get","strideInt","bufferType","dirty","memoryStats","_gpu","_cpu","elementSize","intSize","fillPointer","byteSize","invalidated","bufferSize","invalidatedComputeBuffer","_gpuComputeTriangles","invalidate","_invalidateTriangleBuffer","freeList","ensure","min","getGPUBuffer","Error","_createComputeBuffer","_createBuffer","getView","insert","copyFrom","upload","setSubData","reshuffle","DYNAMIC_DRAW","createIndex","filter","locations","map","divisor","normalized","computeAttributeMap","_bufferPool","_layout","_invalidatedGeometry","_invalidatedCompute","_position","find","_indexBuffer","_computeVAO","disposeVAOOnly","_geometryVAO","getDrawArgs","primitive","packPrecisionFactor","getDebugVertexInfo","DataView","slice","vertices","_ensure","append","indices","vertexFrom","indexFrom","copyRecordFrom","overlaps","remove","_pos","_buffer","_i32View","Int32Array","_f32View","readInt32","readF32","entities","vertexData","getLogger","b","_meshes","_entities","_invalidated","_nextUploadAllowed","tileAge","_metrics","_entityIds","_entityIdsFromBuffer","_attributeEpoch","_encounteredEnd","_objectIdMap","enableDeferredUploads","_displayList","beforeRender","_needsReshuffle","reshuffleManager","schedule","tryReady","_uploadAllowed","id","ready","labelMetrics","hasData","hasAnimations","needsUpload","getDisplayList","sort","sortKey","BATCHING","fromDisplayEntities","getSortKeys","onMessage","objectIdMap","_onAppendMessage","_onUpdateMessage","_aggregateMemoryStats","attributeEpoch","isPixelBuffer","modify","_removeByIdsFromBuffer","_removeByIds","info","copyPixelBufferedEntitesFrom","_ensureMesh","bufferPool","_removeDuplicatedBufferedEntites","_insertVertexData","updateBaseOffsets","_tryInsertBufferedEntity","_insertEntity","metrics","error","_removeRecordsFromMesh","_remove","delete","entityTexel","splice","entityIds","objectId","displayId","T","_outlineProgram","_tileInfoProgram","_outlineVertexArrayObject","_tileInfoVertexArrayObject","_ctx","_loadWGLResources","setUniform2f","LINE_STRIP","_getTexture","bindTexture","descriptor","document","createElement","getContext","wrapMode","CLAMP_TO_EDGE","isImmutable","clearRect","canvas","textAlign","textBaseline","font","lineWidth","fillStyle","strokeStyle","strokeText","fillText","setData","_patternMatrix","_programOptions","pattern","displayLevel","styleLayer","backgroundMaterial","vectorTilesMaterialManager","getPaintValue","window","devicePixelRatio","v","spriteMosaic","j","A","L","getMaterialProgram","getMosaicItemPosition","tl","br","page","getPageSize","setUniform4f","z","level","getAttributeLocations","getLayoutInfo","requiredLevel","styleLayerUID","some","layerData","circleIndexCount","circleMaterial","I","U","VIEWPORT","setDataUniforms","prepareForRendering","vao","circleIndexStart","_fillProgramOptions","_outlineProgramOptions","renderPass","fillIndexCount","outlineIndexCount","getPaintProperty","isDataDriven","getValue","_drawFill","hasDataDrivenOutlineColor","outlineUsesFillColor","_drawOutline","P","D","fillMaterial","R","S","fillVAO","patternMap","fillIndexStart","outlineMaterial","outlineVAO","outlineIndexStart","sdf","lineIndexCount","lineMaterial","getDashKey","getLayoutValue","V","lineIndexStart","LN2","_iconProgramOptions","_sdfProgramOptions","_spritesTextureSize","_drawIcons","_drawText","iconMaterial","iconPerPageElementsMap","AUTO","POINT","MAP","isIconSDF","updateOpacityInfo","iconVAO","performance","now","lastOpacityUpdate","_renderIconRange","getWidth","getHeight","_setStencilState","glyphMosaic","textMaterial","glyphPerPageElementsMap","O","_glyphTextureSize","k","G","W","textVAO","_renderGlyphRange","is3D","stencilSymbols","clip","tileDebugInfo","vtlBackground","vtlFill","vtlLine","vtlCircle","vtlSymbol","UNSIGNED_BYTE","coords","lengths","_cache","primitiveType","isMapSpace","path","floor","fromPolygon","fromMapExtent","fromScreenExtent","xmin","ymin","xmax","ymax","toScreen","vertexBuffers","elementType","getIndexBuffer","getVertexBuffers","keys","reduce","_clip","stage","_handle","version","_invalidate","_destroyGL","mesh","_lastWidth","_lastHeight","_createMesh","fromPath","fromGeometry","clips","_updateClippingInfo","renderChildren","setPipelineState","_renderPasses","prepareRenderPasses","registerRenderPass","brushes","_clippingInfos","LABEL","LABEL_ALPHA","DEBUG","HIGHLIGHT","items","fromClipArea"],"sources":["./node_modules/@arcgis/core/views/2d/engine/webgl/VertexStream.js","./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrush.js","./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/BrushBitmap.js","./node_modules/@arcgis/core/core/libs/gl-matrix-2/factories/vec4f32.js","./node_modules/@arcgis/core/views/2d/engine/webgl/shaders/sources/shaderRepository.js","./node_modules/@arcgis/core/views/2d/engine/webgl/shaders/sources/resolver.js","./node_modules/@arcgis/core/views/2d/engine/webgl/shaders/BackgroundPrograms.js","./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/BrushClip.js","./node_modules/@arcgis/core/views/2d/engine/webgl/DefaultVertexAttributeLayouts.js","./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushStencil.js","./node_modules/@arcgis/core/views/2d/engine/webgl/TiledDisplayObject.js","./node_modules/@arcgis/core/views/2d/engine/webgl/AFeatureTile.js","./node_modules/@arcgis/core/views/2d/engine/webgl/cpuMapped/FreeList.js","./node_modules/@arcgis/core/views/2d/engine/webgl/FeatureDisplayList.js","./node_modules/@arcgis/core/views/2d/engine/webgl/ReshufflePlan.js","./node_modules/@arcgis/core/views/2d/engine/webgl/PooledUint32Array.js","./node_modules/@arcgis/core/views/2d/engine/webgl/cpuMapped/Buffer.js","./node_modules/@arcgis/core/views/2d/engine/webgl/cpuMapped/MappedMesh.js","./node_modules/@arcgis/core/views/2d/engine/webgl/util/Reader.js","./node_modules/@arcgis/core/views/2d/engine/webgl/mesh/meshDebugUtils.js","./node_modules/@arcgis/core/views/2d/engine/webgl/FeatureTile.js","./node_modules/@arcgis/core/views/2d/engine/webgl/shaders/TileInfoPrograms.js","./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushTileDebugInfo.js","./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushVTLBackground.js","./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushVTLCircle.js","./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushVTLFill.js","./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushVTLLine.js","./node_modules/@arcgis/core/views/2d/engine/webgl/GeometryUtils.js","./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushVTLSymbol.js","./node_modules/@arcgis/core/views/2d/engine/brushes.js","./node_modules/@arcgis/core/views/2d/engine/webgl/Mesh2D.js","./node_modules/@arcgis/core/views/2d/engine/webgl/ClippingInfo.js","./node_modules/@arcgis/core/views/2d/engine/webgl/WGLContainer.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport{vertexLayoutHash as t}from\"./shaderGraph/techniques/mesh/utils.js\";import{BufferObject as e}from\"../../../webgl/BufferObject.js\";import{DataType as r,Usage as s,PrimitiveType as i}from\"../../../webgl/enums.js\";import{VertexArrayObject as o}from\"../../../webgl/VertexArrayObject.js\";import{VertexElementDescriptor as a}from\"../../../webgl/VertexElementDescriptor.js\";class n{constructor(i,n){this._rctx=i,this._attributes=[{name:\"position\",offset:0,type:r.SHORT,count:2}],this.layout={hash:t(this._attributes),attributes:this._attributes,stride:4},this._vertexBuffer=e.createVertex(i,s.STATIC_DRAW,new Uint16Array(n)),this._vao=new o(i,new Map([[\"a_position\",0]]),new Map([[\"geometry\",[new a(\"a_position\",2,r.SHORT,0,4)]]]),new Map([[\"geometry\",this._vertexBuffer]])),this._count=n.length/2}bind(){this._rctx.bindVAO(this._vao)}unbind(){this._rctx.bindVAO(null)}dispose(){this._vao.dispose()}draw(){this._rctx.bindVAO(this._vao),this._rctx.drawArrays(i.TRIANGLE_STRIP,0,this._count)}}export{n as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nclass t{constructor(){this.name=this.constructor.name||\"UnnamedBrush\",this.brushEffect=null}prepareState(t,r){}draw(t,r,s){}drawMany(t,r,s){for(const a of r)a.visible&&this.draw(t,a,s)}}export{t as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport{textureBindingBitmap as e}from\"../definitions.js\";import t from\"../VertexStream.js\";import i from\"./WGLBrush.js\";import{TextureSamplingMode as s,BlendFactor as n,CompareFunction as a}from\"../../../../webgl/enums.js\";const r={nearest:{defines:[],samplingMode:s.NEAREST,mips:!1},bilinear:{defines:[],samplingMode:s.LINEAR,mips:!1},bicubic:{defines:[\"bicubic\"],samplingMode:s.LINEAR,mips:!1},trilinear:{defines:[],samplingMode:s.LINEAR_MIPMAP_LINEAR,mips:!0}},o=(e,t,i)=>{if(\"dynamic\"===i.samplingMode){const{state:i}=e,s=t.resolution/t.pixelRatio/i.resolution,n=Math.round(e.pixelRatio)!==e.pixelRatio,a=s>1.05||s<.95;return i.rotation||a||n||t.isSourceScaled||t.rotation?r.bilinear:r.nearest}return r[i.samplingMode]};class d extends i{constructor(){super(...arguments),this._desc={vsPath:\"raster/bitmap\",fsPath:\"raster/bitmap\",attributes:new Map([[\"a_pos\",0]])}}dispose(){this._quad&&this._quad.dispose()}prepareState({context:e}){e.setBlendingEnabled(!0),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0)}draw(i,s){const{context:r,renderingOptions:d,painter:l,requestRender:c,allowDelayedRender:m}=i;if(!s.source||!s.isReady)return;const p=o(i,s,d),u=l.materialManager.getProgram(this._desc,p.defines);if(m&&null!=c&&!u.compiled)return void c();i.timeline.begin(this.name),\"additive\"===s.blendFunction?r.setBlendFunctionSeparate(n.ONE,n.ONE,n.ONE,n.ONE):r.setBlendFunctionSeparate(n.ONE,n.ONE_MINUS_SRC_ALPHA,n.ONE,n.ONE_MINUS_SRC_ALPHA),r.setStencilFunction(a.EQUAL,s.stencilRef,255),this._quad||(this._quad=new t(r,[0,0,1,0,0,1,1,1]));const{coordScale:f,computedOpacity:_,transforms:M}=s;s.setSamplingProfile(p),s.bind(i.context,e),r.useProgram(u),u.setUniformMatrix3fv(\"u_dvsMat3\",M.displayViewScreenMat3),u.setUniform1i(\"u_texture\",e),u.setUniform2fv(\"u_coordScale\",f),u.setUniform1f(\"u_opacity\",_),this._quad.draw(),i.timeline.end(this.name)}}export{d as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nfunction n(){return new Float32Array(4)}function t(n){const t=new Float32Array(4);return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t}function r(n,t,r,e){const o=new Float32Array(4);return o[0]=n,o[1]=t,o[2]=r,o[3]=e,o}function e(n,t){return new Float32Array(n,t,4)}function o(){return n()}function u(){return r(1,1,1,1)}function c(){return r(1,0,0,0)}function i(){return r(0,1,0,0)}function a(){return r(0,0,1,0)}function f(){return r(0,0,0,1)}const l=o(),_=u(),s=c(),y=i(),w=a(),N=f(),T=Object.freeze(Object.defineProperty({__proto__:null,ONES:_,UNIT_W:N,UNIT_X:s,UNIT_Y:y,UNIT_Z:w,ZEROS:l,clone:t,create:n,createView:e,fromValues:r,ones:u,unitW:f,unitX:c,unitY:i,unitZ:a,zeros:o},Symbol.toStringTag,{value:\"Module\"}));export{_ as ONES,N as UNIT_W,s as UNIT_X,y as UNIT_Y,w as UNIT_Z,l as ZEROS,t as clone,n as create,e as createView,r as fromValues,u as ones,f as unitW,c as unitX,i as unitY,a as unitZ,T as v,o as zeros};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nconst e={background:{\"background.frag\":\"uniform lowp vec4 u_color;\\nvoid main() {\\ngl_FragColor = u_color;\\n}\",\"background.vert\":\"attribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump vec2 u_coord_range;\\nuniform mediump float u_depth;\\nvoid main() {\\nvec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\\n}\"},bitBlit:{\"bitBlit.frag\":\"uniform lowp sampler2D u_tex;\\nuniform lowp float u_opacity;\\nvarying mediump vec2 v_uv;\\nvoid main() {\\nlowp vec4 color = texture2D(u_tex, v_uv);\\ngl_FragColor = color * u_opacity;\\n}\",\"bitBlit.vert\":\"attribute vec2 a_pos;\\nattribute vec2 a_tex;\\nvarying mediump vec2 v_uv;\\nvoid main(void) {\\ngl_Position = vec4(a_pos , 0.0, 1.0);\\nv_uv = a_tex;\\n}\"},debug:{overlay:{\"overlay.frag\":\"precision mediump float;\\nvarying vec4 v_color;\\nvoid main(void) {\\ngl_FragColor = v_color;\\n}\",\"overlay.vert\":\"attribute vec3 a_PositionAndFlags;\\nuniform mat3 u_dvsMat3;\\nuniform vec4 u_colors[4];\\nuniform float u_opacities[4];\\nvarying vec4 v_color;\\nvoid main(void) {\\nvec2 position = a_PositionAndFlags.xy;\\nfloat flags = a_PositionAndFlags.z;\\nint colorIndex = int(mod(flags, 4.0));\\nvec4 color;\\nfor (int i = 0; i < 4; i++) {\\ncolor = u_colors[i];\\nif (i == colorIndex) {\\nbreak;\\n}\\n}\\nint opacityIndex = int(mod(floor(flags / 4.0), 4.0));\\nfloat opacity;\\nfor (int i = 0; i < 4; i++) {\\nopacity = u_opacities[i];\\nif (i == opacityIndex) {\\nbreak;\\n}\\n}\\nv_color = color * opacity;\\ngl_Position = vec4((u_dvsMat3 * vec3(position, 1.0)).xy, 0.0, 1.0);\\n}\"}},dot:{dot:{\"dot.frag\":\"precision mediump float;\\nvarying vec4 v_color;\\nvarying float v_dotRatio;\\nvarying float v_invEdgeRatio;\\nuniform highp float u_tileZoomFactor;\\nvoid main()\\n{\\nfloat dist = length(gl_PointCoord - vec2(.5, .5)) * 2.;\\nfloat alpha = smoothstep(0., 1., v_invEdgeRatio * (dist - v_dotRatio) + 1.);\\ngl_FragColor = v_color * alpha;\\n}\",\"dot.vert\":\"precision highp float;\\nattribute vec2 a_pos;\\nuniform sampler2D u_texture;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp float u_tileZoomFactor;\\nuniform highp float u_dotSize;\\nuniform highp float u_pixelRatio;\\nvarying vec2 v_pos;\\nvarying vec4 v_color;\\nvarying float v_dotRatio;\\nvarying float v_invEdgeRatio;\\nconst float EPSILON = 0.000001;\\nvoid main()\\n{\\nmat3 tileToTileTexture = mat3(  1., 0., 0.,\\n0., -1., 0.,\\n0., 1., 1.  );\\nvec3 texCoords = tileToTileTexture * vec3(a_pos.xy / 512., 1.);\\nv_color = texture2D(u_texture, texCoords.xy);\\nfloat smoothEdgeWidth = max(u_dotSize / 2., 1.) ;\\nfloat z = 0.;\\nz += 2.0 * step(v_color.a, EPSILON);\\ngl_PointSize = (smoothEdgeWidth + u_dotSize);\\ngl_Position = vec4((u_dvsMat3 * vec3(a_pos + .5, 1.)).xy, z, 1.);\\nv_dotRatio = u_dotSize / gl_PointSize;\\nv_invEdgeRatio = -1. / ( smoothEdgeWidth / gl_PointSize );\\ngl_PointSize  *= (u_pixelRatio * u_tileZoomFactor);\\n}\"}},filtering:{\"bicubic.glsl\":\"vec4 computeWeights(float v) {\\nfloat b = 1.0 / 6.0;\\nfloat v2 = v * v;\\nfloat v3 = v2 * v;\\nfloat w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\\nfloat w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\\nfloat w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\\nfloat w3 = b * v3;\\nreturn vec4(w0, w1, w2, w3);\\n}\\nvec4 bicubicOffsetsAndWeights(float v) {\\nvec4 w = computeWeights(v);\\nfloat g0 = w.x + w.y;\\nfloat g1 = w.z + w.w;\\nfloat h0 = 1.0 - (w.y / g0) + v;\\nfloat h1 = 1.0 + (w.w / g1) - v;\\nreturn vec4(h0, h1, g0, g1);\\n}\\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\\nvec2 eX = vec2(1.0 / texSize.x, 0.0);\\nvec2 eY = vec2(0.0, 1.0 / texSize.y);\\nvec2 texel = coords * texSize - 0.5;\\nvec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\\nvec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\\nvec2 coords10 = coords + hgX.x * eX;\\nvec2 coords00 = coords - hgX.y * eX;\\nvec2 coords11 = coords10 + hgY.x * eY;\\nvec2 coords01 = coords00 + hgY.x * eY;\\ncoords10 = coords10 - hgY.y * eY;\\ncoords00 = coords00 - hgY.y * eY;\\nvec4 color00 = texture2D(sampler, coords00);\\nvec4 color10 = texture2D(sampler, coords10);\\nvec4 color01 = texture2D(sampler, coords01);\\nvec4 color11 = texture2D(sampler, coords11);\\ncolor00 = mix(color00, color01, hgY.z);\\ncolor10 = mix(color10, color11, hgY.z);\\ncolor00 = mix(color00, color10, hgX.z);\\nreturn color00;\\n}\",\"bilinear.glsl\":\"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\\nvec2 texelStart = floor(coords * texSize);\\nvec2 coord0 = texelStart / texSize;\\nvec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\\nvec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\\nvec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\\nvec4 color0 = texture2D(sampler, coord0);\\nvec4 color1 = texture2D(sampler, coord1);\\nvec4 color2 = texture2D(sampler, coord2);\\nvec4 color3 = texture2D(sampler, coord3);\\nvec2 blend = fract(coords * texSize);\\nvec4 color01 = mix(color0, color1, blend.x);\\nvec4 color23 = mix(color2, color3, blend.x);\\nvec4 color = mix(color01, color23, blend.y);\\n#ifdef NNEDGE\\nfloat alpha = floor(color0.a * color1.a * color2.a * color3.a + 0.5);\\ncolor = color * alpha + (1.0 - alpha) * texture2D(sampler, coords);\\n#endif\\nreturn color;\\n}\",\"epx.glsl\":\"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\\nvec2 invSize = 1.0 / texSize;\\nvec2 texel = coords * texSize;\\nvec2 texel_i = floor(texel);\\nvec2 texel_frac = fract(texel);\\nvec4 colorP = texture2D(sampler, texel_i * invSize);\\nvec4 colorP1 = vec4(colorP);\\nvec4 colorP2 = vec4(colorP);\\nvec4 colorP3 = vec4(colorP);\\nvec4 colorP4 = vec4(colorP);\\nvec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\\nvec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\\nvec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\\nvec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\\nif (colorC == colorA && colorC != colorD && colorA != colorB) {\\ncolorP1 = colorA;\\n}\\nif (colorA == colorB && colorA != colorC && colorB != colorD) {\\ncolorP2 = colorB;\\n}\\nif (colorD == colorC && colorD != colorB && colorC != colorA) {\\ncolorP3 = colorC;\\n}\\nif (colorB == colorD && colorB != colorA && colorD != colorC) {\\ncolorP4 = colorD;\\n}\\nvec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\\nvec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\\nreturn mix(colorP12, colorP34, texel_frac.y);\\n}\"},heatmap:{heatmapResolve:{\"heatmapResolve.frag\":\"precision highp float;\\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\\n#define COMPRESSION_FACTOR 4.0\\n#else\\n#define COMPRESSION_FACTOR 1.0\\n#endif\\nuniform sampler2D u_texture;\\nuniform sampler2D u_gradient;\\nuniform vec2 u_densityMinAndInvRange;\\nuniform float u_densityNormalization;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 data = texture2D(u_texture, v_uv);\\nfloat density = data.r * COMPRESSION_FACTOR;\\ndensity *= u_densityNormalization;\\ndensity = (density - u_densityMinAndInvRange.x) * u_densityMinAndInvRange.y;\\nvec4 color = texture2D(u_gradient, vec2(density, 0.5));\\ngl_FragColor = vec4(color.rgb * color.a, color.a);\\n}\",\"heatmapResolve.vert\":\"precision highp float;\\nattribute vec2 a_pos;\\nvarying vec2 v_uv;\\nvoid main() {\\nv_uv = a_pos;\\ngl_Position = vec4(a_pos * 2.0 - 1.0, 1., 1.);\\n}\"}},highlight:{\"blur.frag\":\"varying mediump vec2 v_texcoord;\\nuniform mediump vec4 u_direction;\\nuniform mediump mat4 u_channelSelector;\\nuniform mediump float u_sigma;\\nuniform sampler2D u_texture;\\nmediump float gauss1(mediump vec2 dir) {\\nreturn exp(-dot(dir, dir) / (2.0 * u_sigma * u_sigma));\\n}\\nmediump vec4 selectChannel(mediump vec4 sample) {\\nreturn u_channelSelector * sample;\\n}\\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\\nmediump float w = gauss1(i * u_direction.xy);\\ntot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\\nweight += w;\\n}\\nvoid main(void) {\\nmediump float tot = 0.0;\\nmediump float weight = 0.0;\\naccumGauss1(-5.0, tot, weight);\\naccumGauss1(-4.0, tot, weight);\\naccumGauss1(-3.0, tot, weight);\\naccumGauss1(-2.0, tot, weight);\\naccumGauss1(-1.0, tot, weight);\\naccumGauss1(0.0, tot, weight);\\naccumGauss1(1.0, tot, weight);\\naccumGauss1(2.0, tot, weight);\\naccumGauss1(3.0, tot, weight);\\naccumGauss1(4.0, tot, weight);\\naccumGauss1(5.0, tot, weight);\\ngl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\\n}\",\"highlight.frag\":\"varying mediump vec2 v_texcoord;\\nuniform sampler2D u_texture;\\nuniform mediump float u_sigma;\\nuniform sampler2D u_shade;\\nuniform mediump vec2 u_minMaxDistance;\\nmediump float estimateDistance() {\\nmediump float y = texture2D(u_texture, v_texcoord)[3];\\nconst mediump float y0 = 0.5;\\nmediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * u_sigma);\\nmediump float d = (y - y0) / m0;\\nreturn d;\\n}\\nmediump vec4 shade(mediump float d) {\\nmediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\\nmappedDistance = clamp(mappedDistance, 0.0, 1.0);\\nreturn texture2D(u_shade, vec2(mappedDistance, 0.5));\\n}\\nvoid main(void) {\\nmediump float d = estimateDistance();\\ngl_FragColor = shade(d);\\n}\",\"textured.vert\":\"attribute mediump vec2 a_position;\\nattribute mediump vec2 a_texcoord;\\nvarying mediump vec2 v_texcoord;\\nvoid main(void) {\\ngl_Position = vec4(a_position, 0.0, 1.0);\\nv_texcoord = a_texcoord;\\n}\"},materials:{\"attributeData.glsl\":\"uniform highp sampler2D filterFlags;\\nuniform highp sampler2D animation;\\nuniform highp sampler2D gpgpu;\\nuniform highp sampler2D visualVariableData;\\nuniform highp sampler2D dataDriven0;\\nuniform highp sampler2D dataDriven1;\\nuniform highp sampler2D dataDriven2;\\nuniform float size;\\nhighp vec2 getAttributeDataCoords(in highp vec3 id) {\\nhighp vec3  texel = unpackDisplayIdTexel(id);\\nhighp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256);\\nhighp float col = mod(u32, size);\\nhighp float row = (u32 - col) / size;\\nhighp float u = col / size;\\nhighp float v = row / size;\\nreturn vec2(u, v);\\n}\\nhighp vec2 getAttributeDataTextureCoords(in highp vec3 id) {\\nreturn (getAttributeDataCoords(id) * 2.0) - 1.0 + (.5 / vec2(size));\\n}\\nhighp vec4 getFilterData(in highp vec3 id) {\\nvec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(filterFlags, coords);\\n}\\nhighp vec4 getAnimation(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(animation, coords);\\n}\\nhighp vec4 getVisualVariableData(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(visualVariableData, coords);\\n}\\nhighp vec4 getDataDriven0(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(dataDriven0, coords);\\n}\\nhighp vec4 getDataDriven1(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(dataDriven1, coords);\\n}\\nhighp vec4 getGPGPU(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(gpgpu, coords);\\n}\\nhighp vec4 getDataDriven2(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(dataDriven2, coords);\\n}\\nfloat u88VVToFloat(in vec2 v) {\\nbool isMagic = v.x == 255.0 && v.y == 255.0;\\nif (isMagic) {\\nreturn NAN_MAGIC_NUMBER;\\n}\\nreturn (v.x + v.y * float(0x100)) - 32768.0;\\n}\",\"barycentric.glsl\":\"float inTriangle(vec3 bary) {\\nvec3 absBary = abs(bary);\\nreturn step((absBary.x + absBary.y + absBary.z), 1.05);\\n}\\nvec3 xyToBarycentric(in vec2 pos, in vec2 v0,  in vec2 v1, in vec2 v2) {\\nmat3 xyToBarycentricMat3 = mat3(\\nv1.x * v2.y - v2.x * v1.y, v2.x * v0.y - v0.x * v2.y, v0.x * v1.y - v1.x * v0.y,\\nv1.y - v2.y, v2.y - v0.y, v0.y - v1.y,\\nv2.x - v1.x, v0.x - v2.x, v1.x - v0.x\\n);\\nfloat A2 = v0.x * (v1.y - v2.y) + v1.x * (v2.y - v0.y) + v2.x * (v0.y - v1.y);\\nreturn (1. / A2) * xyToBarycentricMat3 * vec3(1., pos);\\n}\",\"constants.glsl\":\"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\\nconst float C_RAD_TO_DEG = 180.0 / 3.141592654;\\nconst float POSITION_PRECISION = 1.0 / 8.0;\\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\\nconst float SOFT_EDGE_RATIO = 1.0;\\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\\nconst float THIN_LINE_HALF_WIDTH = 1.0;\\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\\nconst float OFFSET_PRECISION = 1.0 / 8.0;\\nconst float OUTLINE_SCALE = 1.0 / 5.0;\\nconst float SDF_FONT_SIZE = 24.0;\\nconst float MAX_SDF_DISTANCE = 8.0;\\nconst float PLACEMENT_PADDING = 8.0;\\nconst float EPSILON = 0.00001;\\nconst float EPSILON_HITTEST = 0.05;\\nconst int MAX_FILTER_COUNT = 2;\\nconst int ATTR_VV_SIZE = 0;\\nconst int ATTR_VV_COLOR = 1;\\nconst int ATTR_VV_OPACITY = 2;\\nconst int ATTR_VV_ROTATION = 3;\\nconst highp float NAN_MAGIC_NUMBER = 1e-30;\\nconst int BITSET_GENERIC_LOCK_COLOR = 1;\\nconst int BITSET_GENERIC_CONSIDER_ALPHA_ONLY = 4;\\nconst int BITSET_MARKER_ALIGNMENT_MAP = 0;\\nconst int BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE = 2;\\nconst int BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY = 3;\\nconst int BITSET_TYPE_FILL_OUTLINE = 0;\\nconst int BITSET_FILL_RANDOM_PATTERN_OFFSET = 2;\\nconst int BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR = 3;\\nconst int BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR = 5;\\nconst int BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR = 6;\\nconst int BITSET_LINE_SCALE_DASH = 2;\",fill:{\"common.glsl\":\"#include <materials/symbologyTypeUtils.glsl>\\n#ifdef PATTERN\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_sampleAlphaOnly;\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nuniform lowp vec4 u_isActive[ 2 ];\\nuniform highp float u_dotValue;\\nuniform highp float u_tileDotsOverArea;\\nuniform highp float u_dotTextureDotCount;\\nuniform mediump float u_tileZoomFactor;\\n#endif\\nvarying highp vec3 v_id;\\nvarying lowp vec4 v_color;\\nvarying lowp float v_opacity;\\nvarying mediump vec4 v_aux1;\\n#ifdef PATTERN\\nvarying mediump vec2 v_tileTextureCoord;\\n#endif\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nvarying lowp float v_isOutline;\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nvarying highp vec2 v_dotTextureCoords;\\nvarying highp vec4 v_dotThresholds[ 2 ];\\n#endif\",\"fill.frag\":\"precision highp float;\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/fill/common.glsl>\\n#ifdef PATTERN\\nuniform lowp sampler2D u_texture;\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nuniform mediump mat4 u_dotColors[ 2 ];\\nuniform sampler2D u_dotTextures[ 2 ];\\nuniform vec4 u_dotBackgroundColor;\\n#endif\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.frag>\\nlowp vec4 drawLine() {\\nfloat v_lineWidth = v_aux1.x;\\nvec2  v_normal    = v_aux1.yz;\\nLineData inputs = LineData(\\nv_color,\\nv_normal,\\nv_lineWidth,\\nv_opacity,\\nv_id\\n);\\nreturn shadeLine(inputs);\\n}\\n#endif\\nlowp vec4 drawFill() {\\nlowp vec4 out_color = vec4(0.);\\n#ifdef HITTEST\\nout_color = v_color;\\n#elif defined(PATTERN)\\nmediump vec4 v_tlbr = v_aux1;\\nmediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\\nmediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\\nlowp vec4 color = texture2D(u_texture, samplePos);\\nif (v_sampleAlphaOnly > 0.5) {\\ncolor.rgb = vec3(color.a);\\n}\\nout_color = v_opacity * v_color * color;\\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY && !defined(HIGHLIGHT)\\nvec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\\nvec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\\nvec4 difference0 = v_dotThresholds[0] - textureThresholds0;\\nvec4 difference1 = v_dotThresholds[1] - textureThresholds1;\\n#ifdef DD_DOT_BLENDING\\nvec4 isPositive0 = step(0.0, difference0);\\nvec4 isPositive1 = step(0.0, difference1);\\nfloat weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\\nfloat lessThanEqZero = step(weightSum, 0.0);\\nfloat greaterThanZero = 1.0 - lessThanEqZero ;\\nfloat divisor = (weightSum + lessThanEqZero);\\nvec4 weights0 = difference0 * isPositive0 / divisor;\\nvec4 weights1 = difference1 * isPositive1 / divisor;\\nvec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\\nvec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\\n#else\\nfloat diffMax = max(max4(difference0), max4(difference1));\\nfloat lessThanZero = step(diffMax, 0.0);\\nfloat greaterOrEqZero = 1.0 - lessThanZero;\\nvec4 isMax0 = step(diffMax, difference0);\\nvec4 isMax1 = step(diffMax, difference1);\\nvec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\\nvec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\\n#endif\\nout_color = preEffectColor;\\n#else\\nout_color = v_opacity * v_color;\\n#endif\\n#ifdef HIGHLIGHT\\nout_color.a = 1.0;\\n#endif\\nreturn out_color;\\n}\\nvoid main() {\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nif (v_isOutline > 0.5) {\\ngl_FragColor = drawLine();\\n} else {\\ngl_FragColor = drawFill();\\n}\\n#else\\ngl_FragColor = drawFill();\\n#endif\\n}\",\"fill.vert\":\"#include <materials/symbologyTypeUtils.glsl>\\n#define PACKED_LINE\\nprecision highp float;\\nattribute float a_bitset;\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nattribute float a_inverseArea;\\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\\nvec2 a_zoomRange = vec2(0.0, 10000.0);\\n#else\\nattribute vec4 a_color;\\nattribute vec4 a_aux2;\\nattribute vec4 a_aux3;\\n#ifndef SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\\nattribute vec4 a_aux1;\\nattribute vec2 a_zoomRange;\\n#else\\nvec2 a_zoomRange = vec2(0.0, 10000.0);\\n#endif\\n#endif\\nuniform vec2 u_tileOffset;\\nuniform vec2 u_maxIntNumOfCrossing;\\n#include <util/encoding.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/fill/common.glsl>\\n#include <materials/fill/hittest.glsl>\\nconst float INV_SCALE_COMPRESSION_FACTOR = 1.0 / 128.0;\\nconst float MAX_REPRESENTABLE_INT = 16777216.0;\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\\nreturn featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\\n}\\n#endif\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.vert>\\nvoid drawLine(out lowp vec4 out_color, out highp vec3 out_pos) {\\nLineData outputs = buildLine(\\nout_pos,\\na_id,\\na_pos,\\na_color,\\n(a_aux3.xy - 128.) / 16.,\\n(a_aux3.zw - 128.) / 16.,\\n0.,\\na_aux2.z / 16.,\\na_bitset,\\nvec4(0.),\\nvec2(0.),\\na_aux2.w / 16.\\n);\\nv_id      = outputs.id;\\nv_opacity = outputs.opacity;\\nv_aux1    = vec4(outputs.lineHalfWidth, outputs.normal, 0.);\\nout_color = outputs.color;\\n}\\n#endif\\nvoid drawFill(out lowp vec4 out_color, out highp vec3 out_pos) {\\nfloat a_bitSet = a_bitset;\\nout_color = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\\nv_opacity = getOpacity();\\nv_id      = norm(a_id);\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nmat3 tileToTileNormalized = mat3(  2. / 512.,  0.,  0.,\\n0., -2. / 512.,  0.,\\n-1.,  1.,  1.  );\\nout_pos   = tileToTileNormalized * vec3((a_pos * FILL_POSITION_PRECISION), 1.);\\n#else\\nout_pos   = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\\n#endif\\n#ifdef PATTERN\\nvec4  a_tlbr   = a_aux1;\\nfloat a_width  = a_aux2.x;\\nfloat a_height = a_aux2.y;\\nvec2  a_offset = a_aux2.zw;\\nvec2  a_scale  = a_aux3.xy;\\nfloat a_angle  = a_aux3.z;\\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR) > 0.5) {\\na_width *= INV_SCALE_COMPRESSION_FACTOR;\\n}\\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR) > 0.5) {\\na_height *= INV_SCALE_COMPRESSION_FACTOR;\\n}\\nvec2 scale = INV_SCALE_COMPRESSION_FACTOR * a_scale;\\nfloat width = u_zoomFactor * a_width * scale.x;\\nfloat height = u_zoomFactor * a_height * scale.y;\\nfloat angle = C_256_TO_RAD * a_angle;\\nfloat sinA = sin(angle);\\nfloat cosA = cos(angle);\\nfloat dx = 0.0;\\nfloat dy = 0.0;\\nif (getBit(a_bitset, BITSET_FILL_RANDOM_PATTERN_OFFSET) > 0.5) {\\nfloat id = rgba2float(vec4(a_id, 0.0));\\ndx = rand(vec2(id, 0.0));\\ndy = rand(vec2(0.0, id));\\n}\\nmat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\\n-sinA / width, cosA / height, 0,\\ndx,            dy,           1);\\nvec2 patternSize = vec2(a_width, a_height);\\nvec2 numPatternsPerMaxInt = vec2(MAX_REPRESENTABLE_INT) / patternSize;\\nvec2 maxIntCrossingOffsetCorrection = patternSize * fract(u_maxIntNumOfCrossing * numPatternsPerMaxInt);\\nvec2 tileOffset = u_tileOffset + maxIntCrossingOffsetCorrection - 0.5 * patternSize;\\ntileOffset = vec2(tileOffset.x * cosA - tileOffset.y * sinA, tileOffset.x * sinA + tileOffset.y * cosA);\\ntileOffset = mod(tileOffset, patternSize);\\nvec2 symbolOffset = u_zoomFactor * scale * vec2(a_offset - tileOffset) / vec2(width, height);\\nv_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\\nv_aux1 = a_tlbr / u_mosaicSize.xyxy;\\nv_sampleAlphaOnly = getBit(a_bitset, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\\nif (getBit(a_bitSet, BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR) > 0.5) {\\n#ifdef VV_COLOR\\nv_sampleAlphaOnly *= (1.0 - float(isNan(VV_ADATA[ATTR_VV_COLOR]))) * (1.0 - getBit(a_bitSet, BITSET_GENERIC_LOCK_COLOR));\\n#else\\nv_sampleAlphaOnly = 0.0;\\n#endif\\n}\\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nvec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\\nvec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\\nfloat size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\\nv_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\\nv_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\\nv_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\\n#endif\\n}\\n#ifdef HITTEST\\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nif (getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE) > 0.5) {\\nout_pos = vec3(0., 0., 2.);\\nreturn;\\n}\\n#endif\\nhittestFill(out_color, out_pos);\\ngl_PointSize = 1.0;\\n}\\n#elif defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\\nv_isOutline = getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE);\\nif (v_isOutline > 0.5) {\\ndrawLine(out_color, out_pos);\\n} else {\\ndrawFill(out_color, out_pos);\\n}\\n}\\n#else\\n#define draw drawFill\\n#endif\\nvoid main()\\n{\\nINIT;\\nhighp vec3 pos  = vec3(0.);\\nhighp vec4 color  = vec4(0.);\\ndraw(color, pos);\\nv_color = color;\\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\\n}\",\"hittest.glsl\":\"#ifdef HITTEST\\n#include <materials/hittest/common.glsl>\\nattribute vec2 a_pos1;\\nattribute vec2 a_pos2;\\nvoid hittestFill(\\nout lowp vec4 out_color,\\nout highp vec3 out_pos\\n) {\\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * FILL_POSITION_PRECISION, 1.);\\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * FILL_POSITION_PRECISION, 1.);\\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * FILL_POSITION_PRECISION, 1.);\\nfloat hittestDist = u_hittestDist;\\nfloat dist = distPointTriangle(u_hittestPos, pos.xy, pos1.xy, pos2.xy);\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nif (dist < 0. || dist >= hittestDist) {\\nout_pos.z += 2.0;\\n}\\nout_color = vec4(1. / 255., 0, 0, dist == 0. ? (1. / 255.) : 0.);\\n}\\n#endif\"},hittest:{\"common.glsl\":\"#ifdef HITTEST\\nuniform float hittestDist;\\nuniform highp vec2 hittestPos;\\nfloat projectScalar(vec2 a, vec2 b) {\\nreturn dot(a, normalize(b));\\n}\\nfloat distPointSegment(vec2 p0, vec2 p1, vec2 p2) {\\nvec2 L = p2 - p1;\\nvec2 A = p0 - p1;\\nfloat projAL = projectScalar(A, L);\\nfloat t = clamp(projAL / length(L), 0., 1.);\\nreturn distance(p0, p1 + t * (p2 - p1));\\n}\\nvoid hittestMarker(out lowp vec4 out_color, out highp vec3 out_pos, in highp vec3 pos, float size) {\\nfloat dist = distance(pos, vec3(hittestPos, 1.));\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nif ((dist - size) > hittestDist) {\\nout_pos.z += 2.0;\\n}\\nout_color = vec4(1. / 255., 0, 0, (dist - size) < 0. ? (1. / 255.) : 0.);\\n}\\nfloat intersectPointTriangleBary(vec2 p, vec2 a, vec2 b, vec2 c) {\\nreturn inTriangle(xyToBarycentric(p, a, b, c));\\n}\\nfloat distPointTriangle(vec2 p, vec2 a, vec2 b, vec2 c) {\\nvec2 ba = b - a;\\nvec2 ca = c - a;\\nfloat crossProduct = ba.x * ca.y - ca.x * ba.y;\\nbool isParallel = crossProduct < EPSILON_HITTEST && crossProduct > -EPSILON_HITTEST;\\nif (isParallel) {\\nreturn -1.;\\n}\\nif (intersectPointTriangleBary(p.xy, a, b, c) == 1.) {\\nreturn 0.;\\n}\\nfloat distAB = distPointSegment(p, a, b);\\nfloat distBC = distPointSegment(p, b, c);\\nfloat distCA = distPointSegment(p, c, a);\\nreturn min(min(distAB, distBC), distCA);\\n}\\n#endif\"},icon:{\"common.glsl\":\"#include <util/encoding.glsl>\\nuniform lowp vec2 u_mosaicSize;\\nvarying lowp vec4 v_color;\\nvarying highp vec3 v_id;\\nvarying highp vec4 v_sizeTex;\\nvarying mediump vec3 v_pos;\\nvarying lowp float v_opacity;\\nuniform lowp sampler2D u_texture;\\n#ifdef SDF\\nvarying lowp vec4 v_outlineColor;\\nvarying mediump float v_outlineWidth;\\nvarying mediump float v_distRatio;\\nvarying mediump float v_overridingOutlineColor;\\nvarying mediump float v_isThin;\\n#endif\\n#ifdef SDF\\nvec4 getColor(vec2 v_size, vec2 v_tex) {\\n#ifdef HITTEST\\nlowp vec4 fillPixelColor = vec4(1.0);\\n#else\\nlowp vec4 fillPixelColor = v_color;\\n#endif\\nfloat d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\\nfloat size = max(v_size.x, v_size.y);\\nfloat dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\\nfillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\\nfloat outlineWidth = v_outlineWidth;\\n#ifdef HIGHLIGHT\\noutlineWidth = max(outlineWidth, 4.0 * v_isThin);\\n#endif\\nif (outlineWidth > 0.25) {\\nlowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\\nfloat clampedOutlineSize = min(outlineWidth, size);\\noutlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\\nreturn v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\\n}\\nreturn v_opacity * fillPixelColor;\\n}\\n#else\\nvec4 getColor(vec2 _v_size, vec2 v_tex) {\\nlowp vec4 texColor = texture2D(u_texture, v_tex);\\nreturn v_opacity * texColor * v_color;\\n}\\n#endif\",heatmapAccumulate:{\"common.glsl\":\"varying lowp vec4 v_hittestResult;\\nvarying mediump vec2 v_offsetFromCenter;\\nvarying highp float v_fieldValue;\",\"heatmapAccumulate.frag\":\"precision mediump float;\\n#include <materials/icon/heatmapAccumulate/common.glsl>\\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\\n#define COMPRESSION_FACTOR 0.25\\n#else\\n#define COMPRESSION_FACTOR 1.0\\n#endif\\nuniform lowp sampler2D u_texture;\\nvoid main() {\\n#ifdef HITTEST\\ngl_FragColor = v_hittestResult;\\n#else\\nfloat radius = length(v_offsetFromCenter);\\nfloat shapeWeight = step(radius, 1.0);\\nfloat oneMinusRadiusSquared = 1.0 - radius * radius;\\nfloat kernelWeight = oneMinusRadiusSquared * oneMinusRadiusSquared;\\ngl_FragColor = vec4(shapeWeight * kernelWeight * v_fieldValue * COMPRESSION_FACTOR);\\n#endif\\n}\",\"heatmapAccumulate.vert\":\"precision highp float;\\nattribute vec2 a_vertexOffset;\\nvec4 a_color = vec4(0.0);\\nvec2 a_zoomRange = vec2(0.0, 10000.0);\\nuniform float u_radius;\\nuniform float u_isFieldActive;\\n#include <materials/vcommon.glsl>\\n#include <materials/hittest/common.glsl>\\n#include <materials/icon/heatmapAccumulate/common.glsl>\\nvoid main() {\\nfloat filterFlags = getFilterFlags();\\n#ifdef HITTEST\\nhighp vec4 out_hittestResult = vec4(0.);\\nhighp vec3 out_pos = vec3(0.);\\nvec3 pos = u_viewMat3 * u_tileMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\\nhittestMarker(out_hittestResult, out_pos, pos, u_radius);\\nv_hittestResult = out_hittestResult;\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(a_color, out_pos, filterFlags, a_zoomRange), 1.0);\\n#else\\nv_offsetFromCenter = sign(a_vertexOffset);\\nv_fieldValue = getAttributeData2(a_id).x * u_isFieldActive + 1.0 - u_isFieldActive;\\nvec3 centerPos = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\\nvec3 vertexPos = centerPos + u_displayViewMat3 * vec3(v_offsetFromCenter, 0.0) * u_radius;\\ngl_Position = vec4(clip(a_color, vertexPos, filterFlags, a_zoomRange), 1.0);\\n#endif\\n}\"},\"hittest.glsl\":\"#ifdef HITTEST\\n#include <materials/hittest/common.glsl>\\nattribute vec2 a_vertexOffset1;\\nattribute vec2 a_vertexOffset2;\\nattribute vec2 a_texCoords1;\\nattribute vec2 a_texCoords2;\\nvec2 getTextureCoords(in vec3 bary, in vec2 texCoords0, in vec2 texCoords1, in vec2 texCoords2) {\\nreturn texCoords0 * bary.x + texCoords1 * bary.y + texCoords2 * bary.z;\\n}\\nvoid hittestIcon(\\ninout lowp vec4 out_color,\\nout highp vec3 out_pos,\\nin vec3 pos,\\nin vec3 offset,\\nin vec2 size,\\nin float scaleFactor,\\nin float isMapAligned\\n) {\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nvec3 posBase = u_viewMat3 * u_tileMat3  * pos;\\nvec3 offset1 = scaleFactor * vec3(a_vertexOffset1 / 16.0, 0.);\\nvec3 offset2 = scaleFactor * vec3(a_vertexOffset2 / 16.0, 0.);\\nvec2 pos0    = (posBase + getMatrixNoDisplay(isMapAligned) * offset).xy;\\nvec2 pos1    = (posBase + getMatrixNoDisplay(isMapAligned) * offset1).xy;\\nvec2 pos2    = (posBase + getMatrixNoDisplay(isMapAligned) * offset2).xy;\\nvec3 bary0 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\\nvec3 bary1 = xyToBarycentric(u_hittestPos + vec2(0., -u_hittestDist), pos0, pos1, pos2);\\nvec3 bary2 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\\nvec3 bary3 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, 0.), pos0, pos1, pos2);\\nvec3 bary4 = xyToBarycentric(u_hittestPos, pos0, pos1, pos2);\\nvec3 bary5 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, 0.), pos0, pos1, pos2);\\nvec3 bary6 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, u_hittestDist), pos0, pos1, pos2);\\nvec3 bary7 = xyToBarycentric(u_hittestPos + vec2(0., u_hittestDist), pos0, pos1, pos2);\\nvec3 bary8 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, u_hittestDist), pos0, pos1, pos2);\\nvec2 tex0 = a_texCoords  / u_mosaicSize;\\nvec2 tex1 = a_texCoords1 / u_mosaicSize;\\nvec2 tex2 = a_texCoords2 / u_mosaicSize;\\nfloat alphaSum = 0.;\\nalphaSum += inTriangle(bary0) * getColor(size, getTextureCoords(bary0, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary1) * getColor(size, getTextureCoords(bary1, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary2) * getColor(size, getTextureCoords(bary2, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary3) * getColor(size, getTextureCoords(bary3, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary4) * getColor(size, getTextureCoords(bary4, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary5) * getColor(size, getTextureCoords(bary5, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary6) * getColor(size, getTextureCoords(bary6, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary7) * getColor(size, getTextureCoords(bary7, tex0, tex1, tex2)).a;\\nout_pos.z += step(alphaSum, .05) * 2.0;\\nout_color = vec4(1. / 255., 0., 0., alphaSum / 255.);\\n}\\n#endif\",\"icon.frag\":\"precision mediump float;\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/icon/common.glsl>\\nvoid main()\\n{\\n#ifdef HITTEST\\nvec4 color = v_color;\\n#else\\nvec4 color = getColor(v_sizeTex.xy, v_sizeTex.zw);\\n#endif\\n#ifdef HIGHLIGHT\\ncolor.a = step(1.0 / 255.0, color.a);\\n#endif\\ngl_FragColor = color;\\n}\",\"icon.vert\":\"precision highp float;\\nattribute vec4 a_color;\\nattribute vec4 a_outlineColor;\\nattribute vec4 a_sizeAndOutlineWidth;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nattribute vec2 a_bitSetAndDistRatio;\\nattribute vec2 a_zoomRange;\\n#include <materials/vcommon.glsl>\\n#include <materials/icon/common.glsl>\\n#include <materials/icon/hittest.glsl>\\nfloat getMarkerScaleFactor(inout vec2 size, in float referenceSize) {\\n#ifdef VV_SIZE\\nfloat f = getSize(size.y) / size.y;\\nfloat sizeFactor = size.y / referenceSize;\\nreturn getSize(referenceSize) / referenceSize;\\n#else\\nreturn 1.;\\n#endif\\n}\\nvoid main()\\n{\\nINIT;\\nfloat a_bitSet = a_bitSetAndDistRatio.x;\\nvec3  pos           = vec3(a_pos * POSITION_PRECISION, 1.0);\\nvec2  size          = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\\nvec3  offset        = vec3(a_vertexOffset / 16.0, 0.);\\nfloat outlineSize   = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\\nfloat isMapAligned  = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\\nfloat referenceSize = a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0;\\nfloat scaleSymbolProportionally = getBit(a_bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\\nfloat scaleFactor               = getMarkerScaleFactor(size, referenceSize);\\nsize.xy     *= scaleFactor;\\noffset.xy   *= scaleFactor;\\noutlineSize *= scaleSymbolProportionally * (scaleFactor - 1.0) + 1.0;\\nvec2 v_tex   = a_texCoords / u_mosaicSize;\\nfloat filterFlags = getFilterFlags();\\nv_color    = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\\nv_opacity  = getOpacity();\\nv_id       = norm(a_id);\\nv_pos      = u_dvsMat3 * pos + getMatrix(isMapAligned) * getRotation()  * offset;\\nv_sizeTex  = vec4(size.xy, v_tex.xy);\\n#ifdef SDF\\nv_isThin   = getBit(a_bitSet, BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE);\\n#ifdef VV_COLOR\\nv_overridingOutlineColor = v_isThin;\\n#else\\nv_overridingOutlineColor = 0.0;\\n#endif\\nv_outlineWidth = min(outlineSize, max(max(size.x, size.y) - 0.99, 0.0));\\nv_outlineColor = a_outlineColor;\\nv_distRatio = a_bitSetAndDistRatio.y / 128.0;\\n#endif\\n#ifdef HITTEST\\nhighp vec4 out_color = vec4(0.);\\nhighp vec3 out_pos   = vec3(0.);\\nhittestIcon(out_color, out_pos, pos, offset, size, scaleFactor, isMapAligned);\\nv_color = out_color;\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\\n#else\\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\\n#endif\\n}\"},label:{\"common.glsl\":\"uniform mediump float u_zoomLevel;\\nuniform mediump float u_mapRotation;\\nuniform mediump float u_mapAligned;\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_antialiasingWidth;\\nvarying mediump float v_edgeDistanceOffset;\\nvarying mediump vec2 v_tex;\\nvarying mediump vec4 v_color;\\nvarying lowp vec4 v_animation;\",\"label.frag\":\"#include <materials/text/text.frag>\",\"label.vert\":\"precision highp float;\\n#include <materials/vcommon.glsl>\\n#include <materials/text/common.glsl>\\nattribute vec4 a_color;\\nattribute vec4 a_haloColor;\\nattribute vec4 a_texAndSize;\\nattribute vec4 a_refSymbolAndPlacementOffset;\\nattribute vec4 a_glyphData;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nuniform float u_isHaloPass;\\nuniform float u_isBackgroundPass;\\nuniform float u_mapRotation;\\nuniform float u_mapAligned;\\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\\nfloat glyphAngle = angle * 360.0 / 254.0;\\nfloat mapAngle = u_mapRotation * 360.0 / 254.0;\\nfloat diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\\nfloat z = 0.0;\\nz += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_currentZoom)));\\nz += u_mapAligned * 2.0 * step(90.0, diffAngle);\\nz += 2.0 * (1.0 - step(u_currentZoom, maxZoom));\\nreturn z;\\n}\\nvoid main()\\n{\\nINIT;\\nfloat groupMinZoom    = getMinZoom();\\nfloat glyphMinZoom    = a_glyphData.x;\\nfloat glyphMaxZoom    = a_glyphData.y;\\nfloat glyphAngle      = a_glyphData.z;\\nfloat a_isBackground  = a_glyphData.w;\\nfloat a_minZoom          = max(groupMinZoom, glyphMinZoom);\\nfloat a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\\nvec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\\nfloat a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\\nfloat fontSize           = a_texAndSize.z;\\nfloat haloSize           = a_texAndSize.w * OUTLINE_SCALE;\\nvec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\\nvec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\\nfloat z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\\nfloat fontScale    = fontSize / SDF_FONT_SIZE;\\nfloat halfSize     = getSize(a_refSymbolSize) / 2.0;\\nfloat animation    = pow(getAnimationState(), vec4(2.0)).r;\\nfloat isText = 1.0 - a_isBackground;\\nfloat isBackground = u_isBackgroundPass * a_isBackground;\\nvec4  nonHaloColor = (isBackground + isText) * a_color;\\nv_color     = animation * ((1.0 - u_isHaloPass) * nonHaloColor + (u_isHaloPass * a_haloColor));\\nv_opacity   = 1.0;\\nv_tex       = a_texCoords / u_mosaicSize;\\nv_edgeDistanceOffset = u_isHaloPass * haloSize / fontScale / MAX_SDF_DISTANCE;\\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\\nvec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\\nvec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\\nvec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\\nv_pos.z += 2.0 * isHidden;\\ngl_Position = vec4(v_pos, 1.0);\\n#ifdef DEBUG\\nv_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\\n#endif\\n}\"},line:{\"common.glsl\":\"varying lowp vec4 v_color;\\nvarying highp vec3 v_id;\\nvarying mediump vec2 v_normal;\\nvarying mediump float v_lineHalfWidth;\\nvarying lowp float v_opacity;\\n#ifdef PATTERN\\nvarying mediump vec4 v_tlbr;\\nvarying mediump vec2 v_patternSize;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nvarying highp float v_accumulatedDistance;\\n#endif\\n#ifdef SDF\\nvarying mediump float v_lineWidthRatio;\\n#endif\",\"hittest.glsl\":\"#include <materials/hittest/common.glsl>\\n#ifdef HITTEST\\nattribute vec2 a_pos1;\\nattribute vec2 a_pos2;\\nvoid hittestLine(out lowp vec4 out_color, out highp vec3 out_pos, float halfWidth) {\\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * POSITION_PRECISION, 1.);\\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * POSITION_PRECISION, 1.);\\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * POSITION_PRECISION, 1.);\\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nfloat dist = min(distPointSegment(u_hittestPos, pos.xy, pos1.xy),\\ndistPointSegment(u_hittestPos, pos.xy, pos2.xy)) - halfWidth;\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nif (dist >= u_hittestDist) {\\nout_pos.z += 2.0;\\n}\\nout_color = vec4(1. / 255., 0, 0, dist <= 0. ? (1. / 255.) : 0.);\\n}\\n#endif\",\"line.frag\":\"precision lowp float;\\n#include <util/encoding.glsl>\\n#include <materials/constants.glsl>\\n#include <materials/symbologyTypeUtils.glsl>\\n#include <materials/line/common.glsl>\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.frag>\\n#ifdef HITTEST\\nvoid main() {\\ngl_FragColor = v_color;\\n}\\n#else\\nvoid main() {\\nLineData inputs = LineData(\\nv_color,\\nv_normal,\\nv_lineHalfWidth,\\nv_opacity,\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nv_tlbr,\\nv_patternSize,\\n#endif\\n#ifdef SDF\\nv_lineWidthRatio,\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nv_accumulatedDistance,\\n#endif\\n#endif\\nv_id\\n);\\ngl_FragColor = shadeLine(inputs);\\n}\\n#endif\",\"line.vert\":\"precision highp float;\\nattribute vec4 a_color;\\nattribute vec4 a_offsetAndNormal;\\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\\nattribute vec4 a_tlbr;\\nattribute vec4 a_segmentDirection;\\nattribute vec2 a_aux;\\nattribute vec2 a_zoomRange;\\n#include <materials/vcommon.glsl>\\n#include <materials/symbologyTypeUtils.glsl>\\n#include <materials/line/common.glsl>\\n#include <materials/line/hittest.glsl>\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.vert>\\n#ifdef HITTEST\\nvoid draw() {\\nfloat aa        = 0.5 * u_antialiasing;\\nfloat a_halfWidth = a_accumulatedDistanceAndHalfWidth.y / 16.;\\nfloat a_cimHalfWidth = a_aux.x / 16. ;\\nvec2  a_offset = a_offsetAndNormal.xy / 16.;\\nfloat baseWidth = getBaseLineHalfWidth(a_halfWidth, a_cimHalfWidth);\\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\\nhighp vec3 pos  = vec3(0.);\\nv_color = vec4(0.);\\nhittestLine(v_color, pos, halfWidth);\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\\n}\\n#else\\nvoid draw()\\n{\\nhighp vec3 pos = vec3(0.);\\nLineData outputs = buildLine(\\npos,\\na_id,\\na_pos,\\na_color,\\na_offsetAndNormal.xy / 16.,\\na_offsetAndNormal.zw / 16.,\\na_accumulatedDistanceAndHalfWidth.x,\\na_accumulatedDistanceAndHalfWidth.y / 16.,\\na_segmentDirection.w,\\na_tlbr,\\na_segmentDirection.xy / 16.,\\na_aux.x / 16.\\n);\\nv_id              = outputs.id;\\nv_color           = outputs.color;\\nv_normal          = outputs.normal;\\nv_lineHalfWidth   = outputs.lineHalfWidth;\\nv_opacity         = outputs.opacity;\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nv_tlbr          = outputs.tlbr;\\nv_patternSize   = outputs.patternSize;\\n#endif\\n#ifdef SDF\\nv_lineWidthRatio = outputs.lineWidthRatio;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nv_accumulatedDistance = outputs.accumulatedDistance;\\n#endif\\n#endif\\ngl_Position = vec4(clip(outputs.color, pos, getFilterFlags(), a_zoomRange), 1.0);\\n}\\n#endif\\nvoid main() {\\nINIT;\\ndraw();\\n}\"},pie:{\"pie.common.glsl\":\"uniform float outlineWidth;\\nuniform mediump float sectorThreshold;\\nvarying vec3  v_id;\\nvarying vec3  v_pos;\\nvarying vec2  v_offset;\\nvarying vec4  v_color;\\nvarying float v_size;\\nvarying float v_numOfEntries;\\nvarying float v_maxSectorAngle;\\nvarying vec2  v_filteredSectorToColorId[numberOfFields];\\nvarying vec2  v_texCoords;\\nvarying float v_outlineWidth;\\nvarying float v_opacity;\\nstruct FilteredChartInfo {\\nfloat endSectorAngle;\\nint colorId;\\n};\",\"pie.frag\":\"precision highp float;\\n#include <util/atan2.glsl>\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/pie/pie.common.glsl>\\nuniform lowp vec4 colors[numberOfFields];\\nuniform lowp vec4 defaultColor;\\nuniform lowp vec4 othersColor;\\nuniform lowp vec4 outlineColor;\\nuniform float donutRatio;\\nlowp vec4 getSectorColor(in int index, in vec2 filteredSectorToColorId[numberOfFields]) {\\nmediump int colorIndex = int(filteredSectorToColorId[index].y);\\nreturn colors[colorIndex];\\n}\\nconst int OTHER_SECTOR_ID = 255;\\n#ifdef HITTEST\\nvec4 getColor() {\\nfloat distanceSize = length(v_offset) * v_size;\\nfloat donutSize = donutRatio * v_size;\\nfloat alpha = step(donutSize, distanceSize) * (1.0 - step(v_size, distanceSize));\\nreturn v_color;\\n}\\n#else\\nvec4 getColor() {\\nfloat angle = 90.0 - C_RAD_TO_DEG * atan2(v_offset.y, v_offset.x);\\nif (angle < 0.0) {\\nangle += 360.0;\\n} else if (angle > 360.0) {\\nangle = mod(angle, 360.0);\\n}\\nint numOfEntries = int(v_numOfEntries);\\nfloat maxSectorAngle = v_maxSectorAngle;\\nlowp vec4 fillColor = (maxSectorAngle > 0.0 || sectorThreshold > 0.0) ? othersColor : defaultColor;\\nlowp vec4 prevColor = vec4(0.0);\\nlowp vec4 nextColor = vec4(0.0);\\nfloat startSectorAngle = 0.0;\\nfloat endSectorAngle = 0.0;\\nif (angle < maxSectorAngle) {\\nfor (int index = 0; index < numberOfFields; ++index) {\\nstartSectorAngle = endSectorAngle;\\nendSectorAngle = v_filteredSectorToColorId[index].x;\\nif (endSectorAngle > angle) {\\nfillColor = getSectorColor(index, v_filteredSectorToColorId);\\nprevColor = sectorThreshold != 0.0 && index == 0 && abs(360.0 - maxSectorAngle) < EPSILON ? othersColor :\\ngetSectorColor(index > 0 ? index - 1 : numOfEntries - 1, v_filteredSectorToColorId);\\nnextColor = sectorThreshold != 0.0 && abs(endSectorAngle - maxSectorAngle) < EPSILON ? othersColor :\\ngetSectorColor(index < numOfEntries - 1 ? index + 1 : 0, v_filteredSectorToColorId);\\nbreak;\\n}\\nif (index == numOfEntries - 1) {\\nbreak;\\n}\\n}\\n} else {\\nprevColor = getSectorColor(numOfEntries - 1, v_filteredSectorToColorId);\\nnextColor = getSectorColor(0, v_filteredSectorToColorId);\\nstartSectorAngle = maxSectorAngle;\\nendSectorAngle = 360.0;\\n}\\nlowp vec4 outlineColor = outlineColor;\\nfloat offset = length(v_offset);\\nfloat distanceSize = offset * v_size;\\nif (startSectorAngle != 0.0 || endSectorAngle != 360.0) {\\nfloat distanceToStartSector = (angle - startSectorAngle);\\nfloat distanceToEndSector = (endSectorAngle - angle);\\nfloat sectorThreshold = 0.6;\\nfloat beginSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToStartSector * offset);\\nfloat endSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToEndSector * offset);\\nif (endSectorAlpha > 0.0) {\\nfillColor = mix(nextColor, fillColor, endSectorAlpha);\\n} else if (beginSectorAlpha > 0.0) {\\nfillColor = mix(prevColor, fillColor, beginSectorAlpha);\\n}\\n}\\nfloat donutSize = donutRatio * (v_size - v_outlineWidth);\\nfloat endOfDonut = donutSize - v_outlineWidth;\\nfloat aaThreshold = 0.75;\\nfloat innerCircleAlpha = endOfDonut - aaThreshold > 0.0 ? smoothstep(endOfDonut - aaThreshold, endOfDonut + aaThreshold, distanceSize) : 1.0;\\nfloat outerCircleAlpha = 1.0 - smoothstep(v_size - aaThreshold, v_size + aaThreshold , distanceSize);\\nfloat circleAlpha = innerCircleAlpha * outerCircleAlpha;\\nfloat startOfOutline = v_size - v_outlineWidth;\\nif (startOfOutline > 0.0 && v_outlineWidth > 0.25) {\\nfloat outlineFactor = smoothstep(startOfOutline - aaThreshold, startOfOutline + aaThreshold, distanceSize);\\nfloat innerLineFactor = donutSize - aaThreshold > 0.0 ? 1.0 - smoothstep(donutSize - aaThreshold, donutSize + aaThreshold , distanceSize) : 0.0;\\nfillColor = mix(fillColor, outlineColor, innerLineFactor + outlineFactor);\\n}\\nreturn v_opacity * circleAlpha * fillColor;\\n}\\n#endif\\nvoid main()\\n{\\nvec4 color = getColor();\\n#ifdef highlight\\ncolor.a = step(1.0 / 255.0, color.a);\\n#endif\\ngl_FragColor = color;\\n}\",\"pie.vert\":\"#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/barycentric.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/vv.glsl>\\n#include <materials/attributeData.glsl>\\n#include <materials/pie/pie.common.glsl>\\n#include <materials/hittest/common.glsl>\\nattribute float a_bitSet;\\nattribute vec2  a_offset;\\nattribute vec2  a_texCoords;\\nattribute vec2  a_size;\\nattribute float a_referenceSize;\\nattribute vec2  a_zoomRange;\\nint filterValue(in float sectorAngle,\\nin int currentIndex,\\ninout FilteredChartInfo filteredInfo,\\ninout vec2 filteredSectorToColorId[numberOfFields]) {\\nif (sectorAngle > sectorThreshold * 360.0) {\\nfilteredInfo.endSectorAngle += sectorAngle;\\nfilteredSectorToColorId[filteredInfo.colorId] = vec2(filteredInfo.endSectorAngle, currentIndex);\\n++filteredInfo.colorId;\\n}\\nreturn 0;\\n}\\nint filterValues(inout vec2 filteredSectorToColorId[numberOfFields],\\ninout FilteredChartInfo filteredInfo,\\nin float sectorAngles[numberOfFields]) {\\nfor (int index = 0; index < numberOfFields; ++index) {\\nfloat sectorValue = sectorAngles[index];\\nfilterValue(sectorValue, index, filteredInfo, filteredSectorToColorId);\\n}\\nreturn filteredInfo.colorId;\\n}\\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float a_referenceSize, in float bitSet) {\\nvec2 outSize = baseSize;\\n#ifdef VV_SIZE\\nfloat r = getSize(a_referenceSize, currentScale) / a_referenceSize;\\noutSize.xy *= r;\\noffset.xy *= r;\\nfloat scaleSymbolProportionally = getBit(bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\\noutlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\\n#endif\\nreturn outSize;\\n}\\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\\nfloat isMapAligned = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\\nvec3  offset       = vec3(in_offset, 0.0);\\nreturn getMatrix(isMapAligned) * offset;\\n}\\nfloat filterNaNValues(in float value) {\\nreturn value != NAN_MAGIC_NUMBER && value > 0.0 ? value : 0.0;\\n}\\nvoid main()\\n{\\nINIT;\\nvec2  a_size   = a_size;\\nvec2  a_offset = a_offset / 16.0;\\nfloat outlineSize = outlineWidth;\\nfloat a_bitSet = a_bitSet;\\nfloat a_referenceSize = a_referenceSize;\\nvec2 a_texCoords = a_texCoords / 4.0;\\nvec2 markerSize = getMarkerSize(a_offset, a_size, outlineSize, a_referenceSize, a_bitSet);\\nfloat filterFlags = getFilterFlags();\\nvec3  pos         = vec3(a_pos / 10.0, 1.0);\\nv_opacity      = getOpacity();\\nv_id           = norm(a_id);\\nv_pos          = displayViewScreenMat3 * pos + getOffset(a_offset, a_bitSet);\\nv_offset       = sign(a_texCoords - 0.5);\\nv_size         = max(markerSize.x, markerSize.y);\\nv_outlineWidth = outlineSize;\\nfloat attributeData[10];\\nvec4 attributeData3 = getDataDriven0(a_id);\\nattributeData[0] = filterNaNValues(attributeData3.x);\\nattributeData[1] = filterNaNValues(attributeData3.y);\\nattributeData[2] = filterNaNValues(attributeData3.z);\\nattributeData[3] = filterNaNValues(attributeData3.w);\\n#if (numberOfFields > 4)\\nvec4 attributeData4 = getDataDriven1(a_id);\\nattributeData[4] = filterNaNValues(attributeData4.x);\\nattributeData[5] = filterNaNValues(attributeData4.y);\\nattributeData[6] = filterNaNValues(attributeData4.z);\\nattributeData[7] = filterNaNValues(attributeData4.w);\\n#endif\\n#if (numberOfFields > 8)\\nvec4 attributeData5 = getDataDriven2(a_id);\\nattributeData[8] = filterNaNValues(attributeData5.x);\\nattributeData[9] = filterNaNValues(attributeData5.y);\\n#endif\\nfloat sum = 0.0;\\nfor (int i = 0; i < numberOfFields; ++i) {\\nsum += attributeData[i];\\n}\\nfloat sectorAngles[numberOfFields];\\nfor (int i = 0; i < numberOfFields; ++i) {\\nsectorAngles[i] = 360.0 * attributeData[i] / sum;\\n}\\nvec2 filteredSectorToColorId[numberOfFields];\\nFilteredChartInfo filteredInfo = FilteredChartInfo(0.0, 0);\\nint numOfEntries = filterValues(filteredSectorToColorId, filteredInfo, sectorAngles);\\nv_numOfEntries = float(numOfEntries);\\nv_maxSectorAngle = filteredInfo.endSectorAngle;\\nv_filteredSectorToColorId = filteredSectorToColorId;\\n#ifdef HITTEST\\nhighp vec3 out_pos = vec3(0.0);\\nv_color            = vec4(0.0);\\nhittestMarker(v_color, out_pos, viewMat3 * tileMat3 *  pos, v_size);\\ngl_PointSize = 1.0;\\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\\n#else\\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\\n#endif\\n}\"},shared:{line:{\"common.glsl\":\"#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_sampleAlphaOnly;\\n#endif\\nstruct LineData {\\nlowp vec4 color;\\nmediump vec2 normal;\\nmediump float lineHalfWidth;\\nlowp float opacity;\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nmediump vec4 tlbr;\\nmediump vec2 patternSize;\\n#endif\\n#ifdef SDF\\nmediump float lineWidthRatio;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nhighp float accumulatedDistance;\\n#endif\\n#endif\\nhighp vec3 id;\\n};\",\"line.frag\":\"uniform lowp float u_blur;\\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && !defined(HIGHLIGHT)\\n#if defined(PATTERN) || defined(SDF)\\nuniform sampler2D u_texture;\\nuniform highp float u_pixelRatio;\\n#endif\\n#endif\\n#if defined(SDF) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\\nlowp vec4 getLineColor(LineData line) {\\nmediump float adjustedPatternWidth = line.patternSize.x * 2.0 * line.lineWidthRatio;\\nmediump float relativeTexX = fract(line.accumulatedDistance / adjustedPatternWidth);\\nmediump float relativeTexY = 0.5 + 0.25 * line.normal.y;\\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\\nmediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\\nfloat dist = d * line.lineHalfWidth;\\nreturn line.opacity * clamp(0.5 - dist, 0.0, 1.0) * line.color;\\n}\\n#elif defined(PATTERN) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\\nlowp vec4 getLineColor(LineData line) {\\nmediump float lineHalfWidth = line.lineHalfWidth;\\nmediump float adjustedPatternHeight = line.patternSize.y * 2.0 * lineHalfWidth / line.patternSize.x;\\nmediump float relativeTexY = fract(line.accumulatedDistance / adjustedPatternHeight);\\nmediump float relativeTexX = 0.5 + 0.5 * line.normal.y;\\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\\nlowp vec4 color = texture2D(u_texture, texCoord);\\n#ifdef VV_COLOR\\nif (v_sampleAlphaOnly > 0.5) {\\ncolor.rgb = vec3(color.a);\\n}\\n#endif\\nreturn line.opacity * line.color * color;\\n}\\n#else\\nlowp vec4 getLineColor(LineData line) {\\nreturn line.opacity * line.color;\\n}\\n#endif\\nvec4 shadeLine(LineData line)\\n{\\nmediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(line.lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\\nmediump float fragDist = length(line.normal) * line.lineHalfWidth;\\nlowp float alpha = clamp(thinLineFactor * (line.lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\\nlowp vec4 out_color = getLineColor(line) * alpha;\\n#ifdef HIGHLIGHT\\nout_color.a = step(1.0 / 255.0, out_color.a);\\n#endif\\n#ifdef ID\\nif (out_color.a < 1.0 / 255.0) {\\ndiscard;\\n}\\nout_color = vec4(line.id, 0.0);\\n#endif\\nreturn out_color;\\n}\",\"line.vert\":\"float getBaseLineHalfWidth(in float lineHalfWidth, in float referenceHalfWidth) {\\n#ifdef VV_SIZE\\nfloat refLineWidth = 2.0 * referenceHalfWidth;\\nreturn 0.5 * (lineHalfWidth / max(referenceHalfWidth, EPSILON)) * getSize(refLineWidth);\\n#else\\nreturn lineHalfWidth;\\n#endif\\n}\\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\\nfloat halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\\n#ifdef HIGHLIGHT\\nhalfWidth = max(halfWidth, 2.0);\\n#endif\\nreturn halfWidth;\\n}\\nvec2 getDist(in vec2 offset, in float halfWidth) {\\nfloat thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\\nreturn thinLineFactor * halfWidth * offset;\\n}\\nLineData buildLine(\\nout vec3 out_pos,\\nin vec3 in_id,\\nin vec2 in_pos,\\nin vec4 in_color,\\nin vec2 in_offset,\\nin vec2 in_normal,\\nin float in_accumulatedDist,\\nin float in_lineHalfWidth,\\nin float in_bitSet,\\nin vec4 in_tlbr,\\nin vec2 in_segmentDirection,\\nin float in_referenceHalfWidth\\n)\\n{\\nfloat aa        = 0.5 * u_antialiasing;\\nfloat baseWidth = getBaseLineHalfWidth(in_lineHalfWidth, in_referenceHalfWidth);\\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\\nfloat z         = 2.0 * step(baseWidth, 0.0);\\nvec2  dist      = getDist(in_offset, halfWidth);\\nvec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\\nvec3  pos       = u_dvsMat3 * vec3(in_pos * POSITION_PRECISION, 1.0) + offset;\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nvec4  color     = in_color;\\nfloat opacity   = 1.0;\\n#else\\nvec4  color     = getColor(in_color, in_bitSet, BITSET_GENERIC_LOCK_COLOR);\\nfloat opacity   = getOpacity();\\n#ifdef SDF\\nconst float SDF_PATTERN_HALF_WIDTH = 15.5;\\nfloat scaleDash = getBit(in_bitSet, BITSET_LINE_SCALE_DASH);\\nfloat lineWidthRatio = (scaleDash * max(halfWidth - 0.55 * u_antialiasing, 0.25) + (1.0 - scaleDash)) / SDF_PATTERN_HALF_WIDTH;\\n#endif\\n#endif\\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\\nv_sampleAlphaOnly = getBit(in_bitSet, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\\n#endif\\nout_pos = vec3(pos.xy, z);\\nreturn LineData(\\ncolor,\\nin_normal,\\nhalfWidth,\\nopacity,\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nin_tlbr / u_mosaicSize.xyxy,\\nvec2(in_tlbr.z - in_tlbr.x, in_tlbr.w - in_tlbr.y),\\n#endif\\n#ifdef SDF\\nlineWidthRatio,\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nin_accumulatedDist * u_zoomFactor + dot(in_segmentDirection, dist),\\n#endif\\n#endif\\nnorm(in_id)\\n);\\n}\"}},\"symbologyTypeUtils.glsl\":\"#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\\n#define SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_SIMPLE || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\\n#define SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\\n#endif\",text:{\"common.glsl\":\"uniform highp vec2 u_mosaicSize;\\nvarying highp vec3 v_id;\\nvarying mediump vec3 v_pos;\\nvarying lowp float v_opacity;\\nvarying lowp vec4 v_color;\\nvarying highp vec2 v_tex;\\nvarying mediump float v_antialiasingWidth;\\nvarying mediump float v_edgeDistanceOffset;\\nvarying lowp float v_transparency;\",\"hittest.glsl\":\"#include <materials/hittest/common.glsl>\",\"text.frag\":\"precision mediump float;\\n#include <materials/text/common.glsl>\\nuniform lowp sampler2D u_texture;\\n#ifdef HITTEST\\nvec4 getColor() {\\nreturn v_color;\\n}\\n#else\\nvec4 getColor()\\n{\\nfloat SDF_CUTOFF = (2.0 / 8.0);\\nfloat SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\\nlowp float dist = texture2D(u_texture, v_tex).a;\\nmediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\\n#ifdef HIGHLIGHT\\nedge /= 2.0;\\n#endif\\nlowp float aa = v_antialiasingWidth;\\nlowp float alpha = smoothstep(edge - aa, edge + aa, dist);\\nreturn alpha * v_color * v_opacity;\\n}\\n#endif\\nvoid main()\\n{\\ngl_FragColor = getColor();\\n}\",\"text.vert\":\"precision highp float;\\n#include <materials/utils.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/text/common.glsl>\\n#include <materials/text/hittest.glsl>\\nattribute vec4 a_color;\\nattribute vec4 a_haloColor;\\nattribute vec4 a_texFontSize;\\nattribute vec4 a_aux;\\nattribute vec2 a_zoomRange;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nuniform float u_isHaloPass;\\nuniform float u_isBackgroundPass;\\nfloat getTextSize(inout vec2 offset, inout float baseSize, in float referenceSize) {\\n#ifdef VV_SIZE\\nfloat r = getSize(referenceSize) / referenceSize;\\nbaseSize *= r;\\noffset.xy *= r;\\nreturn baseSize;\\n#endif\\nreturn baseSize;\\n}\\nvoid main()\\n{\\nINIT;\\nfloat a_isBackground  = a_aux.y;\\nfloat a_referenceSize = a_aux.z * a_aux.z / 256.0;\\nfloat a_bitSet        = a_aux.w;\\nfloat a_fontSize      = a_texFontSize.z;\\nvec2  a_offset        = a_vertexOffset * OFFSET_PRECISION;\\nvec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\\nfloat fontSize      = getTextSize(a_offset, a_fontSize, a_referenceSize);\\nfloat fontScale     = fontSize / SDF_FONT_SIZE;\\nvec3  offset        = getRotation() * vec3(a_offset, 0.0);\\nmat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\\nfloat isText = 1.0 - a_isBackground;\\nfloat isBackground = u_isBackgroundPass * a_isBackground;\\nvec4  nonHaloColor  = (isBackground * a_color) + (isText * getColor(a_color, a_bitSet, 1));\\nv_color   = u_isHaloPass * a_haloColor + (1.0 - u_isHaloPass) * nonHaloColor;\\nv_opacity = getOpacity();\\nv_id      = norm(a_id);\\nv_tex     = a_texCoords / u_mosaicSize;\\nv_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\\nv_pos.z += 2.0 * isHidden;\\nv_edgeDistanceOffset = u_isHaloPass * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\\n#ifdef HITTEST\\nhighp vec3 out_pos  = vec3(0.);\\nv_color = vec4(0.);\\nhittestMarker(v_color, out_pos, u_viewMat3 * u_tileMat3 *  vec3(a_pos * POSITION_PRECISION, 1.0)\\n+ u_tileMat3 * offset, fontSize / 2.);\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(v_color, out_pos, getFilterFlags(), a_zoomRange), 1.0);\\n#else\\ngl_Position =  vec4(clip(v_color, v_pos, getFilterFlags(), a_zoomRange), 1.0);\\n#endif\\n}\"},\"utils.glsl\":\"float rshift(in float u32, in int amount) {\\nreturn floor(u32 / pow(2.0, float(amount)));\\n}\\nfloat getBit(in float bitset, in int bitIndex) {\\nfloat offset = pow(2.0, float(bitIndex));\\nreturn mod(floor(bitset / offset), 2.0);\\n}\\nconst int maxHighlightReasons = 6;\\nfloat getFilterBit(in float bitset, in int bitIndex) {\\nreturn getBit(bitset, bitIndex + maxHighlightReasons);\\n}\\nfloat getHighlightBit(in float bitset, in int bitIndex) {\\nreturn getBit(bitset, bitIndex);\\n}\\nhighp vec3 unpackDisplayIdTexel(in highp vec3 bitset) {\\nfloat isAggregate = getBit(bitset.b, 7);\\nreturn (1.0 - isAggregate) * bitset + isAggregate * (vec3(bitset.rgb) - vec3(0.0, 0.0, float(0x80)));\\n}\\nvec4 unpack(in float u32) {\\nfloat r = mod(rshift(u32, 0), 255.0);\\nfloat g = mod(rshift(u32, 8), 255.0);\\nfloat b = mod(rshift(u32, 16), 255.0);\\nfloat a = mod(rshift(u32, 24), 255.0);\\nreturn vec4(r, g, b, a);\\n}\\nvec3 norm(in vec3 v) {\\nreturn v /= 255.0;\\n}\\nvec4 norm(in vec4 v) {\\nreturn v /= 255.0;\\n}\\nfloat max4(vec4 target) {\\nreturn max(max(max(target.x, target.y), target.z), target.w);\\n}\\nvec2 unpack_u8_nf32(vec2 bytes) {\\nreturn (bytes - 127.0) / 127.0;\\n}\\nhighp float rand(in vec2 co) {\\nhighp float a = 12.9898;\\nhighp float b = 78.233;\\nhighp float c = 43758.5453;\\nhighp float dt = dot(co, vec2(a,b));\\nhighp float sn = mod(dt, 3.14);\\nreturn fract(sin(sn) * c);\\n}\",\"vcommon.glsl\":\"#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/attributeData.glsl>\\n#include <materials/vv.glsl>\\n#include <materials/barycentric.glsl>\\nattribute vec2 a_pos;\\nattribute highp vec3 a_id;\\nuniform highp mat3 displayViewScreenMat3;\\nuniform highp mat3 displayViewMat3;\\nuniform highp mat3 displayMat3;\\nuniform highp mat3 tileMat3;\\nuniform highp mat3 viewMat3;\\nuniform highp float pixelRatio;\\nuniform mediump float zoomFactor;\\nuniform mediump float antialiasing;\\nuniform mediump float currentScale;\\nuniform mediump float currentZoom;\\nuniform mediump float metersPerSRUnit;\\nvec4 VV_ADATA = vec4(0.0);\\nvoid loadVisualVariableData(inout vec4 target) {\\ntarget.rgba = getVisualVariableData(a_id);\\n}\\n#ifdef VV\\n#define INIT loadVisualVariableData(VV_ADATA)\\n#else\\n#define INIT\\n#endif\\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\\n#ifdef VV_COLOR\\nfloat isColorLocked   = getBit(a_bitSet, index);\\nreturn getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\\n#else\\nreturn a_color;\\n#endif\\n}\\nfloat getOpacity() {\\n#ifdef VV_OPACITY\\nreturn getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\\n#else\\nreturn 1.0;\\n#endif\\n}\\nfloat getSize(in float in_size, in float currentScale) {\\n#ifdef VV_SIZE\\nreturn getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE], currentScale);\\n#else\\nreturn in_size;\\n#endif\\n}\\nmat3 getRotation() {\\n#ifdef VV_ROTATION\\nreturn getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\\n#else\\nreturn mat3(1.0);\\n#endif\\n}\\nfloat getFilterFlags() {\\n#ifdef IGNORES_SAMPLER_PRECISION\\nreturn ceil(getFilterData(a_id).x * 255.0);\\n#else\\nreturn getFilterData(a_id).x * 255.0;\\n#endif\\n}\\nvec4 getAnimationState() {\\nreturn getAnimation(a_id);\\n}\\nfloat getMinZoom() {\\nvec4 data0 = getFilterData(a_id) * 255.0;\\nreturn data0.g;\\n}\\nmat3 getMatrixNoDisplay(float isMapAligned) {\\nreturn isMapAligned * viewMat3 * tileMat3 + (1.0 - isMapAligned) * tileMat3;\\n}\\nmat3 getMatrix(float isMapAligned) {\\nreturn isMapAligned * displayViewMat3 + (1.0 - isMapAligned) * displayMat3;\\n}\\nfloat checkHighlightBit(float filterFlags, int index) {\\nreturn getHighlightBit(filterFlags, index);\\n}\\nfloat checkHighlight(float filterFlags) {\\nfloat result = checkHighlightBit(filterFlags, 0);\\nfor (int i = 1; i < maxHighlightReasons; i++) {\\nresult = result + checkHighlightBit(filterFlags, i);\\n}\\nreturn step(0.1, result);\\n}\\nvec3 clip(inout vec4 color, inout vec3 pos, in float filterFlags, in vec2 minMaxZoom) {\\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\\n#ifdef inside\\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\\n#elif defined(outside)\\npos.z += 2.0 * getFilterBit(filterFlags, 1);\\n#elif defined(highlight)\\n#if !defined(highlight_all)\\npos.z += 2.0 * (1.0 - checkHighlight(filterFlags));\\n#endif\\n#endif\\npos.z += 2.0 * (step(minMaxZoom.y, currentZoom) + (1.0 - step(minMaxZoom.x, currentZoom)));\\nreturn pos;\\n}\",\"vv.glsl\":\"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\\n#define VV_SIZE\\n#endif\\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\\n#define VV\\n#endif\\n#ifdef VV_COLOR\\nuniform highp float colorValues[8];\\nuniform vec4 colors[8];\\n#endif\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nuniform highp vec4 minMaxValueAndSize;\\n#endif\\n#ifdef VV_SIZE_SCALE_STOPS\\nuniform highp float values[8];\\nuniform float sizes[8];\\n#endif\\n#ifdef VV_SIZE_FIELD_STOPS\\nuniform highp float values[8];\\nuniform float sizes[8];\\n#endif\\n#ifdef VV_SIZE_UNIT_VALUE\\nuniform highp float unitMeterRatio;\\n#endif\\n#ifdef VV_OPACITY\\nuniform highp float opacityValues[8];\\nuniform float opacities[8];\\n#endif\\n#ifdef VV_ROTATION\\nuniform lowp float rotationType;\\n#endif\\nbool isNan(float val) {\\nreturn (val == NAN_MAGIC_NUMBER);\\n}\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\\nif (isNan(sizeValue)) {\\nreturn fallback;\\n}\\nfloat interpolationRatio = (sizeValue  - minMaxValueAndSize.x) / (minMaxValueAndSize.y - minMaxValueAndSize.x);\\ninterpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\\nreturn minMaxValueAndSize.z + interpolationRatio * (minMaxValueAndSize.w - minMaxValueAndSize.z);\\n}\\n#endif\\n#ifdef VV_SIZE_SCALE_STOPS\\nfloat getVVScaleStopsSize(float currentScale) {\\nfloat outSize;\\nif (currentScale <= values[0]) {\\noutSize = sizes[0];\\n} else {\\nif (currentScale >= values[7]) {\\noutSize = sizes[7];\\n} else {\\nint index;\\nindex = -1;\\nfor (int i = 0; i < 8; i++) {\\nif (values[i] > currentScale) {\\nindex = i;\\nbreak;\\n}\\n}\\nint prevIndex = index - 1;\\nfloat a = currentScale - values[prevIndex];\\nfloat b = values[index] - values[prevIndex];\\noutSize = mix(sizes[prevIndex], sizes[index], a / b);\\n}\\n}\\nreturn outSize;\\n}\\n#endif\\n#ifdef VV_SIZE_FIELD_STOPS\\nconst int VV_SIZE_N = 8;\\nfloat getVVStopsSize(float sizeValue, float fallback) {\\nif (isNan(sizeValue)) {\\nreturn fallback;\\n}\\nif (sizeValue <= values[0]) {\\nreturn sizes[0];\\n}\\nif (sizeValue >= values[VV_SIZE_N - 1]) {\\nreturn sizes[VV_SIZE_N - 1];\\n}\\nfor (int i = 1; i < VV_SIZE_N; ++i) {\\nif (values[i] >= sizeValue) {\\nfloat f = (sizeValue - values[i-1]) / (values[i] - values[i-1]);\\nreturn mix(sizes[i-1], sizes[i], f);\\n}\\n}\\nreturn sizes[VV_SIZE_N - 1];\\n}\\n#endif\\n#ifdef VV_SIZE_UNIT_VALUE\\nfloat getVVUnitValue(float sizeValue, float fallback) {\\nif (isNan(sizeValue)) {\\nreturn fallback;\\n}\\nreturn sizeValue * (metersPerSRUnit / unitMeterRatio);\\n}\\n#endif\\n#ifdef VV_OPACITY\\nconst int VV_OPACITY_N = 8;\\nfloat getVVOpacity(float opacityValue) {\\nif (isNan(opacityValue)) {\\nreturn 1.0;\\n}\\nif (opacityValue <= opacityValues[0]) {\\nreturn opacities[0];\\n}\\nfor (int i = 1; i < VV_OPACITY_N; ++i) {\\nif (opacityValues[i] >= opacityValue) {\\nfloat f = (opacityValue - opacityValues[i-1]) / (opacityValues[i] - opacityValues[i-1]);\\nreturn mix(opacities[i-1], opacities[i], f);\\n}\\n}\\nreturn opacities[VV_OPACITY_N - 1];\\n}\\n#endif\\n#ifdef VV_ROTATION\\nmat4 getVVRotation(float rotationValue) {\\nif (isNan(rotationValue)) {\\nreturn mat4(1, 0, 0, 0,\\n0, 1, 0, 0,\\n0, 0, 1, 0,\\n0, 0, 0, 1);\\n}\\nfloat rotation = rotationValue;\\nif (rotationType == 1.0) {\\nrotation = 90.0 - rotation;\\n}\\nfloat angle = C_DEG_TO_RAD * rotation;\\nfloat sinA = sin(angle);\\nfloat cosA = cos(angle);\\nreturn mat4(cosA, sinA, 0, 0,\\n-sinA,  cosA, 0, 0,\\n0,     0, 1, 0,\\n0,     0, 0, 1);\\n}\\nmat3 getVVRotationMat3(float rotationValue) {\\nif (isNan(rotationValue)) {\\nreturn mat3(1, 0, 0,\\n0, 1, 0,\\n0, 0, 1);\\n}\\nfloat rotation = rotationValue;\\nif (rotationType == 1.0) {\\nrotation = 90.0 - rotation;\\n}\\nfloat angle = C_DEG_TO_RAD * -rotation;\\nfloat sinA = sin(angle);\\nfloat cosA = cos(angle);\\nreturn mat3(cosA, -sinA, 0,\\nsinA, cosA, 0,\\n0,    0,    1);\\n}\\n#endif\\n#ifdef VV_COLOR\\nconst int VV_COLOR_N = 8;\\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\\nif (isNan(colorValue) || isColorLocked == 1.0) {\\nreturn fallback;\\n}\\nif (colorValue <= colorValues[0]) {\\nreturn colors[0];\\n}\\nfor (int i = 1; i < VV_COLOR_N; ++i) {\\nif (colorValues[i] >= colorValue) {\\nfloat f = (colorValue - colorValues[i-1]) / (colorValues[i] - colorValues[i-1]);\\nreturn mix(colors[i-1], colors[i], f);\\n}\\n}\\nreturn colors[VV_COLOR_N - 1];\\n}\\n#endif\\nfloat getVVSize(in float size, in float vvSize, in float currentScale)  {\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nreturn getVVMinMaxSize(vvSize, size);\\n#elif defined(VV_SIZE_SCALE_STOPS)\\nfloat outSize = getVVScaleStopsSize(currentScale);\\nreturn isNan(outSize) ? size : outSize;\\n#elif defined(VV_SIZE_FIELD_STOPS)\\nfloat outSize = getVVStopsSize(vvSize, size);\\nreturn isNan(outSize) ? size : outSize;\\n#elif defined(VV_SIZE_UNIT_VALUE)\\nreturn getVVUnitValue(vvSize, size);\\n#else\\nreturn size;\\n#endif\\n}\"},\"post-processing\":{blit:{\"blit.frag\":\"precision mediump float;\\nuniform sampler2D u_texture;\\nvarying vec2 v_uv;\\nvoid main() {\\ngl_FragColor = texture2D(u_texture, v_uv);\\n}\"},bloom:{composite:{\"composite.frag\":\"precision mediump float;\\nvarying vec2 v_uv;\\nuniform sampler2D u_blurTexture1;\\nuniform sampler2D u_blurTexture2;\\nuniform sampler2D u_blurTexture3;\\nuniform sampler2D u_blurTexture4;\\nuniform sampler2D u_blurTexture5;\\nuniform float u_bloomStrength;\\nuniform float u_bloomRadius;\\nuniform float u_bloomFactors[NUMMIPS];\\nuniform vec3 u_bloomTintColors[NUMMIPS];\\nfloat lerpBloomFactor(const in float factor) {\\nfloat mirrorFactor = 1.2 - factor;\\nreturn mix(factor, mirrorFactor, u_bloomRadius);\\n}\\nvoid main() {\\nvec4 color = u_bloomStrength * (\\nlerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\\nlerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\\nlerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\\nlerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\\nlerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\\n);\\ngl_FragColor = clamp(color, 0.0, 1.0);\\n}\"},gaussianBlur:{\"gaussianBlur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nuniform vec2 u_direction;\\nvarying vec2 v_uv;\\n#define KERNEL_RADIUS RADIUS\\n#define SIGMA RADIUS\\nfloat gaussianPdf(in float x, in float sigma) {\\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\\n}\\nvoid main() {\\nvec2 invSize = 1.0 / u_texSize;\\nfloat fSigma = float(SIGMA);\\nfloat weightSum = gaussianPdf(0.0, fSigma);\\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\\nfloat x = float(i);\\nfloat w = gaussianPdf(x, fSigma);\\nvec2 uvOffset = u_direction * invSize * x;\\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\\npixelColorSum += (sample1 + sample2) * w;\\nweightSum += 2.0 * w;\\n}\\ngl_FragColor = pixelColorSum /weightSum;\\n}\"},luminosityHighPass:{\"luminosityHighPass.frag\":\"precision mediump float;\\nuniform sampler2D u_texture;\\nuniform vec3 u_defaultColor;\\nuniform float u_defaultOpacity;\\nuniform float u_luminosityThreshold;\\nuniform float u_smoothWidth;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 texel = texture2D(u_texture, v_uv);\\nvec3 luma = vec3(0.299, 0.587, 0.114);\\nfloat v = dot(texel.xyz, luma);\\nvec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\\nfloat alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\\ngl_FragColor = mix(outputColor, texel, alpha);\\n}\"}},blur:{gaussianBlur:{\"gaussianBlur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nuniform vec2 u_direction;\\nuniform float u_sigma;\\nvarying vec2 v_uv;\\n#define KERNEL_RADIUS RADIUS\\nfloat gaussianPdf(in float x, in float sigma) {\\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\\n}\\nvoid main() {\\nvec2 invSize = 1.0 / u_texSize;\\nfloat fSigma = u_sigma;\\nfloat weightSum = gaussianPdf(0.0, fSigma);\\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\\nfloat x = float(i);\\nfloat w = gaussianPdf(x, fSigma);\\nvec2 uvOffset = u_direction * invSize * x;\\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\\npixelColorSum += (sample1 + sample2) * w;\\nweightSum += 2.0 * w;\\n}\\ngl_FragColor = pixelColorSum /weightSum;\\n}\"},\"radial-blur\":{\"radial-blur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nconst float sampleDist = 1.0;\\nconst float sampleStrength = 2.2;\\nvoid main(void) {\\nfloat samples[10];\\nsamples[0] = -0.08;\\nsamples[1] = -0.05;\\nsamples[2] = -0.03;\\nsamples[3] = -0.02;\\nsamples[4] = -0.01;\\nsamples[5] =  0.01;\\nsamples[6] =  0.02;\\nsamples[7] =  0.03;\\nsamples[8] =  0.05;\\nsamples[9] =  0.08;\\nvec2 dir = 0.5 - v_uv;\\nfloat dist = sqrt(dir.x * dir.x + dir.y * dir.y);\\ndir = dir / dist;\\nvec4 color = texture2D(u_colorTexture,v_uv);\\nvec4 sum = color;\\nfor (int i = 0; i < 10; i++) {\\nsum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\\n}\\nsum *= 1.0 / 11.0;\\nfloat t = dist * sampleStrength;\\nt = clamp(t, 0.0, 1.0);\\ngl_FragColor = mix(color, sum, t);\\n}\"}},dra:{\"dra.frag\":\"precision mediump float;\\nuniform sampler2D u_minColor;\\nuniform sampler2D u_maxColor;\\nuniform sampler2D u_texture;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 minColor = texture2D(u_minColor, vec2(0.5));\\nvec4 maxColor = texture2D(u_maxColor, vec2(0.5));\\nvec4 color = texture2D(u_texture, v_uv);\\nvec3 minColorUnpremultiply = minColor.rgb / minColor.a;\\nvec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\\nvec3 colorUnpremultiply = color.rgb / color.a;\\nvec3 range = maxColorUnpremultiply - minColorUnpremultiply;\\ngl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\\n}\",\"min-max\":{\"min-max.frag\":\"#extension GL_EXT_draw_buffers : require\\nprecision mediump float;\\n#define CELL_SIZE 2\\nuniform sampler2D u_minTexture;\\nuniform sampler2D u_maxTexture;\\nuniform vec2 u_srcResolution;\\nuniform vec2 u_dstResolution;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\\nvec2 onePixel = vec2(1.0) / u_srcResolution;\\nvec2 uv = (srcPixel + 0.5) / u_srcResolution;\\nvec4 minColor = vec4(1.0);\\nvec4 maxColor = vec4(0.0);\\nfor (int y = 0; y < CELL_SIZE; ++y) {\\nfor (int x = 0; x < CELL_SIZE; ++x) {\\nvec2 offset = uv + vec2(x, y) * onePixel;\\nminColor = min(minColor, texture2D(u_minTexture, offset));\\nmaxColor = max(maxColor, texture2D(u_maxTexture, offset));\\n}\\n}\\ngl_FragData[0] = minColor;\\ngl_FragData[1] = maxColor;\\n}\"}},\"drop-shadow\":{composite:{\"composite.frag\":\"precision mediump float;\\nuniform sampler2D u_layerFBOTexture;\\nuniform sampler2D u_blurTexture;\\nuniform vec4 u_shadowColor;\\nuniform vec2 u_shadowOffset;\\nuniform highp mat3 u_displayViewMat3;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec3 offset = u_displayViewMat3 * vec3(u_shadowOffset, 0.0);\\nvec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\\nvec4 blurColor = texture2D(u_blurTexture, v_uv - offset.xy / 2.0);\\ngl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\\n}\"}},\"edge-detect\":{\"frei-chen\":{\"frei-chen.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nvarying vec2 v_uv;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[9];\\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\\nvoid main() {\\nG[0] = g0,\\nG[1] = g1,\\nG[2] = g2,\\nG[3] = g3,\\nG[4] = g4,\\nG[5] = g5,\\nG[6] = g6,\\nG[7] = g7,\\nG[8] = g8;\\nmat3 I;\\nfloat cnv[9];\\nvec3 sample;\\nfor (float i = 0.0; i < 3.0; i++) {\\nfor (float j = 0.0; j < 3.0; j++) {\\nsample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\\nI[int(i)][int(j)] = length(sample);\\n}\\n}\\nfor (int i = 0; i < 9; i++) {\\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\ncnv[i] = dp3 * dp3;\\n}\\nfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\\nfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\\ngl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\\n}\"},sobel:{\"sobel.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nuniform vec2 u_texSize;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[2];\\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\\nvoid main() {\\nmat3 I;\\nfloat cnv[2];\\nvec3 sample;\\nG[0] = g0;\\nG[1] = g1;\\nfor (float i = 0.0; i < 3.0; i++) {\\nfor (float j = 0.0; j < 3.0; j++) {\\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\\nI[int(i)][int(j)] = length(sample);\\n}\\n}\\nfor (int i = 0; i < 2; i++) {\\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\ncnv[i] = dp3 * dp3;\\n}\\ngl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\\n}\"}},\"edge-enhance\":{\"edge-enhance.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nuniform vec2 u_texSize;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[2];\\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\\nvoid main() {\\nmat3 I;\\nfloat cnv[2];\\nvec3 sample;\\nG[0] = g0;\\nG[1] = g1;\\nfor (float i = 0.0; i < 3.0; i++) {\\nfor (float j = 0.0; j < 3.0; j++) {\\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\\nI[int(i)][int(j)] = length(sample);\\n}\\n}\\nfor (int i = 0; i < 2; i++) {\\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\ncnv[i] = dp3 * dp3;\\n}\\nvec4 color = texture2D(u_colorTexture, v_uv);\\ngl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\\n}\"},filterEffect:{\"filterEffect.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform mat4 u_coefficients;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 color = texture2D(u_colorTexture, v_uv);\\nvec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\\nfloat a = color.a;\\ngl_FragColor = vec4(a * rgbw.rgb, a);\\n}\"},pp:{\"pp.vert\":\"precision mediump float;\\nattribute vec2 a_position;\\nvarying vec2 v_uv;\\nvoid main() {\\ngl_Position = vec4(a_position, 0.0, 1.0);\\nv_uv = (a_position + 1.0) / 2.0;\\n}\"}},raster:{bitmap:{\"bitmap.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\nuniform sampler2D u_texture;\\nuniform highp vec2 u_coordScale;\\nuniform lowp float u_opacity;\\n#include <filtering/bicubic.glsl>\\nvoid main() {\\n#ifdef BICUBIC\\nvec4 color = sampleBicubicBSpline(u_texture, v_texcoord, u_coordScale);\\n#else\\nvec4 color = texture2D(u_texture, v_texcoord);\\n#endif\\ngl_FragColor = vec4(color.rgb * u_opacity, color.a * u_opacity);\\n}\",\"bitmap.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_pos;\\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\"},common:{\"common.glsl\":\"uniform sampler2D u_image;\\nuniform int u_bandCount;\\nuniform bool u_flipY;\\nuniform float u_opacity;\\nuniform int u_resampling;\\nuniform vec2 u_srcImageSize;\\n#ifdef APPLY_PROJECTION\\n#include <raster/common/projection.glsl>\\n#endif\\n#ifdef BICUBIC\\n#include <filtering/bicubic.glsl>\\n#endif\\n#ifdef BILINEAR\\n#include <filtering/bilinear.glsl>\\n#endif\\nvec2 getPixelLocation(vec2 coords) {\\nvec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\\n#ifdef APPLY_PROJECTION\\ntargetLocation = projectPixelLocation(targetLocation);\\n#endif\\nreturn targetLocation;\\n}\\nbool isOutside(vec2 coords){\\nif (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\\nreturn true;\\n} else {\\nreturn false;\\n}\\n}\\nvec4 getPixel(vec2 pixelLocation) {\\n#ifdef BICUBIC\\nvec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\\n#elif defined(BILINEAR)\\nvec4 color = sampleBilinear(u_image, pixelLocation, u_srcImageSize);\\n#else\\nvec4 color = texture2D(u_image, pixelLocation);\\n#endif\\nreturn color;\\n}\",\"common.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform highp float u_scale;\\nuniform highp vec2 u_offset;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_pos * u_scale + u_offset;\\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\",\"contrastBrightness.glsl\":\"uniform float u_contrastOffset;\\nuniform float u_brightnessOffset;\\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\\nvec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\\nfloat maxI = 255.0;\\nfloat mid = 128.0;\\nfloat c = u_contrastOffset;\\nfloat b = u_brightnessOffset;\\nvec4 v;\\nif (c > 0.0 && c < 100.0) {\\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\\n} else if (c <= 0.0 && c > -100.0) {\\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\\n} else if (c == 100.0) {\\nv = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\\nv = (sign(v) + 1.0) / 2.0;\\n} else if (c == -100.0) {\\nv = vec4(mid, mid, mid, currentPixel.a);\\n}\\nvec3 rgb = clamp(v.rgb / 255.0, 0.0, 1.0);\\nreturn vec4(rgb, currentPixel.a);\\n}\",\"getSurfaceValues.glsl\":\"#include <raster/common/mirror.glsl>\\nvoid getSurfaceValues(sampler2D imageTexture, vec2 texCoord, vec2 srcImageSize, inout float values[10]) {\\nvec2 onePixel = 1.0 / srcImageSize;\\nvec4 va = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, -1.0)));\\nvec4 vb = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, -1.0)));\\nvec4 vc = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, -1.0)));\\nvec4 vd = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 0.0)));\\nvec4 ve = texture2D(imageTexture, mirror(texCoord));\\nvec4 vf = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 0.0)));\\nvec4 vg = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 1.0)));\\nvec4 vh = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, 1.0)));\\nvec4 vi = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 1.0)));\\nfloat alpha = va.a * vb.a * vc.a * vd.a * ve.a * vf.a * vg.a * vh.a * vi.a;\\nvalues[0] = va.r;\\nvalues[1] = vb.r;\\nvalues[2] = vc.r;\\nvalues[3] = vd.r;\\nvalues[4] = ve.r;\\nvalues[5] = vf.r;\\nvalues[6] = vg.r;\\nvalues[7] = vh.r;\\nvalues[8] = vi.r;\\nvalues[9] = alpha;\\n}\",\"inverse.glsl\":\"float invertValue(float value) {\\nfloat s = sign(value);\\nreturn (s * s) / (value + abs(s) - 1.0);\\n}\",\"mirror.glsl\":\"vec2 mirror(vec2 pos) {\\nvec2 pos1 = abs(pos);\\nreturn step(pos1, vec2(1.0, 1.0)) * pos1 + step(1.0, pos1) * (2.0 - pos1);\\n}\",\"projection.glsl\":\"uniform sampler2D u_transformGrid;\\nuniform vec2 u_transformSpacing;\\nuniform vec2 u_transformGridSize;\\nuniform vec2 u_targetImageSize;\\nvec2 projectPixelLocation(vec2 coords) {\\n#ifdef LOOKUP_PROJECTION\\nvec4 pv = texture2D(u_transformGrid, coords);\\nreturn vec2(pv.r, pv.g);\\n#endif\\nvec2 index_image = floor(coords * u_targetImageSize);\\nvec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\\nvec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\\nvec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\\nvec2 srcLocation;\\nvec2 transform_location = index_transform + oneTransformPixel * 0.5;\\nif (pos.s <= pos.t) {\\nvec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\\nvec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\\nsrcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\\nsrcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\\n} else {\\nvec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\\nvec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\\nsrcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\\nsrcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\\n}\\nreturn srcLocation;\\n}\"},flow:{\"getFadeOpacity.glsl\":\"uniform float u_decayRate;\\nuniform float u_fadeToZero;\\nfloat getFadeOpacity(float x) {\\nfloat cutOff = mix(0.0, exp(-u_decayRate), u_fadeToZero);\\nreturn (exp(-u_decayRate * x) - cutOff) / (1.0 - cutOff);\\n}\",\"getFragmentColor.glsl\":\"vec4 getFragmentColor(vec4 color, float dist, float size, float featheringSize) {\\nfloat featheringStart = clamp(0.5 - featheringSize / size, 0.0, 0.5);\\nif (dist > featheringStart) {\\ncolor *= 1.0 - (dist - featheringStart) / (0.5 - featheringStart);\\n}\\nreturn color;\\n}\",imagery:{\"imagery.frag\":\"precision highp float;\\nvarying vec2 v_texcoord;\\nuniform sampler2D u_texture;\\nuniform float u_Min;\\nuniform float u_Max;\\nuniform float u_featheringSize;\\n#include <raster/flow/vv.glsl>\\nfloat getIntensity(float v) {\\nreturn u_Min + v * (u_Max - u_Min);\\n}\\nvoid main(void) {\\nvec4 sampled = texture2D(u_texture, v_texcoord);\\nfloat intensity = getIntensity(sampled.r);\\ngl_FragColor = getColor(intensity);\\ngl_FragColor.a *= getOpacity(sampled.r);\\ngl_FragColor.a *= sampled.a;\\ngl_FragColor.rgb *= gl_FragColor.a;\\n}\",\"imagery.vert\":\"attribute vec2 a_position;\\nattribute vec2 a_texcoord;\\nuniform mat3 u_dvsMat3;\\nvarying vec2 v_texcoord;\\nvoid main(void) {\\nvec2 xy = (u_dvsMat3 * vec3(a_position, 1.0)).xy;\\ngl_Position = vec4(xy, 0.0, 1.0);\\nv_texcoord = a_texcoord;\\n}\"},particles:{\"particles.frag\":\"precision highp float;\\nvarying vec4 v_color;\\nvarying vec2 v_texcoord;\\nvarying float v_size;\\nuniform float u_featheringSize;\\n#include <raster/flow/getFragmentColor.glsl>\\nvoid main(void) {\\ngl_FragColor = getFragmentColor(v_color, length(v_texcoord - 0.5), v_size, u_featheringSize);\\n}\",\"particles.vert\":\"attribute vec4 a_xyts0;\\nattribute vec4 a_xyts1;\\nattribute vec4 a_typeIdDurationSeed;\\nattribute vec4 a_extrudeInfo;\\nuniform mat3 u_dvsMat3;\\nuniform mat3 u_displayViewMat3;\\nuniform float u_time;\\nuniform float u_trailLength;\\nuniform float u_flowSpeed;\\nvarying vec4 v_color;\\nvarying vec2 v_texcoord;\\nvarying float v_size;\\nuniform float u_featheringSize;\\nuniform float u_introFade;\\n#include <raster/flow/vv.glsl>\\n#include <raster/flow/getFadeOpacity.glsl>\\nvoid main(void) {\\nvec2 position0 = a_xyts0.xy;\\nfloat t0 = a_xyts0.z;\\nfloat speed0 = a_xyts0.w;\\nvec2 position1 = a_xyts1.xy;\\nfloat t1 = a_xyts1.z;\\nfloat speed1 = a_xyts1.w;\\nfloat type = a_typeIdDurationSeed.x;\\nfloat id = a_typeIdDurationSeed.y;\\nfloat duration = a_typeIdDurationSeed.z;\\nfloat seed = a_typeIdDurationSeed.w;\\nvec2 e0 = a_extrudeInfo.xy;\\nvec2 e1 = a_extrudeInfo.zw;\\nfloat animationPeriod = duration + u_trailLength;\\nfloat scaledTime = u_time * u_flowSpeed;\\nfloat randomizedTime = scaledTime + seed * animationPeriod;\\nfloat t = mod(randomizedTime, animationPeriod);\\nfloat fUnclamped = (t - t0) / (t1 - t0);\\nfloat f = clamp(fUnclamped, 0.0, 1.0);\\nfloat clampedTime = mix(t0, t1, f);\\nfloat speed = mix(speed0, speed1, f);\\nvec2 extrude;\\nvec2 position;\\nfloat fadeOpacity;\\nfloat introOpacity;\\nif (type == 2.0) {\\nif (fUnclamped < 0.0 || (fUnclamped > 1.0 && t1 != duration)) {\\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\\nreturn;\\n}\\nvec2 ortho = mix(e0, e1, f);\\nvec2 parallel;\\nparallel = normalize(position1 - position0) * 0.5;\\nif (id == 1.0) {\\nextrude = ortho;\\nv_texcoord = vec2(0.5, 0.0);\\n} else if (id == 2.0) {\\nextrude = -ortho;\\nv_texcoord = vec2(0.5, 1.0);\\n} else if (id == 3.0) {\\nextrude = ortho + parallel;\\nv_texcoord = vec2(1.0, 0.0);\\n} else if (id == 4.0) {\\nextrude = -ortho + parallel;\\nv_texcoord = vec2(1.0, 1.0);\\n}\\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\\nintroOpacity = 1.0 - exp(-clampedTime);\\nv_size = getSize(speed);\\nv_color = getColor(speed);\\nv_color.a *= getOpacity(speed);\\nposition = mix(position0, position1, f);\\n} else {\\nif (fUnclamped < 0.0) {\\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\\nreturn;\\n}\\nif (id == 1.0) {\\nextrude = e0;\\nv_texcoord = vec2(0.5, 0.0);\\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\\nintroOpacity = 1.0 - exp(-t0);\\nv_size = getSize(speed0);\\nv_color = getColor(speed0);\\nv_color.a *= getOpacity(speed0);\\nposition = position0;\\n} else if (id == 2.0) {\\nextrude = -e0;\\nv_texcoord = vec2(0.5, 1.0);\\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\\nintroOpacity = 1.0 - exp(-t0);\\nv_size = getSize(speed0);\\nv_color = getColor(speed0);\\nv_color.a *= getOpacity(speed0);\\nposition = position0;\\n} else if (id == 3.0) {\\nextrude = mix(e0, e1, f);\\nv_texcoord = vec2(0.5, 0.0);\\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\\nintroOpacity = 1.0 - exp(-clampedTime);\\nv_size = getSize(speed);\\nv_color = getColor(speed);\\nv_color.a *= getOpacity(speed);\\nposition = mix(position0, position1, f);\\n} else if (id == 4.0) {\\nextrude = -mix(e0, e1, f);\\nv_texcoord = vec2(0.5, 1.0);\\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\\nintroOpacity = 1.0 - exp(-clampedTime);\\nv_size = getSize(speed);\\nv_color = getColor(speed);\\nv_color.a *= getOpacity(speed);\\nposition = mix(position0, position1, f);\\n}\\n}\\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(extrude * v_size, 0.0)).xy;\\ngl_Position = vec4(xy, 0.0, 1.0);\\nv_color.a *= fadeOpacity;\\nv_color.a *= mix(1.0, introOpacity, u_introFade);\\nv_color.rgb *= v_color.a;\\n}\"},streamlines:{\"streamlines.frag\":\"precision highp float;\\nvarying float v_side;\\nvarying float v_time;\\nvarying float v_totalTime;\\nvarying float v_timeSeed;\\nvarying vec4 v_color;\\nvarying float v_size;\\nuniform float u_time;\\nuniform float u_trailLength;\\nuniform float u_flowSpeed;\\nuniform float u_featheringSize;\\nuniform float u_introFade;\\n#include <raster/flow/getFragmentColor.glsl>\\n#include <raster/flow/getFadeOpacity.glsl>\\nvoid main(void) {\\nfloat t = mod(v_timeSeed * (v_totalTime + u_trailLength) + u_time * u_flowSpeed, v_totalTime + u_trailLength) - v_time;\\nvec4 color = v_color * step(0.0, t) * getFadeOpacity(t / u_trailLength);\\ncolor *= mix(1.0, 1.0 - exp(-v_time), u_introFade);\\ngl_FragColor = getFragmentColor(color, length((v_side + 1.0) / 2.0 - 0.5), v_size, u_featheringSize);\\n}\",\"streamlines.vert\":\"attribute vec3 a_positionAndSide;\\nattribute vec3 a_timeInfo;\\nattribute vec2 a_extrude;\\nattribute float a_speed;\\nuniform mat3 u_dvsMat3;\\nuniform mat3 u_displayViewMat3;\\nvarying float v_time;\\nvarying float v_totalTime;\\nvarying float v_timeSeed;\\nvarying vec4 v_color;\\nvarying float v_side;\\nvarying float v_size;\\nuniform float u_featheringSize;\\n#include <raster/flow/vv.glsl>\\nvoid main(void) {\\nvec4 lineColor = getColor(a_speed);\\nfloat lineOpacity = getOpacity(a_speed);\\nfloat lineSize = getSize(a_speed);\\nvec2 position = a_positionAndSide.xy;\\nv_side = a_positionAndSide.z;\\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(a_extrude * lineSize, 0.0)).xy;\\ngl_Position = vec4(xy, 0.0, 1.0);\\nv_time = a_timeInfo.x;\\nv_totalTime = a_timeInfo.y;\\nv_timeSeed = a_timeInfo.z;\\nv_color = lineColor;\\nv_color.a *= lineOpacity;\\nv_color.rgb *= v_color.a;\\nv_size = lineSize;\\n}\"},\"vv.glsl\":\"#define MAX_STOPS 8\\n#ifdef VV_COLOR\\nuniform float u_color_stops[MAX_STOPS];\\nuniform vec4 u_color_values[MAX_STOPS];\\nuniform int u_color_count;\\n#else\\nuniform vec4 u_color;\\n#endif\\n#ifdef VV_OPACITY\\nuniform float u_opacity_stops[MAX_STOPS];\\nuniform float u_opacity_values[MAX_STOPS];\\nuniform int u_opacity_count;\\n#else\\nuniform float u_opacity;\\n#endif\\n#ifdef VV_SIZE\\nuniform float u_size_stops[MAX_STOPS];\\nuniform float u_size_values[MAX_STOPS];\\nuniform int u_size_count;\\n#else\\nuniform float u_size;\\n#endif\\nuniform float u_featheringOffset;\\nvec4 getColor(float x) {\\n#ifdef VV_COLOR\\nvec4 color = u_color_values[0];\\n{\\nfor (int i = 1; i < MAX_STOPS; i++) {\\nif (i >= u_color_count) {\\nbreak;\\n}\\nfloat x1 = u_color_stops[i - 1];\\nif (x < x1) {\\nbreak;\\n}\\nfloat x2 = u_color_stops[i];\\nvec4 y2 = u_color_values[i];\\nif (x < x2) {\\nvec4 y1 = u_color_values[i - 1];\\ncolor = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\\n} else {\\ncolor = y2;\\n}\\n}\\n}\\n#else\\nvec4 color = u_color;\\n#endif\\nreturn color;\\n}\\nfloat getOpacity(float x) {\\n#ifdef VV_OPACITY\\nfloat opacity = u_opacity_values[0];\\n{\\nfor (int i = 1; i < MAX_STOPS; i++) {\\nif (i >= u_opacity_count) {\\nbreak;\\n}\\nfloat x1 = u_opacity_stops[i - 1];\\nif (x < x1) {\\nbreak;\\n}\\nfloat x2 = u_opacity_stops[i];\\nfloat y2 = u_opacity_values[i];\\nif (x < x2) {\\nfloat y1 = u_opacity_values[i - 1];\\nopacity = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\\n} else {\\nopacity = y2;\\n}\\n}\\n}\\n#else\\nfloat opacity = u_opacity;\\n#endif\\nreturn opacity;\\n}\\nfloat getSize(float x) {\\n#ifdef VV_SIZE\\nfloat size = u_size_values[0];\\n{\\nfor (int i = 1; i < MAX_STOPS; i++) {\\nif (i >= u_size_count) {\\nbreak;\\n}\\nfloat x1 = u_size_stops[i - 1];\\nif (x < x1) {\\nbreak;\\n}\\nfloat x2 = u_size_stops[i];\\nfloat y2 = u_size_values[i];\\nif (x < x2) {\\nfloat y1 = u_size_values[i - 1];\\nsize = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\\n} else {\\nsize = y2;\\n}\\n}\\n}\\n#else\\nfloat size = u_size;\\n#endif\\nreturn size + 2.0 * u_featheringSize * u_featheringOffset;\\n}\"},hillshade:{\"hillshade.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nuniform int u_hillshadeType;\\nuniform float u_sinZcosAs[6];\\nuniform float u_sinZsinAs[6];\\nuniform float u_cosZs[6];\\nuniform float u_weights[6];\\nuniform vec2 u_factor;\\nuniform float u_minValue;\\nuniform float u_maxValue;\\nuniform float u_scaling;\\n#include <raster/lut/colorize.glsl>\\n#include <raster/common/getSurfaceValues.glsl>\\nvec3 rgb2hsv(vec3 c) {\\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\\nfloat d = q.x - min(q.w, q.y);\\nfloat e = 1.0e-10;\\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\\n}\\nvec3 hsv2rgb(vec3 c) {\\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\\nval = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\\nvec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\\nvec3 hsv = rgb2hsv(rgb.xyz);\\nhsv.z = hillshade;\\nreturn vec4(hsv2rgb(hsv) * u_scaling, 1.0) * rgb.a;\\n}\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\nif (currentPixel.a == 0.0) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nfloat pv[10];\\ngetSurfaceValues(u_image, pixelLocation, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * u_factor.s;\\nfloat dzy = (pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * u_factor.t;\\nfloat dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\\nfloat hillshade = 0.0;\\nif (u_hillshadeType == 0){\\nfloat cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\\nfloat z = (u_cosZs[0] + cosDelta) / dzd;\\nif (z < 0.0)  z = 0.0;\\nhillshade = z;\\n} else {\\nfor (int k = 0; k < 6; k++) {\\nfloat cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\\nfloat z = (u_cosZs[k] + cosDelta) / dzd;\\nif (z < 0.0) z = 0.0;\\nhillshade = hillshade + z * u_weights[k];\\nif (k == 5) break;\\n}\\n}\\n#ifdef APPLY_COLORMAP\\nvec4 result = overlay(pv[4], u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\\n#else\\nhillshade *= u_scaling;\\nvec4 result = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\\n#endif\\n#ifdef ROUND_OUTPUT\\nresult = vec4(floor(result.xyz + 0.5), result.a);\\n#endif\\ngl_FragColor = result;\\n}\"},lut:{\"colorize.glsl\":\"uniform sampler2D u_colormap;\\nuniform float u_colormapOffset;\\nuniform float u_colormapMaxIndex;\\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\\nfloat clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\\nvec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\\nvec4 color = texture2D(u_colormap, clrPosition);\\nvec4 result = vec4(color.rgb, color.a * currentPixel.a);\\nreturn result;\\n}\\nvec4 colorizeNoClamp(vec4 currentPixel, float scaleFactor) {\\nfloat value = currentPixel.r * scaleFactor - u_colormapOffset;\\nvec4 result = colorize(currentPixel, scaleFactor);\\nreturn result * step(0.0, value) * step(value, u_colormapMaxIndex);\\n}\",\"lut.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\n#include <raster/lut/colorize.glsl>\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\nvec4 result = colorizeNoClamp(currentPixel, 1.0);\\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\\n}\"},magdir:{\"magdir.frag\":\"precision mediump float;\\nvarying vec4 v_color;\\nuniform lowp float u_opacity;\\nvoid main() {\\ngl_FragColor = v_color * u_opacity;\\n}\",\"magdir.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nattribute vec2 a_offset;\\nattribute vec2 a_vv;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform vec2 u_symbolSize;\\nuniform vec2 u_symbolPercentRange;\\nuniform vec2 u_dataRange;\\nuniform float u_rotation;\\nuniform vec4 u_colors[12];\\nvarying vec4 v_color;\\nvoid main()\\n{\\nfloat angle = a_offset.y + u_rotation;\\n#ifndef ROTATION_GEOGRAPHIC\\nangle = 3.14159265359 * 2.0 - angle - 3.14159265359 / 2.0;\\n#endif\\nvec2 offset = vec2(cos(angle), sin(angle)) * a_offset.x;\\n#ifdef DATA_RANGE\\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\\n#else\\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\\n#endif\\nvec2 pos = a_pos + offset * sizePercentage * u_symbolSize;\\nv_color = u_colors[int(a_vv.x)];\\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\\n}\"},reproject:{\"reproject.frag\":\"precision mediump float;\\nvarying vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\\n}\",\"reproject.vert\":\"precision mediump float;\\nattribute vec2 a_position;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_position;\\ngl_Position = vec4(2.0 * (a_position - 0.5), 0.0, 1.0);\\n}\"},rfx:{aspect:{\"aspect.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_cellSize;\\nuniform vec2 u_srcImageSize;\\n#include <raster/common/getSurfaceValues.glsl>\\nconst float pi = 3.14159265359;\\nvoid main() {\\nfloat pv[10];\\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) / (8.0 * u_cellSize[0]);\\nfloat dzy = -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) / (8.0 * u_cellSize[1]);\\nalpha *= sign(abs(dzx) + abs(dzy));\\nfloat aspect_rad = (dzx == 0.0) ? (step(0.0, dzy) * 0.5 * pi + step(dzy, 0.0) * 1.5 * pi) : mod((2.5 * pi + atan(dzy, -dzx)), 2.0 * pi);\\nfloat aspect = aspect_rad * 180.0 / pi;\\ngl_FragColor = vec4(aspect, aspect, aspect, 1.0) * alpha;\\n}\"},bandarithmetic:{\"bandarithmetic.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform mediump mat3 u_bandIndexMat3;\\nuniform float u_adjustments[3];\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\\nfloat nir = pv2.r;\\nfloat red = pv2.g;\\nfloat index;\\n#ifdef NDXI\\nindex = (nir - red) * invertValue(nir + red);\\n#elif defined(SR)\\nindex = nir * invertValue(red);\\n#elif defined(CI)\\nindex = nir * invertValue(red) - 1.0;\\n#elif defined(SAVI)\\nindex = (nir - red) * invertValue(nir + red + u_adjustments[0]) * (1.0 + u_adjustments[0]);\\n#elif defined(TSAVI)\\nfloat s = u_adjustments[0];\\nfloat a = u_adjustments[1];\\nfloat x = u_adjustments[2];\\nfloat y = -a * s + x * (1.0 + s * s);\\nindex = (s * (nir - s * red - a)) * invertValue(a * nir + red + y);\\n#elif defined(MSAVI)\\nfloat nir2 = 2.0 * nir + 1.0;\\nindex = 0.5 * (nir2 - sqrt(nir2 * nir2 - 8.0 * (nir - red)));\\n#elif defined(GEMI)\\nfloat eta = (2.0 * (nir * nir - red * red) + 1.5 * nir + 0.5 * red) * invertValue(nir + red + 0.5);\\nindex = eta * (1.0 - 0.25 * eta) - (red - 0.125) * invertValue(1.0 - red);\\n#elif defined(PVI)\\nfloat a = u_adjustments[0];\\nfloat b = u_adjustments[1];\\nfloat y = sqrt(1.0 + a * a);\\nindex = (nir - a * red - b) * invertValue(y);\\n#elif defined(VARI)\\nindex = (pv2.g - pv2.r) * invertValue(pv2.g + pv2.r - pv2.b);\\n#elif defined(MTVI)\\nfloat green = pv2.b;\\nfloat v = sqrt(pow((2.0 * nir + 1.0), 2.0) - (6.0 * nir - 5.0 * sqrt(red)) - 0.5);\\nindex = 1.5 * (1.2 * (nir - green) - 2.5 * (red - green)) * invertValue(v);\\n#elif defined(RTVICORE)\\nfloat green = pv2.b;\\nindex = 100.0 * (nir - red) - 10.0 * (nir - green);\\n#elif defined(EVI)\\nfloat blue = pv2.b;\\nfloat denom = nir + 6.0 * red - 7.5 * blue + 1.0;\\nindex =  (2.5 * (nir - red)) * invertValue(denom);\\n#elif defined(WNDWI)\\nfloat g = pv2.r;\\nfloat n = pv2.g;\\nfloat s = pv2.s;\\nfloat a = u_adjustments[0];\\nfloat denom = g + a * n + (1.0 - a) * s;\\nindex = (g - a * n - (1 - a) * s) * invertValue(denom);\\n#elif defined(BAI)\\nindex = invertValue(pow((0.1 - red), 2.0) + pow((0.06 - nir), 2.0));\\n#else\\ngl_FragColor = pv;\\nreturn;\\n#endif\\n#ifdef ROUND_OUTPUT\\nindex = floor(index + 0.5);\\n#endif\\ngl_FragColor = vec4(index, index, index, pv.a);\\n}\"},colormap2rgb:{\"colormap2rgb.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#include <raster/lut/colorize.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec4 result = colorizeNoClamp(vec4(pv.r, pv.r, pv.r, 1.0), 1.0);\\ngl_FragColor = vec4(result.xyz * 255.0, 1.0) * result.a * pv.a;\\n}\"},compositeband:{\"compositeband.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nuniform sampler2D u_image1;\\nuniform sampler2D u_image2;\\n#ifdef ONE_CONSTANT\\nuniform float u_image1Const;\\n#ifdef TWO_CONSTANT\\nuniform float u_image2Const;\\n#endif\\nuniform mat3 u_imageSwap;\\n#endif\\nvarying vec2 v_texcoord;\\nvoid main() {\\nvec4 pv0 = texture2D(u_image, v_texcoord);\\nfloat a = pv0.r;\\nfloat alpha = pv0.a;\\n#ifdef TWO_CONSTANT\\nfloat b = u_image1Const;\\nfloat c = u_image2Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\n#elif defined(ONE_CONSTANT)\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\nalpha *= pv1.a;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nvec4 pv2 = texture2D(u_image2, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = pv2.r;\\nalpha = alpha * pv1.a * pv2.a;\\n#endif\\ngl_FragColor = vec4(a, b, c, alpha);\\n}\"},computechange:{\"computechange.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nuniform sampler2D u_image1;\\n#ifdef ONE_CONSTANT\\nuniform float u_image1Const;\\nuniform mat3 u_imageSwap;\\n#endif\\nvarying vec2 v_texcoord;\\nuniform vec2 u_domainRange;\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv0 = texture2D(u_image, v_texcoord);\\nfloat a = pv0.r;\\n#ifdef ONE_CONSTANT\\nfloat b = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, 0);\\na = abc.s;\\nb = abc.t;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\n#endif\\nfloat result = a;\\nfloat alpha = pv0.a;\\n#ifdef DIFFERENCE\\nresult = a - b;\\n#elif defined(RELATIVE)\\nresult = (a - b) * invertValue(max(abs(a), abs(b)));\\n#endif\\nbool isInvalid = result < u_domainRange.s || result > u_domainRange.t;\\nresult = isInvalid ? 0.0 : result;\\nalpha *= float(!isInvalid);\\n#ifdef ROUND_OUTPUT\\nresult = floor(result + 0.5);\\n#endif\\ngl_FragColor = vec4(result, result, result, alpha);\\n}\"},contrast:{\"contrast.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#include <raster/common/contrastBrightness.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec4 result = adjustContrastBrightness(pv, false);\\ngl_FragColor = vec4(floor(result.rgb * 255.0 + 0.5), result.a);\\n}\"},convolution:{\"convolution.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_srcImageSize;\\n#define KERNEL_SIZE_ROWS ROWS\\n#define KERNEL_SIZE_COLS COLS\\nuniform vec2 u_clampRange;\\nuniform float u_kernel[25];\\n#include <raster/common/mirror.glsl>\\nvoid main() {\\nvec3 rgb = vec3(0.0, 0.0, 0.0);\\nvec2 resolution = 1.0 / u_srcImageSize;\\nfloat rowOffset = -float(floor(float(KERNEL_SIZE_ROWS) / 2.0));\\nfloat colOffset = -float(floor(float(KERNEL_SIZE_COLS) / 2.0));\\nfloat alpha = 1.0;\\nfor (int row = 0; row < KERNEL_SIZE_ROWS; row++) {\\nfloat pos_row = rowOffset + float(row);\\nfor (int col = 0; col < KERNEL_SIZE_COLS; col++) {\\nvec2 pos = v_texcoord + vec2(colOffset + float(col), pos_row) * resolution;\\nvec4 pv = texture2D(u_image, mirror(pos));\\nrgb += pv.rgb * u_kernel[row * KERNEL_SIZE_COLS + col];\\nalpha *= pv.a;\\n}\\n}\\nrgb = clamp(rgb, u_clampRange.s, u_clampRange.t);\\ngl_FragColor = vec4(rgb * alpha, alpha);\\n}\"},curvature:{\"curvature.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform float u_zlFactor;\\nuniform vec2 u_srcImageSize;\\n#include <raster/common/getSurfaceValues.glsl>\\nvoid main() {\\nfloat pv[10];\\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat d = ((pv[3] + pv[5]) * 0.5 - pv[4]);\\nfloat e = ((pv[1] + pv[7]) * 0.5 - pv[4]);\\nfloat curvature = 0.0;\\n#ifdef STANDARD\\ncurvature = -u_zlFactor * (d + e);\\ngl_FragColor = vec4(curvature, curvature, curvature, alpha);\\n#else\\nfloat f = (-pv[0] + pv[2] + pv[6] - pv[8]) / 4.0;\\nfloat g = (-pv[3] + pv[5]) / 2.0;\\nfloat h = (pv[1] - pv[7]) / 2.0;\\nfloat g2 = g * g;\\nfloat h2 = h * h;\\n#ifdef PROFILE\\ncurvature = (u_zlFactor * (d * g2 + e * h2 + f * g * h)) / (g2 + h2);\\n#else\\ncurvature = (-u_zlFactor * (d * h2 + e * g2 - f * g * h)) / (g2 + h2);\\n#endif\\n#endif\\ngl_FragColor = vec4(curvature, curvature, curvature, alpha);\\n}\"},extractband:{\"extractband.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform mediump mat3 u_bandIndexMat3;\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\\ngl_FragColor = vec4(pv2, pv.a);\\n}\"},focalstatistics:{\"focalstatistics.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_srcImageSize;\\n#define KERNEL_SIZE_ROWS ROWS\\n#define KERNEL_SIZE_COLS COLS\\nuniform vec2 u_clampRange;\\n#include <raster/common/mirror.glsl>\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec2 resolution = 1.0 / u_srcImageSize;\\nfloat rowOffset = -float(floor(float(KERNEL_SIZE_ROWS) / 2.0));\\nfloat colOffset = -float(floor(float(KERNEL_SIZE_COLS) / 2.0));\\nfloat count = 0.0;\\n#ifdef STDDEV\\nvec3 sum = vec3(0.0, 0.0, 0.0);\\nvec3 sum2 = vec3(0.0, 0.0, 0.0);\\n#endif\\nvec4 currentPixel = texture2D(u_image, v_texcoord);\\nvec3 rgb = currentPixel.rgb;\\nfor (int row = 0; row < KERNEL_SIZE_ROWS; row++) {\\nfloat pos_row = rowOffset + float(row);\\nfor (int col = 0; col < KERNEL_SIZE_COLS; col++) {\\nvec2 pos = v_texcoord + vec2(colOffset + float(col), pos_row) * resolution;\\nvec4 pv = texture2D(u_image, mirror(pos));\\ncount += pv.a;\\n#ifdef MIN\\nrgb = min(rgb, pv.rgb);\\n#elif defined(MAX)\\nrgb = max(rgb, pv.rgb);\\n#elif defined(MEAN)\\nrgb += pv.rgb;\\n#elif defined(STDDEV)\\nsum += pv.rgb;\\nsum2 += (pv.rgb * pv.rgb);\\n#endif\\n}\\n}\\n#ifdef MEAN\\nrgb *= invertValue(count);\\n#elif defined(STDDEV)\\nrgb = sqrt((sum2 - sum * sum * invertValue(count)) * invertValue(count));\\n#endif\\nfloat alpha = step(0.9999, count);\\nrgb = clamp(rgb, u_clampRange.s, u_clampRange.t);\\n#ifdef FILL\\nrgb = (1.0 - currentPixel.a) * rgb + currentPixel.a * currentPixel.rgb;\\n#endif\\ngl_FragColor = vec4(rgb * alpha, alpha);\\n}\"},grayscale:{\"grayscale.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec3 u_weights;\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nfloat value = dot(u_weights, pv.rgb);\\ngl_FragColor = vec4(value, value, value, pv.a);\\n}\"},local:{\"local.frag\":\"precision highp float;\\nuniform sampler2D u_image;\\nuniform sampler2D u_image1;\\n#ifdef ONE_CONSTANT\\nuniform float u_image1Const;\\n#ifdef TWO_CONSTANT\\nuniform float u_image2Const;\\n#endif\\nuniform mat3 u_imageSwap;\\n#endif\\nvarying vec2 v_texcoord;\\nuniform vec2 u_domainRange;\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv0 = texture2D(u_image, v_texcoord);\\nfloat a = pv0.r;\\n#ifdef TWO_IMAGES\\n#ifdef ONE_CONSTANT\\nfloat b = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, 0);\\na = abc.s;\\nb = abc.t;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\n#endif\\n#elif defined(CONDITIONAL)\\n#ifdef TWO_CONSTANT\\nfloat b = u_image1Const;\\nfloat c = u_image2Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\n#elif defined(ONE_CONSTANT)\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nvec4 pv2 = texture2D(u_image2, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = pv2.r;\\n#endif\\n#endif\\nfloat result = a;\\nfloat alpha = pv0.a;\\n#ifdef PLUS\\nresult = a + b;\\n#elif defined(MINUS)\\nresult = a - b;\\n#elif defined(TIMES)\\nresult = a * b;\\n#elif defined(DIVIDE)\\nresult = a * invertValue(b);\\nalpha *= float(abs(sign(b)));\\n#elif defined(FLOATDIVIDE)\\nresult = a * invertValue(b);\\nalpha *= float(abs(sign(b)));\\n#elif defined(FLOORDIVIDE)\\nresult = floor(a * invertValue(b));\\nalpha *= float(abs(sign(b)));\\n#elif defined(SQUARE)\\nresult = a * a;\\n#elif defined(SQRT)\\nresult = sqrt(a);\\n#elif defined(POWER)\\nresult = pow(a, b);\\n#elif defined(LN)\\nresult = a <= 0.0 ? 0.0: log(a);\\nalpha *= float(a > 0.0);\\n#elif defined(LOG_1_0)\\nresult = a <= 0.0 ? 0.0: log2(a) * invertValue(log2(10.0));\\nalpha *= float(a > 0.0);\\n#elif defined(LOG_2)\\nresult = a <= 0.0 ? 0.0: log2(a);\\nalpha *= float(a > 0.0);\\n#elif defined(EXP)\\nresult = exp(a);\\n#elif defined(EXP_1_0)\\nresult = pow(10.0, a);\\n#elif defined(EXP_2)\\nresult = pow(2.0, a);\\n#elif defined(ROUNDDOWN)\\nresult = floor(a);\\n#elif defined(ROUNDUP)\\nresult = ceil(a);\\n#elif defined(INT)\\nresult = float(sign(a)) * floor(abs(a));\\n#elif defined(MOD)\\nresult = mod(a, b);\\n#elif defined(NEGATE)\\nresult = -a;\\n#elif defined(ABS)\\nresult = abs(a);\\n#elif defined(ACOS)\\nresult = abs(a) > 1.0 ? 0.0: acos(a);\\nalpha *= step(abs(a), 1.00001);\\n#elif defined(ACOSH)\\nresult = acosh(a);\\n#elif defined(ASIN)\\nresult = abs(a) > 1.0 ? 0.0: asin(a);\\nalpha *= step(abs(a), 1.00001);\\n#elif defined(ASINH)\\nresult = asinh(a);\\n#elif defined(ATAN)\\nresult = atan(a);\\n#elif defined(ATANH)\\nresult = abs(a) > 1.0 ? 0.0: atanh(a);\\nalpha *= step(abs(a), 1.0);\\n#elif defined(ATAN_2)\\nresult = atan(a, b);\\n#elif defined(COS)\\nresult = cos(a);\\n#elif defined(COSH)\\nresult = cosh(a);\\n#elif defined(SIN)\\nresult = sin(a);\\n#elif defined(SINH)\\nresult = sinh(a);\\n#elif defined(TAN)\\nresult = tan(a);\\n#elif defined(TANH)\\nresult = tanh(a);\\n#elif defined(BITWISEAND)\\nresult = float(int(a) & int(b));\\n#elif defined(BITWISEOR)\\nresult = float(int(a) | int(b));\\n#elif defined(BITWISELEFTSHIFT)\\nresult = float(int(a) << int(b));\\n#elif defined(BITWISERIGHTSHIFT)\\nresult = float(int(a) >> int(b));\\n#elif defined(BITWISENOT)\\nresult = float(~(int(a)));\\n#elif defined(BITWISEXOR)\\nresult = float(int(a) ^ int(b));\\n#elif defined(BOOLEANAND)\\nresult = float((a != 0.0) && (b != 0.0));\\n#elif defined(BOOLEANNOT)\\nresult = float(a == 0.0);\\n#elif defined(BOOLEANOR)\\nresult = float((a != 0.0) || (b != 0.0));\\n#elif defined(BOOLEANXOR)\\nresult = float((a != 0.0) ^^ (b != 0.0));\\n#elif defined(GREATERTHAN)\\nresult = float(a > b);\\n#elif defined(GREATERTHANEQUAL)\\nresult = float(a >= b);\\n#elif defined(LESSTHAN)\\nresult = float(a < b);\\n#elif defined(LESSTHANEQUAL)\\nresult = float(a <= b);\\n#elif defined(EQUALTO)\\nresult = float(a == b);\\n#elif defined(NOTEQUAL)\\nresult = float(a != b);\\n#elif defined(ISNULL)\\nresult = float(alpha == 0.0);\\nalpha = 1.0;\\n#elif defined(SETNULL)\\nfloat maskValue = float(a == 0.0);\\nresult = maskValue * b;\\nalpha *= maskValue;\\n#elif defined(CONDITIONAL)\\nfloat weight = float(abs(sign(a)));\\nresult = weight * b + (1.0 - weight) * c;\\n#endif\\nfloat rangeFactor = step(u_domainRange.s, result) * step(result, u_domainRange.t);\\nresult *= rangeFactor;\\nalpha *= rangeFactor;\\n#ifdef ROUND_OUTPUT\\nresult = floor(result + 0.5);\\n#endif\\ngl_FragColor = vec4(result, result, result, alpha);\\n}\"},mask:{\"mask.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#define LEN_INCLUDED_RANGES 6\\n#define LEN_NODATA_VALUES 6\\nuniform highp float u_includedRanges[6];\\nuniform highp float u_noDataValues[6];\\nfloat maskFactor(float bandValue, float fromValue, float to) {\\nfloat factor = 1.0;\\nfor (int i = 0; i < LEN_NODATA_VALUES; i++) {\\nfactor *= float(u_noDataValues[i] != bandValue);\\n}\\nfactor *= step(fromValue, bandValue) * step(bandValue, to);\\nreturn factor;\\n}\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nfloat redFactor = maskFactor(pv.r, u_includedRanges[0], u_includedRanges[1]);\\n#ifdef MULTI_BAND\\nfloat greenFactor = maskFactor(pv.g, u_includedRanges[2], u_includedRanges[3]);\\nfloat blueFactor = maskFactor(pv.b, u_includedRanges[4], u_includedRanges[5]);\\nfloat maskFactor = redFactor * greenFactor * blueFactor;\\ngl_FragColor = pv * maskFactor;\\n#else\\ngl_FragColor = pv * redFactor;\\n#endif\\n}\"},ndvi:{\"ndvi.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform mediump mat3 u_bandIndexMat3;\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\\nfloat nir = pv2.r;\\nfloat red = pv2.g;\\nfloat index = (nir - red) * invertValue(nir + red);\\n#ifdef SCALED\\nindex = floor((index + 1.0) * 100.0 + 0.5);\\n#endif\\ngl_FragColor = vec4(index, index, index, pv.a);\\n}\"},remap:{\"remap.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#define LEN_REMAP_RANGES 18\\n#define LEN_NODATA_RANGES 12\\nuniform highp float u_rangeMaps[18];\\nuniform highp float u_noDataRanges[12];\\nuniform highp float u_unmatchMask;\\nuniform vec2 u_clampRange;\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nfloat factor = 1.0;\\nfloat bandValue = pv.r;\\nfor (int i = 0; i < LEN_NODATA_RANGES; i+=2) {\\nfloat inside = 1.0 - step(u_noDataRanges[i], bandValue) * step(bandValue, u_noDataRanges[i+1]);\\nfactor *= inside;\\n}\\nfloat mapValue = 0.0;\\nfloat includeMask = 0.0;\\nfor (int i = 0; i < LEN_REMAP_RANGES; i+=3) {\\nfloat stepMask = step(u_rangeMaps[i], bandValue) * step(bandValue, u_rangeMaps[i+1]);\\nincludeMask = (1.0 - stepMask) * includeMask + stepMask;\\nmapValue = (1.0 - stepMask) * mapValue + stepMask * u_rangeMaps[i+2];\\n}\\nbandValue = factor * (mapValue + (1.0 - includeMask) * u_unmatchMask * pv.r);\\nfloat bandMask = factor * max(u_unmatchMask, includeMask);\\nbandValue = clamp(bandValue, u_clampRange.s, u_clampRange.t);\\ngl_FragColor = vec4(bandValue, bandValue, bandValue, bandMask * pv.a);\\n}\"},slope:{\"slope.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_cellSize;\\nuniform float u_zFactor;\\nuniform vec2 u_srcImageSize;\\nuniform float u_pixelSizePower;\\nuniform float u_pixelSizeFactor;\\n#include <raster/common/getSurfaceValues.glsl>\\nvoid main() {\\nfloat pv[10];\\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat xf = (u_zFactor + pow(u_cellSize[0], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[0]);\\nfloat yf = (u_zFactor + pow(u_cellSize[1], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[1]);\\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * xf;\\nfloat dzy = -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * yf;\\nfloat rise2run = sqrt(dzx * dzx + dzy * dzy);\\n#ifdef PERCENT_RISE\\nfloat result = rise2run * 100.0;\\n#else\\nfloat result = atan(rise2run) * 57.2957795;\\n#endif\\n#ifdef ROUND_OUTPUT\\nresult = floor(result + 0.5);\\n#endif\\ngl_FragColor = vec4(result, result, result, alpha);\\n}\"},stretch:{\"stretch.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying highp vec2 v_texcoord;\\nuniform float u_minCutOff[3];\\nuniform float u_maxCutOff[3];\\nuniform float u_minOutput;\\nuniform float u_maxOutput;\\nuniform float u_factor[3];\\nuniform float u_gamma[3];\\nuniform float u_gammaCorrection[3];\\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, float gamma, float gammaCorrection) {\\nval = clamp(val, minCutOff, maxCutOff);\\nfloat stretchedVal;\\n#ifdef USE_GAMMA\\nfloat tempf = 1.0;\\nfloat outRange = maxOutput - minOutput;\\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\\ntempf -= step(1.0, gamma) * sign(gamma - 1.0) * pow(1.0 / outRange, relativeVal * gammaCorrection);\\nstretchedVal = tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput;\\nstretchedVal = clamp(stretchedVal, minOutput, maxOutput);\\n#else\\nstretchedVal = minOutput + (val - minCutOff) * factor;\\n#endif\\n#ifdef ROUND_OUTPUT\\nstretchedVal = floor(stretchedVal + 0.5);\\n#endif\\nreturn stretchedVal;\\n}\\nvoid main() {\\nvec4 currentPixel = texture2D(u_image, v_texcoord);\\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_gamma[0], u_gammaCorrection[0]);\\n#ifdef MULTI_BAND\\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_gamma[1], u_gammaCorrection[1]);\\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_gamma[2], u_gammaCorrection[2]);\\ngl_FragColor = vec4(redVal, greenVal, blueVal, currentPixel.a);\\n#else\\ngl_FragColor = vec4(redVal, redVal, redVal, currentPixel.a);\\n#endif\\n}\"},vs:{\"vs.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_pos;\\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\"}},scalar:{\"scalar.frag\":\"precision mediump float;\\nuniform lowp float u_opacity;\\nvarying vec2 v_pos;\\nconst vec4 outlineColor = vec4(0.2, 0.2, 0.2, 1.0);\\nconst float outlineSize = 0.02;\\nconst float innerRadius = 0.25;\\nconst float outerRadius = 0.42;\\nconst float innerSquareLength = 0.15;\\nvoid main() {\\nmediump float dist = length(v_pos);\\nmediump float fillalpha1 = smoothstep(outerRadius, outerRadius + outlineSize, dist);\\nfillalpha1 *= (1.0-smoothstep(outerRadius + outlineSize, outerRadius + 0.1 + outlineSize, dist));\\n#ifdef INNER_CIRCLE\\nmediump float fillalpha2 = smoothstep(innerRadius, innerRadius + outlineSize, dist);\\nfillalpha2 *= (1.0-smoothstep(innerRadius + outlineSize, innerRadius + 0.1 + outlineSize, dist));\\n#else\\nmediump float fillalpha2 = (abs(v_pos.x) < innerSquareLength ? 1.0 : 0.0) * (abs(v_pos.y) < innerSquareLength ? 1.0 : 0.0);\\n#endif\\ngl_FragColor = (fillalpha2 + fillalpha1) * outlineColor * u_opacity;\\n}\",\"scalar.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nattribute vec2 a_offset;\\nattribute vec2 a_vv;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform vec2 u_symbolSize;\\nuniform vec2 u_symbolPercentRange;\\nuniform vec2 u_dataRange;\\nvarying vec2 v_pos;\\nvoid main()\\n{\\n#ifdef DATA_RANGE\\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\\n#else\\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\\n#endif\\nvec2 size = u_symbolSize * sizePercentage;\\nvec2 pos = a_pos + a_offset * size;\\nv_pos = a_offset;\\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\\n}\"},stretch:{\"stretch.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nuniform float u_minCutOff[3];\\nuniform float u_maxCutOff[3];\\nuniform float u_minOutput;\\nuniform float u_maxOutput;\\nuniform float u_factor[3];\\nuniform bool u_useGamma;\\nuniform float u_gamma[3];\\nuniform float u_gammaCorrection[3];\\n#include <raster/lut/colorize.glsl>\\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\\nif (val >= maxCutOff) {\\nreturn maxOutput;\\n} else if (val <= minCutOff) {\\nreturn minOutput;\\n}\\nfloat stretchedVal;\\nif (useGamma) {\\nfloat tempf = 1.0;\\nfloat outRange = maxOutput - minOutput;\\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\\nif (gamma > 1.0) {\\ntempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\\n}\\nstretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\\n} else {\\nstretchedVal = minOutput + (val - minCutOff) * factor;\\n}\\n#ifdef ROUND_OUTPUT\\nstretchedVal = floor(stretchedVal + 0.5);\\n#endif\\nreturn stretchedVal;\\n}\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\n#ifdef NOOP\\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\\nreturn;\\n#endif\\nif (u_bandCount == 1) {\\nfloat grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\\n#ifdef APPLY_COLORMAP\\nvec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\\n#else\\ngl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\\n#endif\\n} else {\\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\\ngl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\\n}\\n}\"}},stencil:{\"stencil.frag\":\"void main() {\\ngl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\\n}\",\"stencil.vert\":\"attribute vec2 a_pos;\\nuniform mat3 u_worldExtent;\\nvoid main() {\\ngl_Position = vec4(u_worldExtent * vec3(a_pos, 1.0), 1.0);\\n}\"},test:{\"TestShader.common.glsl\":\"#ifndef RETURN_RED\\nvarying    vec4      v_color;\\n#endif\\nvarying    vec2      v_offset;\",\"TestShader.frag\":\"precision highp float;\\n#include <test/TestShader.common.glsl>\\nvoid main() {\\nif (v_offset.x > -.5 && v_offset.y > -.5 && v_offset.x < .5 && v_offset.y < .5) {\\ndiscard;\\n}\\n#ifdef RETURN_RED\\ngl_FragColor = vec4(1., 0., 0., 1.);\\n#else\\ngl_FragColor = v_color;\\n#endif\\n}\",\"TestShader.vert\":\"const float POS_PRECISION_FACTOR = 10.;\\nconst float OFFSET_PRECISION_FACTOR = 10.;\\nconst float SIZE_PRECISION_FACTOR = 10.;\\nattribute  vec2      a_pos_packed;\\nattribute  vec2      a_offset_packed;\\nattribute  float     a_size_packed;\\n#ifdef DATA_DRIVEN_COLOR\\nconst float u_dataDrivenColor_validValues[4] = float[4](0., 0., 1., 0.);\\nuniform    vec4      u_dataDrivenColor_colorFallback;\\nuniform    vec4      u_dataDrivenColor_color;\\n#endif\\nuniform    float     u_view_zoomLevel;\\n#include <test/TestShader.common.glsl>\\n#ifdef DATA_DRIVEN_COLOR\\nvec4 getColor(float value) {\\nint index = -1;\\nfor (int i = 0; i < 4; i++) {\\nif (u_dataDrivenColor_validValues[i] == value) {\\nindex = i;\\nbreak;\\n}\\n}\\nif (index == -1) {\\nreturn u_dataDrivenColor_colorFallback;\\n}\\nreturn u_dataDrivenColor_color;\\n}\\n#endif\\nvoid main() {\\nvec2  a_pos = a_pos_packed / POS_PRECISION_FACTOR;\\nvec2  a_offset = a_offset_packed / OFFSET_PRECISION_FACTOR;\\nfloat a_size = a_size_packed / SIZE_PRECISION_FACTOR;\\nvec4 color = vec4(1., 0., 0., 1.);\\n#ifdef DATA_DRIVEN_COLOR\\ncolor = getColor(1.);\\n#endif\\nvec2 offsetScaled = a_offset * a_size;\\nvec4 pos = vec4(a_pos.xy + offsetScaled, 0., 1.);\\ngl_Position = pos;\\n#ifndef RETURN_RED\\nv_color = color;\\n#endif\\nv_offset = a_offset;\\n}\"},tileInfo:{\"tileInfo.frag\":\"uniform mediump sampler2D u_texture;\\nvarying mediump vec2 v_tex;\\nvoid main(void) {\\nlowp vec4 color = texture2D(u_texture, v_tex);\\ncolor.rgb *= color.a;\\ngl_FragColor = color;\\n}\",\"tileInfo.vert\":\"attribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump float u_depth;\\nuniform mediump vec2 u_coord_ratio;\\nuniform mediump vec2 u_delta;\\nuniform mediump vec2 u_dimensions;\\nvarying mediump vec2 v_tex;\\nvoid main() {\\nmediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\\nvec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\\nv_tex = a_pos;\\n}\"},util:{\"atan2.glsl\":\"float atan2(in float y, in float x) {\\nfloat t0, t1, t2, t3, t4;\\nt3 = abs(x);\\nt1 = abs(y);\\nt0 = max(t3, t1);\\nt1 = min(t3, t1);\\nt3 = 1.0 / t0;\\nt3 = t1 * t3;\\nt4 = t3 * t3;\\nt0 =         - 0.013480470;\\nt0 = t0 * t4 + 0.057477314;\\nt0 = t0 * t4 - 0.121239071;\\nt0 = t0 * t4 + 0.195635925;\\nt0 = t0 * t4 - 0.332994597;\\nt0 = t0 * t4 + 0.999995630;\\nt3 = t0 * t3;\\nt3 = (abs(y) > abs(x)) ? 1.570796327 - t3 : t3;\\nt3 = x < 0.0 ?  3.141592654 - t3 : t3;\\nt3 = y < 0.0 ? -t3 : t3;\\nreturn t3;\\n}\",\"encoding.glsl\":\"const vec4 rgba2float_factors = vec4(\\n255.0 / (256.0),\\n255.0 / (256.0 * 256.0),\\n255.0 / (256.0 * 256.0 * 256.0),\\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\\n);\\nfloat rgba2float(vec4 rgba) {\\nreturn dot(rgba, rgba2float_factors);\\n}\"}};export{e as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport r from\"./shaderRepository.js\";import{ShaderCompiler as e}from\"../../../../../webgl/ShaderCompiler.js\";function o(r){return function(e){let o=r;return e.split(\"/\").forEach((r=>{o&&(o=o[r])})),o}}const t=new e(o(r));function n(r){return t.resolveIncludes(r)}export{n as resolveIncludes};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport{resolveIncludes as r}from\"./sources/resolver.js\";const e={shaders:{vertexShader:r(\"background/background.vert\"),fragmentShader:r(\"background/background.frag\")},attributes:new Map([[\"a_pos\",0]])};export{e as background};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport{fromValues as r}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{createProgramDescriptor as e}from\"../Utils.js\";import t from\"./WGLBrush.js\";import{background as s}from\"../shaders/BackgroundPrograms.js\";import{StencilOperation as o,CompareFunction as i,PrimitiveType as a,DataType as n}from\"../../../../webgl/enums.js\";import{createProgram as l}from\"../../../../webgl/ProgramTemplate.js\";const m=()=>e(\"clip\",{geometry:[{location:0,name:\"a_pos\",count:2,type:n.SHORT}]});class p extends t{constructor(){super(...arguments),this._color=r(0,1,0,1)}dispose(){this._program&&this._program.dispose()}prepareState({context:r}){r.setStencilTestEnabled(!0),r.setBlendingEnabled(!1),r.setFaceCullingEnabled(!1),r.setColorMask(!1,!1,!1,!1),r.setStencilOp(o.KEEP,o.KEEP,o.REPLACE),r.setStencilWriteMask(255),r.setStencilFunction(i.ALWAYS,0,255)}draw(r,e){const{context:t,state:o,requestRender:i,allowDelayedRender:p}=r,c=m(),d=e.getVAO(t,o,c.attributes,c.bufferLayouts);null!=d.indexBuffer&&(this._program||(this._program=l(t,s)),!p||null==i||this._program.compiled?(t.useProgram(this._program),this._program.setUniform2fv(\"u_coord_range\",[1,1]),this._program.setUniform4fv(\"u_color\",this._color),this._program.setUniformMatrix3fv(\"u_dvsMat3\",o.displayMat3),t.bindVAO(d),t.drawElements(a.TRIANGLES,d.indexBuffer.size,n.UNSIGNED_INT,0),t.bindVAO()):i())}}export{p as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport{DataType as e}from\"../../../webgl/enums.js\";import{VertexElementDescriptor as o}from\"../../../webgl/VertexElementDescriptor.js\";const r=new Map([[\"geometry\",[new o(\"a_pos\",2,e.BYTE,0,2)]]]),t=new Map([[\"geometry\",[new o(\"a_pos\",2,e.BYTE,0,4),new o(\"a_tex\",2,e.BYTE,2,4)]]]),n=new Map([[\"geometry\",[new o(\"a_pos\",2,e.UNSIGNED_SHORT,0,4)]]]);export{r as Pos2b,n as Pos2us,t as PosTex2b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport{fromValues as e}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{Pos2b as r}from\"../DefaultVertexAttributeLayouts.js\";import t from\"./WGLBrush.js\";import{background as i}from\"../shaders/BackgroundPrograms.js\";import{BufferObject as s}from\"../../../../webgl/BufferObject.js\";import{StencilOperation as o,Face as a,CompareFunction as l,PrimitiveType as n,Usage as d}from\"../../../../webgl/enums.js\";import{createProgram as m}from\"../../../../webgl/ProgramTemplate.js\";import{VertexArrayObject as c}from\"../../../../webgl/VertexArrayObject.js\";class _ extends t{constructor(){super(...arguments),this._color=e(1,0,0,1),this._initialized=!1}dispose(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)}prepareState({context:e}){e.setDepthWriteEnabled(!1),e.setDepthTestEnabled(!1),e.setStencilTestEnabled(!0),e.setBlendingEnabled(!1),e.setColorMask(!1,!1,!1,!1),e.setStencilOp(o.KEEP,o.KEEP,o.REPLACE),e.setStencilWriteMask(255)}draw(e,r){const{context:t,requestRender:i,allowDelayedRender:s}=e;this._initialized||this._initialize(t),!s||null==i||this._solidProgram.compiled?(t.setStencilFunctionSeparate(a.FRONT_AND_BACK,l.GREATER,r.stencilRef,255),t.bindVAO(this._solidVertexArrayObject),t.useProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv(\"u_dvsMat3\",r.transforms.displayViewScreenMat3),this._solidProgram.setUniform2fv(\"u_coord_range\",[r.rangeX,r.rangeY]),this._solidProgram.setUniform1f(\"u_depth\",0),this._solidProgram.setUniform4fv(\"u_color\",this._color),t.drawArrays(n.TRIANGLE_STRIP,0,4),t.bindVAO()):i()}_initialize(e){if(this._initialized)return!0;const t=m(e,i);if(!t)return!1;const o=new Int8Array([0,0,1,0,0,1,1,1]),a=s.createVertex(e,d.STATIC_DRAW,o),l=new c(e,i.attributes,r,new Map([[\"geometry\",a]]));return this._solidProgram=t,this._solidVertexArrayObject=l,this._initialized=!0,!0}}export{_ as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport{set as t,multiply as e}from\"../../../../core/libs/gl-matrix-2/math/mat3.js\";import{DisplayObject as i}from\"../DisplayObject.js\";import s from\"../../tiling/TileKey.js\";class r extends i{constructor(t,e,i,r,n,o,h=n,l=o){super(),this.tileDebugInfoTexture=null,this.debugInfo={display:{length:0,minOrderedLength:0,minUnorderedLength:0,triangleCount:0},memory:{bytesUsed:0,bytesReserved:0}},this._destroyed=!1,this.key=new s(t),this.resolution=e,this.x=i,this.y=r,this.width=n,this.height=o,this.rangeX=h,this.rangeY=l}destroy(){this.tileDebugInfoTexture&&(this.tileDebugInfoTexture.dispose(),this.tileDebugInfoTexture=null),this._destroyed=!0}get debugSlot(){let t=this;for(;t.parent!==this._stage;){if(!t.parent)return 0;t=t.parent}return this._stage.children.indexOf(t)}setTransform(i){const s=this.resolution/(i.resolution*i.pixelRatio),r=this.transforms.tileMat3,[n,o]=i.toScreenNoRotation([0,0],[this.x,this.y]),h=this.width/this.rangeX*s,l=this.height/this.rangeY*s;t(r,h,0,0,0,l,0,n,o,1),e(this.transforms.displayViewScreenMat3,i.displayViewMat3,r)}get destroyed(){return this._destroyed}}export{r as TiledDisplayObject};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport{set as t,multiply as s}from\"../../../../core/libs/gl-matrix-2/math/mat2d.js\";import{create as r}from\"../../../../core/libs/gl-matrix-2/factories/mat2df32.js\";import{set as i,multiply as e,invert as o}from\"../../../../core/libs/gl-matrix-2/math/mat3.js\";import{create as a}from\"../../../../core/libs/gl-matrix-2/factories/mat3f32.js\";import{i as m,q as n}from\"../../../../chunks/vec32.js\";import{create as l}from\"../../../../core/libs/gl-matrix-2/factories/vec3f32.js\";import{tileSize as c}from\"./definitions.js\";import{TiledDisplayObject as h}from\"./TiledDisplayObject.js\";const f=a(),p=l();class d extends h{constructor(t,s,r,i){super(t,s,r,i,c,c)}destroy(){super.destroy()}setTransform(o){const a=this.resolution/o.resolution,m=this.transforms.tileMat3,[n,l]=o.toScreenNoRotation([0,0],[this.x,this.y]),c=this.width/this.rangeX*a,h=this.height/this.rangeY*a;i(m,c,0,0,0,h,0,n,l,1),e(this.transforms.displayViewScreenMat3,o.displayViewMat3,m);const f=t(r(),c,0,0,h,n,l);s(this.transforms.labelMat2d,o.viewMat2d,f)}_createTransforms(){return{labelMat2d:r(),tileMat3:a(),displayViewScreenMat3:a()}}containsScreenPoint(t,s,r){const i=e(f,t.viewMat3,this.transforms.tileMat3),a=o(f,i);if(null==a)return!0;m(p,...s,1);const l=n(p,p,a),c=r*(this.resolution/t.resolution);return l[0]>=-c&&l[0]<this.width+c&&l[1]>=-c&&l[1]<this.height+c}}export{d as AFeatureTile};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nclass t{constructor(a){if(this.next=null,!Array.isArray(a))return void(this.data=a);this.data=a[0];let e=this;for(let n=1;n<a.length;n++)e.next=new t([a[n]]),e=e.next}*values(){let t=this;for(;t;)yield t.data,t=t.next}forEach(t){let a=this;for(;a;)t(a.data),a=a.next}get last(){return this.next?this.next.last:this}}class a{constructor(a){this._head=null,null!=a&&(this._head=new t(a))}get head(){return this._head}maxAvailableSpace(){if(null==this._head)return 0;let t=0;return this._head.forEach((a=>{const e=a.end-a.start;t=Math.max(t,e)})),t}firstFit(t){if(null==this._head)return null;let a=null,e=this._head;for(;e;){const n=e.data.end-e.data.start;if(n===t)return a?a.next=e.next:this._head=e.next,e.data.start;if(n>t){const a=e.data.start;return e.data.start+=t,a}a=e,e=e.next}return null}free(a,e){const n=a+e;if(null==this._head){const e=new t({start:a,end:n});return void(this._head=e)}if(n<=this._head.data.start){if(n===this._head.data.start)return void(this._head.data.start-=e);const r=new t({start:a,end:n});return r.next=this._head,void(this._head=r)}let r=this._head,d=r.next;for(;d;){if(d.data.start>=n){if(r.data.end===a){if(r.data.end+=e,r.data.end===d.data.start){const t=d.data.end-d.data.start;return r.data.end+=t,void(r.next=d.next)}return}if(d.data.start===n)return void(d.data.start-=e);const s=new t({start:a,end:n});return s.next=r.next,void(r.next=s)}r=d,d=d.next}if(a===r.data.end)return void(r.data.end+=e);const s=new t({start:a,end:n});r.next=s}clear(){this._head=null}}export{a as FreeList,t as List};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport\"../../../../core/has.js\";import{FeatureBatchingStrategy as t,FeatureSymbologyDrawOrder as e}from\"./enums.js\";import{List as n}from\"./cpuMapped/FreeList.js\";import{isHittest as i}from\"./shaderGraph/techniques/featureTechniqueUtils.js\";import{PrimitiveType as a,DataType as s}from\"../../../webgl/enums.js\";function r(t,e){return t<<16|255&e}function d(t){return 255&t}class h{constructor(t,e,n,i,a){this.instance=t,this.materialKey=e,this.target=n,this.start=i,this.count=a}get textureKey(){return d(this.materialKey)}get indexEnd(){return this.start+this.count}extend(t){this.count+=t}render(t){this.instance.techniqueRef.render(t,this)}getStencilReference(){return this.target.stencilRef}getAttributePrecisionPackFactors(){const t=this.instance.instanceId;return this.target.getMesh(t).getAttributePrecisionPackFactors()}draw(t,e){i(t)?this.drawCompute(t.context,e):this.drawGeometry(t.context,e)}drawCompute(t,e){const n=this.instance.instanceId,i=this.target.getMesh(n).getComputeVAO(t,e),r=this.start*Uint32Array.BYTES_PER_ELEMENT/3;t.bindVAO(i),t.drawElements(a.POINTS,this.count/3,s.UNSIGNED_INT,r),t.bindVAO(null)}drawGeometry(t,e){const n=this.instance.instanceId,i=this.target.getMesh(n).getGeometryVAO(t,e),r=this.start*Uint32Array.BYTES_PER_ELEMENT;t.bindVAO(i),t.drawElements(a.TRIANGLES,this.count,s.UNSIGNED_INT,r),t.bindVAO(null)}}class l{constructor(){this._length=0,this._minOrderedLength=0,this._materialKeys=new Set}static fromDisplayEntities(t,e,n,i){const a=new l;for(const s of t.values())for(const t of s.records){const s=n.getInstance(t.instanceId),d=r(s.instanceId,t.textureKey);a.addRecord(s,d,t.indexStart,t.indexCount,t.vertexStart,t.vertexCount,e,i)}return a}get length(){return this._length}get minOrderedLength(){return this._minOrderedLength}get minUnorderedLength(){return this._materialKeys.size}render(t,e){const{drawPhase:n}=t;for(const i of this.infos()){const a=i.instance.techniqueRef;a.drawPhase&n&&(null==e||a.type===e)&&i.render(t)}}addRecord(i,a,s,r,d,l,o,c){let u=s,_=r;if(_||(u=d,_=l),!_)return;if(null==this._head){const t=new h(i,a,o,u,_);return this._head=new n(t),this._tail=this._head,this._length++,void this._minOrderedLength++}if(c===t.STRICT_ORDER)return this._insert(i,a,o,u,_,this._tail,null);let g=null,m=this._head;const f=i.instanceId,E=i.techniqueRef.symbologyPlane;if(c===t.STRICT_MARKERS_AND_TEXT&&(E===e.MARKER||E===e.TEXT))return this._insert(i,a,o,u,_,this._tail,null);for(;m;){const t=m.data.instance,e=t.instanceId,n=t.techniqueRef.symbologyPlane,s=g?.data.instance.instanceId;if(E<n||f===s&&f!==e)return this._insert(i,a,o,u,_,g,m);g=m,m=m.next}this._insert(i,a,o,u,_,g,null)}*infos(){if(null!=this._head)for(const t of this._head.values())yield t}_insert(t,e,i,a,s,r,d){if(null==r&&null==d){const r=new h(t,e,i,a,s);return this._head=new n(r),this._tail=this._head,this._length++,void this._minOrderedLength++}return e!==this._tail.data.materialKey&&this._minOrderedLength++,this._materialKeys.add(e),null==r&&null!=d?this._insertAtHead(t,e,i,a,s,d):null!=r&&null==d?this._insertAtEnd(t,e,i,a,s,r):null!=r&&null!=d?this._insertAtMiddle(t,e,i,a,s,r,d):void 0}_insertAtHead(t,e,i,a,s,r){const d=a+s;if(e===r.data.materialKey&&i===r.data.target&&d===r.data.start)r.data.start=a,r.data.count+=s;else{const d=new h(t,e,i,a,s);this._head=new n(d),this._head.next=r,this._length++}}_insertAtEnd(t,e,i,a,s,r){if(r.data.materialKey===e&&r.data.indexEnd===a)r.data.count+=s;else{const d=new h(t,e,i,a,s);this._tail=new n(d),r.next=this._tail,this._length++}}_insertAtMiddle(t,e,i,a,s,r,d){const l=a+s;if(r.data.materialKey===e&&r.data.target===i&&r.data.indexEnd===a)r.data.count+=s,r.data.materialKey===d.data.materialKey&&r.data.target===d.data.target&&r.data.indexEnd===d.data.start&&(r.data.count+=d.data.count,r.next=d.next,this._length--);else if(e===d.data.materialKey&&i===d.data.target&&l===d.data.start)d.data.start=a,d.data.count+=s;else{const l=new h(t,e,i,a,s),o=new n(l);r.next=o,o.next=d,this._length++}}}export{l as DisplayList,h as DisplayListInfo};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nclass t{constructor(t){this._indexOnly=t,this.vertex={count:0,operations:[]},this.index={count:0,operations:[]}}copyRecord(t){let e=0;this._indexOnly||(e=this.vertex.count-t.vertexStart,this.vertex.operations.push({srcFrom:t.vertexStart,dstFrom:this.vertex.count,count:t.vertexCount,mutate:0}),t.vertexStart=this.vertex.count,this.vertex.count+=t.vertexCount);let n=!1;if(this._indexOnly&&this.index.operations.length>=1){const e=this.index.operations[this.index.operations.length-1];e.srcFrom+e.count===t.indexStart&&(e.count+=t.indexCount,n=!0)}n||this.index.operations.push({srcFrom:t.indexStart,dstFrom:this.index.count,count:t.indexCount,mutate:e}),t.indexStart=this.index.count,this.index.count+=t.indexCount}}export{t as ReshufflePlan};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport has from\"../../../../core/has.js\";import{assertIsSome as t}from\"../../../../core/maybe.js\";import{FreeList as e}from\"./cpuMapped/FreeList.js\";const r=has(\"esri-2d-log-allocations\");class s{static create(t,e){const r=e.acquireUint32Array(t);return new s(r,e)}constructor(t,e){this._array=t,this._pool=e}get array(){return this._array}get length(){return this._array.length}getUint32View(t,e){return new Uint32Array(this._array.buffer,t+this._array.byteOffset,e)}expand(t){if(t<=this._array.byteLength)return;const e=this._pool.acquireUint32Array(t);e.set(this._array),this._pool.releaseUint32Array(this._array),this._array=e}destroy(){this._pool.releaseUint32Array(this._array)}}class a{constructor(){this._data=new ArrayBuffer(a.BYTE_LENGTH),this._freeList=new e({start:0,end:this._data.byteLength})}static get BYTE_LENGTH(){return 16e6}get buffer(){return this._data}acquireUint32Array(t){const e=this._freeList.firstFit(t);return null==e?null:new Uint32Array(this._data,e,t/Uint32Array.BYTES_PER_ELEMENT)}releaseUint32Array(t){this._freeList.free(t.byteOffset,t.byteLength)}}class i{constructor(){this._pages=[],this._pagesByBuffer=new Map,this._bytesAllocated=0}destroy(){this._pages=[],this._pagesByBuffer=null}get _bytesTotal(){return this._pages.length*a.BYTE_LENGTH}acquireUint32Array(e){if(this._bytesAllocated+=e,r&&console.log(`Allocating ${e}, (${this._bytesAllocated} / ${this._bytesTotal})`),e>=a.BYTE_LENGTH)return new Uint32Array(e/Uint32Array.BYTES_PER_ELEMENT);for(const t of this._pages){const r=t.acquireUint32Array(e);if(null!=r)return r}const s=this._addPage().acquireUint32Array(e);return t(s,\"Expected to allocate page\"),s}releaseUint32Array(t){this._bytesAllocated-=t.byteLength,r&&console.log(`Freeing ${t.byteLength}, (${this._bytesAllocated} / ${this._bytesTotal})`);const e=this._pagesByBuffer.get(t.buffer);e&&e.releaseUint32Array(t)}_addPage(){const t=new a;return this._pages.push(t),this._pagesByBuffer.set(t.buffer,t),t}}export{i as ArrayBufferPool,s as PooledUint32Array};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport\"../../../../../core/has.js\";import{assertIsSome as t}from\"../../../../../core/maybe.js\";import{PooledUint32Array as i}from\"../PooledUint32Array.js\";import{FreeList as e}from\"./FreeList.js\";import{BufferObject as r}from\"../../../../webgl/BufferObject.js\";import{Usage as s}from\"../../../../webgl/enums.js\";const n=1.25,h=32767,a=h<<16|h;class d{constructor(t,e,r,s){this._pool=s;const n=i.create(e*r*Uint32Array.BYTES_PER_ELEMENT,this._pool);this.size=e,this.strideInt=r,this.bufferType=t,this.dirty={start:1/0,end:0},this.memoryStats={bytesUsed:0,bytesReserved:e*r*Uint32Array.BYTES_PER_ELEMENT},this._gpu=null,this._cpu=n,this.clear()}get elementSize(){return this._cpu.length/this.strideInt}get intSize(){return this.fillPointer*this.strideInt}get byteSize(){return this.intSize*Uint32Array.BYTES_PER_ELEMENT}get invalidated(){return this.bufferSize>0&&!this._gpu}get invalidatedComputeBuffer(){return this.bufferSize>0&&!this._gpuComputeTriangles}invalidate(){this._invalidateTriangleBuffer(),this._gpu?.dispose(),this._gpu=null}_invalidateTriangleBuffer(){this._gpuComputeTriangles?.dispose(),this._gpuComputeTriangles=null}destroy(){this._gpu?.dispose(),this._gpuComputeTriangles?.dispose(),this._cpu?.destroy()}clear(){this.dirty.start=1/0,this.dirty.end=0,this.freeList=new e({start:0,end:this._cpu.length/this.strideInt}),this.fillPointer=0}ensure(t){if(this.maxAvailableSpace()>=t)return;if(t*this.strideInt>this._cpu.length-this.fillPointer){this.invalidate();const i=this._cpu.length/this.strideInt,e=Math.round((i+t)*n),r=e*this.strideInt;this._cpu.expand(r*Uint32Array.BYTES_PER_ELEMENT),this.freeList.free(i,e-i),this.memoryStats.bytesReserved+=(e-i)*this.strideInt*Uint32Array.BYTES_PER_ELEMENT}}set(t,i){this._cpu.array[t]!==i&&(this._cpu.array[t]=i,this.dirty.start=Math.min(t,this.dirty.start),this.dirty.end=Math.max(t+1,this.dirty.end))}getGPUBuffer(t,i=!1){if(!this.bufferSize)return null;if(i){if(\"index\"!==this.bufferType)throw new Error(\"Tired to get triangle buffer, but target is not an index buffer\");return null==this._gpuComputeTriangles&&(this._gpuComputeTriangles=this._createComputeBuffer(t)),this._gpuComputeTriangles}return null==this._gpu&&(this._gpu=this._createBuffer(t)),this._gpu}getView(t,i){return this._cpu.getUint32View(t,i/Uint32Array.BYTES_PER_ELEMENT)}get bufferSize(){return this._cpu.length/this.strideInt}maxAvailableSpace(){return this.freeList.maxAvailableSpace()}insert(i,e,r,s){const n=r*this.strideInt;if(!n)return 0;const h=e*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,a=new Uint32Array(i,h,n),d=this.freeList.firstFit(r);t(d,\"First fit region must be defined\");const u=d*this.strideInt,o=n;if(this._cpu.array.set(a,u),0!==s)for(let t=0;t<a.length;t++)this._cpu.array[t+u]+=s;return this.dirty.start=Math.min(this.dirty.start,u),this.dirty.end=Math.max(this.dirty.end,u+o),this.fillPointer=Math.max(this.fillPointer,u+o),this.memoryStats.bytesUsed+=r*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,d}copyFrom(i,e,r,s,n){const h=r*this.strideInt;if(!h)return 0;const a=e*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,d=i._cpu.getUint32View(a,h),u=this.freeList.firstFit(r);t(u,\"First fit region must be defined\");const o=u*this.strideInt,f=h;if(this._cpu.array.set(d,o),0!==s)for(let t=0;t<h;t++)this._cpu.array[o+t*this.strideInt+n]+=s;return this.dirty.start=Math.min(this.dirty.start,o),this.dirty.end=Math.max(this.dirty.end,o+f),this.fillPointer=Math.max(this.fillPointer,o+f),this.memoryStats.bytesUsed+=r*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,u}free(t,i,e){const r=t*this.strideInt,s=(t+i)*this.strideInt;if(!0===e)for(let n=t;n!==t+i;n++)this._cpu.array[n*this.strideInt]=a;this.dirty.start=Math.min(this.dirty.start,r),this.dirty.end=Math.max(this.dirty.end,s),this.freeList.free(t,i),this.memoryStats.bytesUsed-=i*this.strideInt*Uint32Array.BYTES_PER_ELEMENT}upload(){if(this.dirty.end){if(this._invalidateTriangleBuffer(),null==this._gpu)return this.dirty.start=1/0,void(this.dirty.end=0);this._gpu.setSubData(this._cpu.array,this.dirty.start,this.dirty.start,this.dirty.end),this.dirty.start=1/0,this.dirty.end=0}}reshuffle(t,e){if(0===e.length)return;const r=this.byteSize,s=t*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,n=r>s,h=this._cpu,a=i.create(s,this._pool);n||a.array.set(this._cpu.getUint32View(0,this.intSize));for(const i of e)if(n||i.srcFrom!==i.dstFrom||0!==i.mutate){this.dirty.start=Math.min(this.dirty.start,i.dstFrom*this.strideInt),this.dirty.end=Math.max(this.dirty.end,(i.dstFrom+i.count)*this.strideInt);for(let t=0;t<i.count;t++){const e=(i.dstFrom+t)*this.strideInt,r=(i.srcFrom+t)*this.strideInt;for(let t=0;t<this.strideInt;t++)a.array[e+t]=h.array[r+t]+i.mutate}}this._cpu.destroy(),this._cpu=a,n&&this.invalidate(),this.freeList.clear(),this.memoryStats.bytesUsed=this.memoryStats.bytesReserved=s}_createBuffer(t){const i=s.DYNAMIC_DRAW;return\"index\"===this.bufferType?r.createIndex(t,i,this._cpu.array):r.createVertex(t,i,this._cpu.array)}_createComputeBuffer(t){const i=s.DYNAMIC_DRAW,e=new Uint32Array(this.fillPointer/3);for(let r=0;r<this.fillPointer;r+=3)e[r/3]=this._cpu.array[r];return r.createIndex(t,i,e)}}export{d as MappedBuffer};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport{destroyMaybe as e}from\"../../../../../core/maybe.js\";import{i1616to32 as t}from\"../number.js\";import{MappedBuffer as r}from\"./Buffer.js\";import{unpackDataView as i}from\"../shaderGraph/techniques/mesh/dataViewUtils.js\";import{PrimitiveType as s}from\"../../../../webgl/enums.js\";import{VertexArrayObject as o}from\"../../../../webgl/VertexArrayObject.js\";const f=1e3;function n(e,t){const r=e.attributes.filter((e=>t.locations.has(e.name))).map((t=>({name:t.name,type:t.type,count:t.count,divisor:0,normalized:t.normalized??!1,offset:t.offset,stride:e.stride})));return new Map([[\"geometry\",r]])}function u(e,t){const r=[],i=e.attributes.filter((e=>t.locations.has(e.name)));for(const s of i){r.push({name:s.name,type:s.type,count:s.count,divisor:0,normalized:s.normalized??!1,offset:s.offset,stride:e.stride});const i=t.computeAttributeMap[s.name];null!=i&&2===i.length&&(r.push({name:i[0],count:s.count,divisor:0,type:s.type,normalized:s.normalized??!1,offset:s.offset+e.stride,stride:e.stride}),r.push({name:i[1],count:s.count,divisor:0,type:s.type,normalized:s.normalized??!1,offset:s.offset+2*e.stride,stride:e.stride}))}return new Map([[\"geometry\",r]])}class a{constructor(e,t){if(this._bufferPool=e,this._layout=t,this._invalidatedGeometry=!1,this._invalidatedCompute=!1,this._position=this._layout.attributes.find((e=>\"pos\"===e.name||\"position\"===e.name)),!this._position)throw new Error(\"InternalError: Unable to find position attribute\")}destroy(){this._indexBuffer=e(this._indexBuffer),this._vertexBuffer=e(this._vertexBuffer),this._computeVAO?.disposeVAOOnly(),this._geometryVAO?.disposeVAOOnly()}get layout(){return this._layout}getDrawArgs(e,t,r,i){return i?{primitive:s.POINTS,count:t/3,offset:r/3}:{primitive:e,count:t,offset:r}}getAttributePrecisionPackFactors(){const e={};for(const t of this.layout.attributes)t.packPrecisionFactor&&(e[t.name]=t.packPrecisionFactor);return e}getDebugVertexInfo(e=!1,t){if(!this._vertexBuffer)return null;const r=this._layout,s=r.stride,o=this._vertexBuffer.getView(0,this._vertexBuffer.byteSize),f=[];if(e)if(null==t)console.log(\"must provide location info to see compute attributes\");else for(const i of r.attributes){const e=t.computeAttributeMap[i.name];null!=e&&2===e.length&&(f.push({...i,name:e[0],offset:i.offset+s}),f.push({...i,name:e[1],offset:i.offset+2*s}))}const n=new DataView(o.slice().buffer);let u=o.byteLength/s;e&&(u=this._indexBuffer.fillPointer/3);const a=this._indexBuffer.getView(0,this._indexBuffer.byteSize);let h=0;const d=[];for(let m=0;m<u;m++){if(e){h=a[3*m]*s}const t={};for(const e of[...r.attributes,...f]){let r=`${e.offset} ${e.name}`,s=i(n,e,h);if(e.packPrecisionFactor)if(r+=` (precision: ${e.packPrecisionFactor})`,\"number\"==typeof s)s/=e.packPrecisionFactor;else for(let t=0;t<s.length;t++)s[t]/=e.packPrecisionFactor;t[r]=s}h+=s,d.push(t)}return{vertices:d,layout:r}}_ensure(e,t){if(this._vertexBuffer&&this._indexBuffer)this._indexBuffer.ensure(Math.max(e,1e3)),this._vertexBuffer.ensure(Math.max(t,1e3));else{const i=this._layout.stride/Uint32Array.BYTES_PER_ELEMENT;this._indexBuffer=new r(\"index\",Math.max(e,f),1,this._bufferPool),this._vertexBuffer=new r(\"vertex\",Math.max(t,f),i,this._bufferPool)}}append(e){const t=e.layout.stride,r=e.indices.byteLength/Uint32Array.BYTES_PER_ELEMENT,i=e.vertices.byteLength/t;this._ensure(r,i);const{vertices:s,indices:o}=e,f=this._vertexBuffer.insert(s,0,s.byteLength/t,0);return{vertexFrom:f,indexFrom:this._indexBuffer.insert(o,0,o.byteLength/4,f)}}copyRecordFrom(e,r,i,s){const{indexStart:o,indexCount:f,vertexStart:n,vertexCount:u}=r;this._ensure(f,u);const a=e._position,h=i*(a.packPrecisionFactor??1),d=s*(a.packPrecisionFactor??1),m=a.offset,c=t(h,d),l=this._vertexBuffer.copyFrom(e._vertexBuffer,n,u,c,m),_=this._indexBuffer.copyFrom(e._indexBuffer,o,f,l-n,0),p=r.clone();return p.vertexStart=l,p.indexStart=_,p.overlaps=0,p}remove(e,t,r,i){this._indexBuffer.free(e,t),this._vertexBuffer.free(r,i)}upload(){this._invalidatedGeometry=!0,this._invalidatedCompute=!0}getGeometryVAO(e,t){if(!this._vertexBuffer||!this._indexBuffer||!this._vertexBuffer.bufferSize)return null;if(this._invalidatedGeometry){(this._vertexBuffer.invalidated||this._indexBuffer.invalidated)&&(this._vertexBuffer.invalidate(),this._indexBuffer.invalidate(),this._geometryVAO?.disposeVAOOnly(),this._geometryVAO=null),this._vertexBuffer.upload(),this._indexBuffer.upload();const r=this._indexBuffer.getGPUBuffer(e,!1),i=this._vertexBuffer.getGPUBuffer(e);this._geometryVAO||(this._geometryVAO=new o(e,t.locations,n(this.layout,t),new Map([[\"geometry\",i]]),r)),this._invalidatedGeometry=!1}return this._geometryVAO}getComputeVAO(e,t){if(!this._vertexBuffer||!this._indexBuffer||!this._vertexBuffer.bufferSize)return null;if(this._invalidatedCompute){(this._vertexBuffer.invalidated||this._indexBuffer.invalidatedComputeBuffer)&&(this._vertexBuffer.invalidate(),this._indexBuffer.invalidate(),this._computeVAO?.disposeVAOOnly(),this._computeVAO=null),this._vertexBuffer.upload(),this._indexBuffer.upload();const r=this._indexBuffer.getGPUBuffer(e,!0),i=this._vertexBuffer.getGPUBuffer(e);this._computeVAO||(this._computeVAO=new o(e,t.locations,u(this.layout,t),new Map([[\"geometry\",i]]),r),this._invalidatedCompute=!1)}return this._computeVAO}get memoryStats(){return{bytesUsed:this._vertexBuffer.memoryStats.bytesUsed+this._indexBuffer.memoryStats.bytesUsed,bytesReserved:this._vertexBuffer.memoryStats.bytesReserved+this._indexBuffer.memoryStats.bytesReserved,vertex:this._vertexBuffer.memoryStats,index:this._indexBuffer.memoryStats}}reshuffle(e){this._vertexBuffer&&this._vertexBuffer.reshuffle(e.vertex.count,e.vertex.operations),this._indexBuffer&&this._indexBuffer.reshuffle(e.index.count,e.index.operations)}}export{a as MappedMesh};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nclass t{constructor(t){this._pos=0,this._buffer=t,this._i32View=new Int32Array(this._buffer),this._f32View=new Float32Array(this._buffer)}readInt32(){return this._i32View[this._pos++]}readF32(){return this._f32View[this._pos++]}}export{t as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport t from\"../DisplayEntity.js\";import{unpackDataView as e}from\"../shaderGraph/techniques/mesh/dataViewUtils.js\";import i from\"../util/Reader.js\";import{deserializeList as r}from\"../util/serializationUtils.js\";function o(e){if(!e)return null;return{entities:r(new i(e.entities),t),vertexData:e.data.map(a)}}function a(t){const i=t.layout.stride,r=new DataView(t.vertices),o=[],a=t.vertices.byteLength/i;let s=0;for(let n=0;n<a;n++){const a={};for(const i of t.layout.attributes){let t=`${i.offset} ${i.name}`,o=e(r,i,s);if(i.packPrecisionFactor)if(t+=` (precision: ${i.packPrecisionFactor})`,\"number\"==typeof o)o/=i.packPrecisionFactor;else for(let e=0;e<o.length;e++)o[e]/=i.packPrecisionFactor;a[t]=o}s+=i,o.push(a)}return{vertices:o,layout:t.layout}}export{o as debugMeshDataInfo};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport has from\"../../../../core/has.js\";import e from\"../../../../core/Logger.js\";import{create as t}from\"../../../../core/libs/gl-matrix-2/factories/mat2df32.js\";import{AFeatureTile as s}from\"./AFeatureTile.js\";import{RESHUFFLING_EXEMPT_MEMORY_BYTES as i,RESHUFFLING_TARGET_MEMORY_EFFICIENCY as r,RESHUFFLING_EXEMPT_DRAW_CALLS as o,RESHUFFLING_TARGET_DRAW_EFFICIENCY as d,tileSize as n}from\"./definitions.js\";import h from\"./DisplayEntity.js\";import{FeatureBatchingStrategy as a}from\"./enums.js\";import{DisplayList as l}from\"./FeatureDisplayList.js\";import{ReshufflePlan as f}from\"./ReshufflePlan.js\";import{LabelMetric as u}from\"./collisions/LabelMetric.js\";import{MappedMesh as p}from\"./cpuMapped/MappedMesh.js\";import{debugMeshDataInfo as _}from\"./mesh/meshDebugUtils.js\";import m from\"./util/Reader.js\";import{deserializeList as c}from\"./util/serializationUtils.js\";const y=()=>e.getLogger(\"esri.views.2d.engine.webgl.FeatureTile\");let g=0;class b extends s{constructor(e,s,i,r,o=!1){super(e,s,i,r),this._meshes=new Map,this._entities=[],this._invalidated=!1,this._nextUploadAllowed=!1,this.tileAge=g++,this._metrics=[],this._entityIds=new Set,this._entityIdsFromBuffer=new Set,this._attributeEpoch=0,this._encounteredEnd=!1,this._objectIdMap=null,this.visible=!0,this.transforms.labelMat2d=t(),this.enableDeferredUploads=o}destroy(){super.destroy(),this.clear()}clear(){for(const e of this._meshes.values())e.destroy();this._meshes.clear(),this._entities=[],this._metrics=[],this._displayList=null,this._invalidated=!0,this._entityIds.clear(),this._nextUploadAllowed=!0}beforeRender(e){super.beforeRender(e),this._needsReshuffle&&e.reshuffleManager.schedule(this)}tryReady(e){const t=this._invalidated&&!this._uploadAllowed;return!(this.isReady||t||!this._encounteredEnd||!(e>=this._attributeEpoch))&&(has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.ready [epoch=${e}]`),this.ready(),this.requestRender(),!0)}get labelMetrics(){return this._metrics}get hasData(){return!!this._meshes.size}get hasAnimations(){return!!this._objectIdMap}get needsUpload(){return this._invalidated}get _uploadAllowed(){return!this.enableDeferredUploads||this._nextUploadAllowed}upload(){this._nextUploadAllowed=!0}getDisplayList(e,t){if(this._uploadAllowed&&this._invalidated){this._entities.sort(((e,t)=>{const s=t.sortKey,i=e.sortKey;return i===s?e.id-t.id:i-s})),t===a.BATCHING&&this.reshuffle(!0),this._displayList=l.fromDisplayEntities(this._entities,this,e,t);for(const e of this._meshes.values())e.upload();this.debugInfo.display.length=this._displayList.length,this.debugInfo.display.minOrderedLength=this._displayList.minOrderedLength,this.debugInfo.display.minUnorderedLength=this._displayList.minUnorderedLength,this.requestRender(),this._invalidated=!1,this._nextUploadAllowed=!1}return this._displayList}getMesh(e){if(!this._meshes.has(e))throw new Error(`InternalError: Unable to find VAO for instance: ${e}`);return this._meshes.get(e)}getSortKeys(e){const t=new Map;for(const{id:s,sortKey:i}of this._entities)if(e.has(s)&&t.set(s,i),t.size===e.size)break;return t}onMessage(e){if(e.objectIdMap)for(const t in e.objectIdMap)this._objectIdMap||(this._objectIdMap={}),this._objectIdMap[t]=e.objectIdMap[t];switch(e.type){case\"append\":this._onAppendMessage(e);break;case\"update\":this._onUpdateMessage(e)}if(this._aggregateMemoryStats(),this.requestRender(),e.end){if(has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.end [epoch=${e.attributeEpoch}]`),!e.attributeEpoch)throw new Error(\"InternalError: Attribute epoch not defined.\");this._attributeEpoch=e.attributeEpoch,this._encounteredEnd=!0}}_onAppendMessage(e){if(has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.append`,{append:_(e?.append)}),e.clear&&this.clear(),!e.append)return;const t=c(new m(e.append.entities),h);this._insert(t,e.append.data,!1)}_onUpdateMessage(e){has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.update`,{isPixelBuffer:e.isPixelBuffer,modify:_(e.modify),remove:e.remove});const t=c(new m(e.modify.entities),h),s=t.map((e=>e.id)),i=e.isPixelBuffer??!1,r=[...e.remove,...s];i?this._removeByIdsFromBuffer(r):this._removeByIds(r),this._insert(t,e.modify.data,i)}reshuffle(e=!1){if(this.destroyed)return;const t=new Map;for(const s of this._entities)for(const i of s.records){const s=this._meshes.get(i.instanceId);let r=t.get(s);r||(r=new f(e),t.set(s,r)),r.copyRecord(i)}for(const[s,i]of t)s.reshuffle(i);this._invalidated=!0,this._aggregateMemoryStats(),has(\"esri-2d-update-debug\")&&y().info(`Tile ${this.key.id} was reshuffled.`)}copyPixelBufferedEntitesFrom(e,t,s,i){const r=s*n,o=i*n;for(const d of e._entities){let s=null;for(const i of d.records)if(i.overlaps&t){const t=e.getMesh(i.instanceId),n=this._ensureMesh(i.instanceId,t.layout).copyRecordFrom(t,i,r,o);s||(s=new h(d.id,d.sortKey),this._entityIdsFromBuffer.add(d.id),this._entities.push(s)),s.records.push(n)}}this._invalidated=!0}_ensureMesh(e,t){return this._meshes.has(e)||this._meshes.set(e,new p(this._stage.bufferPool,t)),this._meshes.get(e)}_insert(e,t,s){if(!e.length)return;this._removeDuplicatedBufferedEntites(e);const i=this._insertVertexData(t);for(const r of e){for(const e of r.records)e.updateBaseOffsets(i.get(e.instanceId));s?this._tryInsertBufferedEntity(r):this._insertEntity(r)}this._invalidated=!0}_insertVertexData(e){const t=new Map;for(const s of e){const{instanceId:e,layout:i}=s,r=this._ensureMesh(e,i).append(s);if(s.metrics){const e=c(new m(s.metrics),u)??[];this._metrics.push(...e)}t.set(e,r)}return t}_insertEntity(e){has(\"esri-2d-update-debug\")&&this._entityIds.has(e.id)&&console.error(`Tile ${this.key.id} insertEnitty: Already have entityId ${e.id}`),this._entityIds.add(e.id),this._entities.push(e)}_tryInsertBufferedEntity(e){this._entityIds.has(e.id)?this._removeRecordsFromMesh(e.records):(this._entityIdsFromBuffer.add(e.id),this._entities.push(e))}_removeDuplicatedBufferedEntites(e){if(!this._entityIdsFromBuffer.size)return;const t=[];for(const s of e)this._entityIdsFromBuffer.has(s.id)&&t.push(s.id);this._removeByIds(t)}_removeByIdsFromBuffer(e){this._removeByIds(e.filter((e=>this._entityIdsFromBuffer.has(e))))}_removeByIds(e){if(0===e.length)return;const t=new Set(e),s=[];for(const i of this._entities)t.has(i.id)?this._remove(i):s.push(i);this._entities=s,this._invalidated=!0}_remove(e){this._removeRecordsFromMesh(e.records),this._entityIds.delete(e.id),this._entityIdsFromBuffer.delete(e.id);for(let t=this._metrics.length-1;t>=0;t--)this._metrics[t].entityTexel===e.id&&this._metrics.splice(t,1)}_removeRecordsFromMesh(e){for(const t of e){const{instanceId:e,indexStart:s,indexCount:i,vertexStart:r,vertexCount:o}=t;this._meshes.get(e)?.remove(s,i,r,o)}}_aggregateMemoryStats(){this.debugInfo.memory.bytesUsed=0,this.debugInfo.memory.bytesReserved=0;for(const e of this._meshes.values())this.debugInfo.memory.bytesUsed+=e.memoryStats.bytesUsed,this.debugInfo.memory.bytesReserved+=e.memoryStats.bytesReserved}get _needsReshuffle(){if(this.destroyed)return!1;const{bytesUsed:e,bytesReserved:t}=this.debugInfo.memory,s=e/t,{minOrderedLength:n,length:h}=this.debugInfo.display;return t>i&&s<r||h>o&&n/h<d}get entityIds(){return this._objectIdMap?this._entities.map((({id:e})=>({objectId:this._objectIdMap[e],displayId:e}))):[]}}export{b as FeatureTile};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport{resolveIncludes as e}from\"./sources/resolver.js\";const r={shaders:{vertexShader:e(\"tileInfo/tileInfo.vert\"),fragmentShader:e(\"tileInfo/tileInfo.frag\")},attributes:new Map([[\"a_pos\",0]])};export{r as tileInfo};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport{fromValues as e}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{Pos2b as t}from\"../DefaultVertexAttributeLayouts.js\";import{FeatureTile as r}from\"../FeatureTile.js\";import o from\"./WGLBrush.js\";import{background as i}from\"../shaders/BackgroundPrograms.js\";import{tileInfo as s}from\"../shaders/TileInfoPrograms.js\";import{BufferObject as n}from\"../../../../webgl/BufferObject.js\";import{BlendFactor as a,PrimitiveType as l,Usage as f,TextureWrapMode as m,TextureSamplingMode as u}from\"../../../../webgl/enums.js\";import{createProgram as c}from\"../../../../webgl/ProgramTemplate.js\";import{Texture as d}from\"../../../../webgl/Texture.js\";import{TextureDescriptor as h}from\"../../../../webgl/TextureDescriptor.js\";import{VertexArrayObject as g}from\"../../../../webgl/VertexArrayObject.js\";const _=512,x=512,b=16,p=8,T=(x-2*p)/5;class y extends o{constructor(){super(...arguments),this._color=e(1,0,0,1)}dispose(){this._outlineProgram?.dispose(),this._outlineProgram=null,this._tileInfoProgram?.dispose(),this._tileInfoProgram=null,this._outlineVertexArrayObject?.dispose(),this._outlineVertexArrayObject=null,this._tileInfoVertexArrayObject?.dispose(),this._tileInfoVertexArrayObject=null,this._ctx=null}prepareState({context:e}){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(a.ONE,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!1)}draw(e,t){const{context:o,requestRender:i,allowDelayedRender:s}=e;if(!t.isReady&&t instanceof r&&t.hasData)return;if(this._loadWGLResources(o),s&&null!=i&&(!this._outlineProgram.compiled||!this._tileInfoProgram.compiled))return void i();o.bindVAO(this._outlineVertexArrayObject),o.useProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.displayViewScreenMat3),this._outlineProgram.setUniform2f(\"u_coord_range\",t.rangeX,t.rangeY),this._outlineProgram.setUniform1f(\"u_depth\",0),this._outlineProgram.setUniform4fv(\"u_color\",this._color),o.drawArrays(l.LINE_STRIP,0,4);const n=this._getTexture(o,t);n?(o.bindVAO(this._tileInfoVertexArrayObject),o.useProgram(this._tileInfoProgram),o.bindTexture(n,0),this._tileInfoProgram.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.displayViewScreenMat3),this._tileInfoProgram.setUniform1f(\"u_depth\",0),this._tileInfoProgram.setUniform2f(\"u_coord_ratio\",t.rangeX/t.width,t.rangeY/t.height),this._tileInfoProgram.setUniform2f(\"u_delta\",0,0),this._tileInfoProgram.setUniform2f(\"u_dimensions\",n.descriptor.width,n.descriptor.height),o.drawArrays(l.TRIANGLE_STRIP,0,4),o.bindVAO()):o.bindVAO()}_loadWGLResources(e){if(this._outlineProgram&&this._tileInfoProgram)return;const r=c(e,i),o=c(e,s),a=new Int8Array([0,0,1,0,1,1,0,1]),l=n.createVertex(e,f.STATIC_DRAW,a),m=new g(e,i.attributes,t,new Map([[\"geometry\",l]])),u=new Int8Array([0,0,1,0,0,1,1,1]),d=n.createVertex(e,f.STATIC_DRAW,u),h=new g(e,s.attributes,t,new Map([[\"geometry\",d]]));this._outlineProgram=r,this._tileInfoProgram=o,this._outlineVertexArrayObject=m,this._tileInfoVertexArrayObject=h}_getTexture(e,t){if(!this._ctx){const e=document.createElement(\"canvas\");e.width=_,e.height=x,this._ctx=e.getContext(\"2d\")}if(!t.tileDebugInfoTexture){const r=new h;r.wrapMode=m.CLAMP_TO_EDGE,r.samplingMode=u.LINEAR,r.isImmutable=!0,r.width=_,r.height=x,t.tileDebugInfoTexture=new d(e,r)}const r=this._ctx;r.clearRect(0,0,r.canvas.width,r.canvas.height),r.textAlign=\"left\",r.textBaseline=\"top\",r.font=b-2+\"px sans-serif\",r.lineWidth=2,r.fillStyle=\"white\",r.strokeStyle=\"black\";const{debugSlot:o}=t;let i=p+T*o;const s=`${o}) ${t.key.id} (${t.constructor.name})`;r.strokeText(s,p,i),r.fillText(s,p,i),i+=b;const{debugInfo:n}=t;if(n){const{length:e,minOrderedLength:t,minUnorderedLength:o,triangleCount:s}=n.display;if(e>0){const t=`Length: ${e}`;r.strokeText(t,p,i),r.fillText(t,p,i),i+=b}if(t){const e=`Min ordered length: ${t}`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}if(o){const e=`Min unordered length: ${o}`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}if(s>0){s>1e5&&(r.fillStyle=\"red\",r.strokeStyle=\"white\");const e=`Triangle count: ${s}`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}const{bytesUsed:a,bytesReserved:l}=n.memory;if(r.fillStyle=\"white\",r.strokeStyle=\"black\",a>0||l>0){const e=`Memory usage: ${a} of ${l} bytes`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}}return t.tileDebugInfoTexture.setData(r.canvas),t.tileDebugInfoTexture}}export{y as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport{nextPowerOfTwo as t}from\"../../../../../core/mathUtils.js\";import{create as e}from\"../../../../../core/libs/gl-matrix-2/factories/mat3f32.js\";import{fromValues as r}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{vtlTextureBindingUnitSprites as o,vtlHighResCutoff as i}from\"../definitions.js\";import s from\"./WGLBrush.js\";import{BufferObject as a}from\"../../../../webgl/BufferObject.js\";import{TextureSamplingMode as n,CompareFunction as c,PrimitiveType as l,Usage as f}from\"../../../../webgl/enums.js\";import{VertexArrayObject as m}from\"../../../../webgl/VertexArrayObject.js\";class u extends s{constructor(){super(...arguments),this._color=r(1,0,0,1),this._patternMatrix=e(),this._programOptions={id:!1,pattern:!1}}dispose(){this._vao&&(this._vao.dispose(),this._vao=null)}drawMany(e,r){const{context:s,painter:a,requestRender:f,allowDelayedRender:m}=e;this._loadWGLResources(e);const u=e.displayLevel,p=e.styleLayer,_=p.backgroundMaterial,d=a.vectorTilesMaterialManager,g=p.getPaintValue(\"background-color\",u),h=p.getPaintValue(\"background-opacity\",u),x=p.getPaintValue(\"background-pattern\",u),M=void 0!==x,b=1|window.devicePixelRatio,v=e.spriteMosaic;let y,w;const j=b>i?2:1,A=this._programOptions;A.pattern=M;const L=d.getMaterialProgram(s,_,A);if(!m||null==f||L.compiled){if(s.bindVAO(this._vao),s.useProgram(L),M){const t=v.getMosaicItemPosition(x,!0);if(null!=t){const{tl:e,br:r,page:i}=t;y=r[0]-e[0],w=r[1]-e[1];const a=v.getPageSize(i);null!=a&&(v.bind(s,n.LINEAR,i,o),L.setUniform4f(\"u_tlbr\",e[0],e[1],r[0],r[1]),L.setUniform2fv(\"u_mosaicSize\",a),L.setUniform1i(\"u_texture\",o))}L.setUniform1f(\"u_opacity\",h)}else{const t=g[3]*h;this._color[0]=t*g[0],this._color[1]=t*g[1],this._color[2]=t*g[2],this._color[3]=t,L.setUniform4fv(\"u_color\",this._color)}L.setUniform1f(\"u_depth\",p.z||0);for(const e of r){if(L.setUniform1f(\"u_coord_range\",e.rangeX),L.setUniformMatrix3fv(\"u_dvsMat3\",e.transforms.displayViewScreenMat3),M){const r=Math.max(2**(Math.round(u)-e.key.level),1),o=j*e.width*r,i=o/t(y),s=o/t(w);this._patternMatrix[0]=i,this._patternMatrix[4]=s,L.setUniformMatrix3fv(\"u_pattern_matrix\",this._patternMatrix)}s.setStencilFunction(c.EQUAL,0,255),s.drawArrays(l.TRIANGLE_STRIP,0,4)}}else f()}_loadWGLResources(t){if(this._vao)return;const{context:e,styleLayer:r}=t,o=r.backgroundMaterial,i=new Int8Array([0,0,1,0,0,1,1,1]),s=a.createVertex(e,f.STATIC_DRAW,i),n=new m(e,o.getAttributeLocations(),o.getLayoutInfo(),new Map([[\"geometry\",s]]));this._vao=n}}export{u as WGLBrushVTLBackground};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport{TranslateAnchor as e}from\"../../vectorTiles/style/StyleDefinition.js\";import t from\"./WGLBrush.js\";import{CompareFunction as r,PrimitiveType as i,DataType as a}from\"../../../../webgl/enums.js\";class n extends t{constructor(){super(...arguments),this._programOptions={id:!1}}dispose(){}drawMany(t,n){const{context:l,displayLevel:s,requiredLevel:o,state:c,painter:u,spriteMosaic:d,styleLayerUID:f,requestRender:m,allowDelayedRender:p}=t;if(!n.some((e=>e.layerData.get(f)?.circleIndexCount??!1)))return;const y=t.styleLayer,g=y.circleMaterial,M=u.vectorTilesMaterialManager,v=1.2,E=y.getPaintValue(\"circle-translate\",s),x=y.getPaintValue(\"circle-translate-anchor\",s),I=this._programOptions,U=M.getMaterialProgram(l,g,I);if(p&&null!=m&&!U.compiled)return void m();l.useProgram(U),U.setUniformMatrix3fv(\"u_displayMat3\",x===e.VIEWPORT?c.displayMat3:c.displayViewMat3),U.setUniform2fv(\"u_circleTranslation\",E),U.setUniform1f(\"u_depth\",y.z),U.setUniform1f(\"u_antialiasingWidth\",v);let _=-1;for(const e of n){if(!e.layerData.has(f))continue;e.key.level!==_&&(_=e.key.level,g.setDataUniforms(U,s,y,_,d));const t=e.layerData.get(f);if(!t.circleIndexCount)continue;t.prepareForRendering(l);const n=t.vao;null!=n&&(l.bindVAO(n),U.setUniformMatrix3fv(\"u_dvsMat3\",e.transforms.displayViewScreenMat3),o!==e.key.level?l.setStencilFunction(r.EQUAL,e.stencilRef,255):l.setStencilFunction(r.GREATER,255,255),l.drawElements(i.TRIANGLES,t.circleIndexCount,a.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*t.circleIndexStart),e.triangleCount+=t.circleIndexCount/3)}}}export{n as WGLBrushVTLCircle};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport{TranslateAnchor as t}from\"../../vectorTiles/style/StyleDefinition.js\";import{vtlTextureBindingUnitSprites as e,vtlHighResCutoff as i}from\"../definitions.js\";import n from\"./WGLBrush.js\";import{TextureSamplingMode as a,CompareFunction as l,PrimitiveType as r,DataType as o}from\"../../../../webgl/enums.js\";const s=1/65536;class f extends n{constructor(){super(...arguments),this._fillProgramOptions={id:!1,pattern:!1},this._outlineProgramOptions={id:!1}}dispose(){}drawMany(t,e){const{displayLevel:i,renderPass:n,spriteMosaic:a,styleLayerUID:l}=t;let r=!1;for(const _ of e)if(_.layerData.has(l)){const t=_.layerData.get(l);if(t.fillIndexCount>0||t.outlineIndexCount>0){r=!0;break}}if(!r)return;const o=t.styleLayer,s=o.getPaintProperty(\"fill-pattern\"),f=void 0!==s,u=f&&s.isDataDriven;let c;if(f&&!u){const t=s.getValue(i);c=a.getMosaicItemPosition(t,!0)}const d=!f&&o.getPaintValue(\"fill-antialias\",i);let p=!0,m=1;if(!f){const t=o.getPaintProperty(\"fill-color\"),e=o.getPaintProperty(\"fill-opacity\");if(!t?.isDataDriven&&!e?.isDataDriven){const t=o.getPaintValue(\"fill-color\",i);m=o.getPaintValue(\"fill-opacity\",i)*t[3],m>=1&&(p=!1)}}if(p&&\"opaque\"===n)return;const y=o.getPaintValue(\"fill-translate\",i),g=o.getPaintValue(\"fill-translate-anchor\",i);(p||\"translucent\"!==n)&&this._drawFill(t,l,o,e,y,g,f,c,u);const M=!o.hasDataDrivenOutlineColor&&o.outlineUsesFillColor&&m<1;d&&\"opaque\"!==n&&!M&&this._drawOutline(t,l,o,e,y,g)}_drawFill(n,f,u,c,d,p,m,y,g){if(m&&!g&&null==y)return;const{context:M,displayLevel:_,state:E,painter:v,pixelRatio:P,spriteMosaic:U,requestRender:I,allowDelayedRender:x}=n,D=u.fillMaterial,R=v.vectorTilesMaterialManager,S=P>i?2:1,T=this._fillProgramOptions;T.pattern=m;const h=R.getMaterialProgram(M,D,T);if(x&&null!=I&&!h.compiled)return void I();if(M.useProgram(h),null!=y){const{page:t}=y,i=U.getPageSize(t);null!=i&&(U.bind(M,a.LINEAR,t,e),h.setUniform2fv(\"u_mosaicSize\",i),h.setUniform1i(\"u_texture\",e))}h.setUniformMatrix3fv(\"u_displayMat3\",p===t.VIEWPORT?E.displayMat3:E.displayViewMat3),h.setUniform2fv(\"u_fillTranslation\",d),h.setUniform1f(\"u_depth\",u.z+s);let w=-1;for(const t of c){if(!t.layerData.has(f))continue;t.key.level!==w&&(w=t.key.level,D.setDataUniforms(h,_,u,w,U));const i=t.layerData.get(f);if(!i.fillIndexCount)continue;i.prepareForRendering(M);const n=i.fillVAO;if(null!=n){if(M.bindVAO(n),h.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.displayViewScreenMat3),M.setStencilFunction(l.EQUAL,t.stencilRef,255),m){const e=Math.max(2**(Math.round(_)-t.key.level),1),i=t.rangeX/(S*t.width*e);h.setUniform1f(\"u_patternFactor\",i)}if(g){const t=i.patternMap;if(!t)continue;for(const[i,n]of t){const t=U.getPageSize(i);null!=t&&(U.bind(M,a.LINEAR,i,e),h.setUniform2fv(\"u_mosaicSize\",t),h.setUniform1i(\"u_texture\",e),M.drawElements(r.TRIANGLES,n[1],o.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*n[0]))}}else M.drawElements(r.TRIANGLES,i.fillIndexCount,o.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*i.fillIndexStart);t.triangleCount+=i.fillIndexCount/3}}}_drawOutline(e,i,n,a,f,u){const{context:c,displayLevel:d,state:p,painter:m,pixelRatio:y,spriteMosaic:g,requestRender:M,allowDelayedRender:_}=e,E=n.outlineMaterial,v=m.vectorTilesMaterialManager,P=.75/y,U=this._outlineProgramOptions,I=v.getMaterialProgram(c,E,U);if(_&&null!=M&&!I.compiled)return void M();c.useProgram(I),I.setUniformMatrix3fv(\"u_displayMat3\",u===t.VIEWPORT?p.displayMat3:p.displayViewMat3),I.setUniform2fv(\"u_fillTranslation\",f),I.setUniform1f(\"u_depth\",n.z+s),I.setUniform1f(\"u_outline_width\",P);let x=-1;for(const t of a){if(!t.layerData.has(i))continue;t.key.level!==x&&(x=t.key.level,E.setDataUniforms(I,d,n,x,g));const e=t.layerData.get(i);if(e.prepareForRendering(c),!e.outlineIndexCount)continue;const a=e.outlineVAO;null!=a&&(c.bindVAO(a),I.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.displayViewScreenMat3),c.setStencilFunction(l.EQUAL,t.stencilRef,255),c.drawElements(r.TRIANGLES,e.outlineIndexCount,o.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*e.outlineIndexStart),t.triangleCount+=e.outlineIndexCount/3)}}}export{f as WGLBrushVTLFill};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport{TranslateAnchor as e}from\"../../vectorTiles/style/StyleDefinition.js\";import{vtlTextureBindingUnitSprites as t}from\"../definitions.js\";import i from\"./WGLBrush.js\";import{TextureSamplingMode as n,CompareFunction as a,PrimitiveType as r,DataType as o}from\"../../../../webgl/enums.js\";class s extends i{constructor(){super(...arguments),this._programOptions={id:!1,pattern:!1,sdf:!1}}dispose(){}drawMany(i,s){const{context:l,displayLevel:f,state:u,painter:c,pixelRatio:d,spriteMosaic:m,styleLayerUID:p,requestRender:g,allowDelayedRender:y}=i;if(!s.some((e=>e.layerData.get(p)?.lineIndexCount??!1)))return;const M=i.styleLayer,E=M.lineMaterial,_=c.vectorTilesMaterialManager,v=M.getPaintValue(\"line-translate\",f),U=M.getPaintValue(\"line-translate-anchor\",f),I=M.getPaintProperty(\"line-pattern\"),P=void 0!==I,x=P&&I.isDataDriven;let D,S;if(P&&!x){const e=I.getValue(f);D=m.getMosaicItemPosition(e)}let L=!1;if(!P){const e=M.getPaintProperty(\"line-dasharray\");if(S=void 0!==e,L=S&&e.isDataDriven,S&&!L){const t=e.getValue(f),i=M.getDashKey(t,M.getLayoutValue(\"line-cap\",f));D=m.getMosaicItemPosition(i)}}const N=1/d,R=this._programOptions;R.pattern=P,R.sdf=S;const T=_.getMaterialProgram(l,E,R);if(y&&null!=g&&!T.compiled)return void g();if(l.useProgram(T),T.setUniformMatrix3fv(\"u_displayViewMat3\",u.displayViewMat3),T.setUniformMatrix3fv(\"u_displayMat3\",U===e.VIEWPORT?u.displayMat3:u.displayViewMat3),T.setUniform2fv(\"u_lineTranslation\",v),T.setUniform1f(\"u_depth\",M.z),T.setUniform1f(\"u_antialiasing\",N),D&&null!=D){const{page:e}=D,i=m.getPageSize(e);null!=i&&(m.bind(l,n.LINEAR,e,t),T.setUniform2fv(\"u_mosaicSize\",i),T.setUniform1i(\"u_texture\",t))}let V=-1;for(const e of s){if(!e.layerData.has(p))continue;e.key.level!==V&&(V=e.key.level,E.setDataUniforms(T,f,M,V,m));const i=2**(f-V)/d;T.setUniform1f(\"u_zoomFactor\",i);const s=e.layerData.get(p);if(!s.lineIndexCount)continue;s.prepareForRendering(l);const u=s.vao;if(null!=u){if(l.bindVAO(u),T.setUniformMatrix3fv(\"u_dvsMat3\",e.transforms.displayViewScreenMat3),l.setStencilFunction(a.EQUAL,e.stencilRef,255),x||L){const e=s.patternMap;if(!e)continue;for(const[i,a]of e){const e=m.getPageSize(i);null!=e&&(m.bind(l,n.LINEAR,i,t),T.setUniform2fv(\"u_mosaicSize\",e),T.setUniform1i(\"u_texture\",t),l.drawElements(r.TRIANGLES,a[1],o.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*a[0]))}}else l.drawElements(r.TRIANGLES,s.lineIndexCount,o.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*s.lineIndexStart);e.triangleCount+=s.lineIndexCount/3}}}}export{s as WGLBrushVTLLine};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nconst n=128/Math.PI,t=256/360,r=1/Math.LN2;function u(n,t){return(n%=t)>=0?n:n+t}function o(t){return u(t*n,256)}function c(n){return u(n*t,256)}function e(n){return Math.log(n)*r}function f(n,t,r){return n*(1-r)+t*r}function i(n,t,r){return n>=t&&n<=r||n>=r&&n<=t}export{i as between,c as degToByte,f as interpolate,e as log2,u as positiveMod,o as radToByte};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport{create as e,fromValues as t}from\"../../../../../core/libs/gl-matrix-2/factories/vec2f32.js\";import{fadeDuration as i}from\"../../vectorTiles/decluttering/config.js\";import{RotationAlignment as a,SymbolPlacement as r,TranslateAnchor as n}from\"../../vectorTiles/style/StyleDefinition.js\";import{vtlTextureBindingUnitSprites as s,vtlTextureBindingUnitGlyphs as o}from\"../definitions.js\";import{degToByte as l}from\"../GeometryUtils.js\";import f from\"./WGLBrush.js\";import{TextureSamplingMode as c,PrimitiveType as u,DataType as p,CompareFunction as m}from\"../../../../webgl/enums.js\";const g=1/65536;class d extends f{constructor(){super(...arguments),this._iconProgramOptions={id:!1,sdf:!1},this._sdfProgramOptions={id:!1},this._spritesTextureSize=e()}dispose(){}drawMany(e,t){const i=e.styleLayer;this._drawIcons(e,i,t),this._drawText(e,i,t)}_drawIcons(e,t,o){const{context:f,displayLevel:c,painter:u,spriteMosaic:p,state:m,styleLayerUID:g,requestRender:d,allowDelayedRender:y}=e,_=t.iconMaterial,M=u.vectorTilesMaterialManager;let h,P=!1;for(const i of o)if(i.layerData.has(g)&&(h=i.layerData.get(g),h.iconPerPageElementsMap.size>0)){P=!0;break}if(!P)return;const U=t.getPaintValue(\"icon-translate\",c),E=t.getPaintValue(\"icon-translate-anchor\",c);let T=t.getLayoutValue(\"icon-rotation-alignment\",c);T===a.AUTO&&(T=t.getLayoutValue(\"symbol-placement\",c)===r.POINT?a.VIEWPORT:a.MAP);const x=T===a.MAP,S=t.getLayoutValue(\"icon-keep-upright\",c)&&x,v=h.isIconSDF,D=this._iconProgramOptions;D.sdf=v;const V=M.getMaterialProgram(f,_,D);if(y&&null!=d&&!V.compiled)return void d();f.useProgram(V),V.setUniformMatrix3fv(\"u_displayViewMat3\",T===a.MAP?m.displayViewMat3:m.displayMat3),V.setUniformMatrix3fv(\"u_displayMat3\",E===n.VIEWPORT?m.displayMat3:m.displayViewMat3),V.setUniform2fv(\"u_iconTranslation\",U),V.setUniform1f(\"u_depth\",t.z),V.setUniform1f(\"u_mapRotation\",l(m.rotation)),V.setUniform1f(\"u_keepUpright\",S?1:0),V.setUniform1f(\"u_level\",10*c),V.setUniform1i(\"u_texture\",s),V.setUniform1f(\"u_fadeDuration\",i/1e3);let R=-1;for(const i of o){if(!i.layerData.has(g))continue;if(i.key.level!==R&&(R=i.key.level,_.setDataUniforms(V,c,t,R,p)),h=i.layerData.get(g),0===h.iconPerPageElementsMap.size)continue;h.prepareForRendering(f),h.updateOpacityInfo();const a=h.iconVAO;if(null!=a){f.bindVAO(a),V.setUniformMatrix3fv(\"u_dvsMat3\",i.transforms.displayViewScreenMat3),V.setUniform1f(\"u_time\",(performance.now()-h.lastOpacityUpdate)/1e3);for(const[t,a]of h.iconPerPageElementsMap)this._renderIconRange(e,V,a,t,i)}}}_renderIconRange(e,t,i,a,r){const{context:n,spriteMosaic:o}=e;this._spritesTextureSize[0]=o.getWidth(a)/4,this._spritesTextureSize[1]=o.getHeight(a)/4,t.setUniform2fv(\"u_mosaicSize\",this._spritesTextureSize),o.bind(n,c.LINEAR,a,s),this._setStencilState(e,r),n.drawElements(u.TRIANGLES,i[1],p.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*i[0]),r.triangleCount+=i[1]/3}_drawText(e,s,f){const{context:c,displayLevel:u,glyphMosaic:p,painter:m,pixelRatio:d,spriteMosaic:y,state:_,styleLayerUID:M,requestRender:h,allowDelayedRender:P}=e,U=s.textMaterial,E=m.vectorTilesMaterialManager;let T,x=!1;for(const t of f)if(t.layerData.has(M)&&(T=t.layerData.get(M),T.glyphPerPageElementsMap.size>0)){x=!0;break}if(!x)return;const S=s.getPaintProperty(\"text-opacity\");if(S&&!S.isDataDriven&&0===S.getValue(u))return;const v=s.getPaintProperty(\"text-color\"),D=!v||v.isDataDriven||v.getValue(u)[3]>0,V=s.getPaintProperty(\"text-halo-width\"),R=s.getPaintProperty(\"text-halo-color\"),I=(!V||V.isDataDriven||V.getValue(u)>0)&&(!R||R.isDataDriven||R.getValue(u)[3]>0);if(!D&&!I)return;const A=24/8;let w=s.getLayoutValue(\"text-rotation-alignment\",u);w===a.AUTO&&(w=s.getLayoutValue(\"symbol-placement\",u)===r.POINT?a.VIEWPORT:a.MAP);const L=w===a.MAP,O=s.getLayoutValue(\"text-keep-upright\",u)&&L,N=.8*A/d;this._glyphTextureSize||(this._glyphTextureSize=t(p.width/4,p.height/4));const z=s.getPaintValue(\"text-translate\",u),b=s.getPaintValue(\"text-translate-anchor\",u),k=this._sdfProgramOptions,G=E.getMaterialProgram(c,U,k);if(P&&null!=h&&!G.compiled)return void h();c.useProgram(G),G.setUniformMatrix3fv(\"u_displayViewMat3\",w===a.MAP?_.displayViewMat3:_.displayMat3),G.setUniformMatrix3fv(\"u_displayMat3\",b===n.VIEWPORT?_.displayMat3:_.displayViewMat3),G.setUniform2fv(\"u_textTranslation\",z),G.setUniform1f(\"u_depth\",s.z+g),G.setUniform2fv(\"u_mosaicSize\",this._glyphTextureSize),G.setUniform1f(\"u_mapRotation\",l(_.rotation)),G.setUniform1f(\"u_keepUpright\",O?1:0),G.setUniform1f(\"u_level\",10*u),G.setUniform1i(\"u_texture\",o),G.setUniform1f(\"u_antialiasingWidth\",N),G.setUniform1f(\"u_fadeDuration\",i/1e3);let W=-1;for(const t of f){if(!t.layerData.has(M))continue;if(t.key.level!==W&&(W=t.key.level,U.setDataUniforms(G,u,s,W,y)),T=t.layerData.get(M),0===T.glyphPerPageElementsMap.size)continue;T.prepareForRendering(c),T.updateOpacityInfo();const i=T.textVAO;if(null==i)continue;c.bindVAO(i),G.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.displayViewScreenMat3),this._setStencilState(e,t);const a=(performance.now()-T.lastOpacityUpdate)/1e3;G.setUniform1f(\"u_time\",a),T.glyphPerPageElementsMap.forEach(((e,i)=>{this._renderGlyphRange(c,e,i,p,G,I,D,t)}))}}_renderGlyphRange(e,t,i,a,r,n,s,l){a.bind(e,c.LINEAR,i,o),n&&(r.setUniform1f(\"u_halo\",1),e.drawElements(u.TRIANGLES,t[1],p.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*t[0]),l.triangleCount+=t[1]/3),s&&(r.setUniform1f(\"u_halo\",0),e.drawElements(u.TRIANGLES,t[1],p.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*t[0]),l.triangleCount+=t[1]/3)}_setStencilState(e,t){const{context:i,is3D:a,stencilSymbols:r}=e;if(i.setStencilTestEnabled(!0),r)return i.setStencilWriteMask(255),void i.setStencilFunction(m.ALWAYS,t.stencilRef,255);i.setStencilWriteMask(0),a?i.setStencilFunction(m.EQUAL,t.stencilRef,255):i.setStencilFunction(m.GREATER,255,255)}}export{d as WGLBrushVTLSymbol};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport r from\"./webgl/brushes/BrushBitmap.js\";import s from\"./webgl/brushes/BrushClip.js\";import e from\"./webgl/brushes/WGLBrushStencil.js\";import l from\"./webgl/brushes/WGLBrushTileDebugInfo.js\";import{WGLBrushVTLBackground as o}from\"./webgl/brushes/WGLBrushVTLBackground.js\";import{WGLBrushVTLCircle as b}from\"./webgl/brushes/WGLBrushVTLCircle.js\";import{WGLBrushVTLFill as i}from\"./webgl/brushes/WGLBrushVTLFill.js\";import{WGLBrushVTLLine as m}from\"./webgl/brushes/WGLBrushVTLLine.js\";import{WGLBrushVTLSymbol as u}from\"./webgl/brushes/WGLBrushVTLSymbol.js\";const t={clip:s,stencil:e,bitmap:r,tileDebugInfo:l,vtlBackground:o,vtlFill:i,vtlLine:m,vtlCircle:b,vtlSymbol:u};export{t as brushes};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport e from\"../../../../core/Error.js\";import r from\"../../../../core/Logger.js\";import{e as t}from\"../../../../chunks/earcut.js\";import{set as n}from\"../../../../core/libs/gl-matrix-2/math/vec2.js\";import{create as o}from\"../../../../core/libs/gl-matrix-2/factories/vec2f64.js\";import{convertFromNestedArray as s,convertFromPolygon as i}from\"../../../../layers/graphics/featureConversionUtils.js\";import c from\"../../../../layers/graphics/OptimizedGeometry.js\";import{i1616to32 as a}from\"./number.js\";import{BufferObject as f}from\"../../../webgl/BufferObject.js\";import{PrimitiveType as m,Usage as h,DataType as u}from\"../../../webgl/enums.js\";const l=r=>{switch(r.BYTES_PER_ELEMENT){case 1:return u.UNSIGNED_BYTE;case 2:return u.UNSIGNED_SHORT;case 4:return u.UNSIGNED_INT;default:throw new e(\"Cannot get DataType of array\")}},y=(e,r,t,n)=>{let o=0;for(let s=1;s<t;s++){const t=e[2*(r+s-1)],n=e[2*(r+s-1)+1];o+=(e[2*(r+s)]-t)*(e[2*(r+s)+1]+n)}return n?o>0:o<0},g=({coords:e,lengths:r},n)=>{const o=[];for(let s=0,i=0;s<r.length;i+=r[s],s+=1){const c=i,a=[];for(;s<r.length-1&&y(e,i+r[s],r[s+1],n);s+=1,i+=r[s])a.push(i+r[s]-c);const f=e.slice(2*c,2*(i+r[s])),m=t(f,a,2);for(const e of m)o.push(e+c)}return o};class p{constructor(e,r,t,n=!1){this._cache={},this.vertices=e,this.indices=r,this.primitiveType=t,this.isMapSpace=n}static fromPath(e){const r=s(new c,e.path,!1,!1),t=r.coords,n=new Uint32Array(g(r,!0)),o=new Uint32Array(t.length/2);for(let s=0;s<o.length;s++)o[s]=a(Math.floor(t[2*s]),Math.floor(t[2*s+1]));return new p({geometry:o},n,m.TRIANGLES)}static fromGeometry(t,n){const o=n.geometry?.type;switch(o){case\"polygon\":return p.fromPolygon(t,n.geometry);case\"extent\":return p.fromMapExtent(t,n.geometry);default:return r.getLogger(\"esri.views.2d.engine.webgl.Mesh2D\").error(new e(\"mapview-bad-type\",`Unable to create a mesh from type ${o}`,n)),p.fromScreenExtent({xmin:0,ymin:0,xmax:1,ymax:1})}}static fromPolygon(e,r){const t=i(new c,r,!1,!1),s=t.coords,f=new Uint32Array(g(t,!1)),h=new Uint32Array(s.length/2),u=o(),l=o();for(let o=0;o<h.length;o++)n(u,s[2*o],s[2*o+1]),e.toScreen(l,u),h[o]=a(Math.floor(l[0]),Math.floor(l[1]));return new p({geometry:h},f,m.TRIANGLES,!0)}static fromScreenExtent({xmin:e,xmax:r,ymin:t,ymax:n}){const o={geometry:new Uint32Array([a(e,t),a(r,t),a(e,n),a(e,n),a(r,t),a(r,n)])},s=new Uint32Array([0,1,2,3,4,5]);return new p(o,s,m.TRIANGLES)}static fromMapExtent(e,r){const[t,n]=e.toScreen([0,0],[r.xmin,r.ymin]),[o,s]=e.toScreen([0,0],[r.xmax,r.ymax]),i={geometry:new Uint32Array([a(t,n),a(o,n),a(t,s),a(t,s),a(o,n),a(o,s)])},c=new Uint32Array([0,1,2,3,4,5]);return new p(i,c,m.TRIANGLES)}destroy(){null!=this._cache.indexBuffer&&this._cache.indexBuffer.dispose(),this._cache.vertexBuffers?.forEach((e=>e?.dispose())),this._cache.indexBuffer=this._cache.vertexBuffers=null}get elementType(){return l(this.indices)}getIndexBuffer(e,r=h.STATIC_DRAW){return this._cache.indexBuffer??=f.createIndex(e,r,this.indices),this._cache.indexBuffer}getVertexBuffers(e,r=h.STATIC_DRAW){return this._cache.vertexBuffers??=new Map(Object.keys(this.vertices).reduce(((t,n)=>(t.push([n,f.createVertex(e,r,this.vertices[n])]),t)),new Array)),this._cache.vertexBuffers}}export{p as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport e from\"../../../../core/Error.js\";import t from\"../../../../core/Logger.js\";import{watch as r}from\"../../../../core/reactiveUtils.js\";import{create as s}from\"../../../../core/libs/gl-matrix-2/factories/mat3f32.js\";import{DisplayObject as i}from\"../DisplayObject.js\";import a from\"./Mesh2D.js\";import{createScreenExtent as o}from\"../../support/clippingUtils.js\";import{VertexArrayObject as h}from\"../../../webgl/VertexArrayObject.js\";class c extends i{constructor(e,t){super(),this._clip=t,this._cache={},this.stage=e,this._handle=r((()=>t.version),(()=>this._invalidate())),this.ready()}static fromClipArea(e,t){return new c(e,t)}_destroyGL(){null!=this._cache.mesh&&(this._cache.mesh.destroy(),this._cache.mesh=null),null!=this._cache.vao&&(this._cache.vao.dispose(),this._cache.vao=null)}destroy(){this._destroyGL(),this._handle.remove()}getVAO(e,t,r,s){const[i,a]=t.size;if(\"geometry\"!==this._clip.type&&this._lastWidth===i&&this._lastHeight===a||(this._lastWidth=i,this._lastHeight=a,this._destroyGL()),null==this._cache.vao){const i=this._createMesh(t,this._clip),a=i.getIndexBuffer(e),o=i.getVertexBuffers(e);this._cache.mesh=i,this._cache.vao=new h(e,r,s,o,a)}return this._cache.vao}_createTransforms(){return{displayViewScreenMat3:s()}}_invalidate(){this._destroyGL(),this.requestRender()}_createMesh(r,s){switch(s.type){case\"rect\":return a.fromScreenExtent(o(s,r.size[0],r.size[1]));case\"path\":return a.fromPath(s);case\"geometry\":return a.fromGeometry(r,s);default:return t.getLogger(\"esri.views.2d.engine.webgl.ClippingInfo\").error(new e(\"mapview-bad-type\",\"Unable to create ClippingInfo mesh from clip of type: ${clip.type}\")),a.fromScreenExtent({xmin:0,ymin:0,xmax:1,ymax:1})}}}export{c as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport\"../../../../core/has.js\";import{brushes as s}from\"../brushes.js\";import{Container as e}from\"../Container.js\";import r from\"./ClippingInfo.js\";import{WGLDrawPhase as i}from\"./enums.js\";class n extends e{set clips(s){super.clips=s,this._updateClippingInfo(s)}renderChildren(s){s.painter.setPipelineState(null),null==this._renderPasses&&(this._renderPasses=this.prepareRenderPasses(s.painter));for(const r of this._renderPasses)try{r.render(s)}catch(e){}}prepareRenderPasses(e){return[e.registerRenderPass({name:\"clip\",brushes:[s.clip],target:()=>this._clippingInfos,drawPhase:i.MAP|i.LABEL|i.LABEL_ALPHA|i.DEBUG|i.HIGHLIGHT})]}_updateClippingInfo(s){null!=this._clippingInfos&&(this._clippingInfos.forEach((s=>s.destroy())),this._clippingInfos=null),null!=s&&s.length&&(this._clippingInfos=s.items.map((s=>r.fromClipArea(this.stage,s)))),this.requestRender()}}export{n as default};\n"],"mappings":"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"}