import{fi as t,fj as s,fk as i,ch as e,b7 as h,X as r,s as a,an as p,ao as n,ap as o}from"./p-3013819f.js";import{r as c,n as l}from"./p-c3085a45.js";import{m,u as f}from"./p-4e55d8f0.js";import{i as u}from"./p-0482b904.js";import"./p-3b51db5e.js";import"./p-033a99b5.js";import"./p-0d83e514.js";import"./p-7b13247d.js";import"./p-b362a32c.js";import"./p-8567e6fe.js";import"./p-c268fbe3.js";import"./p-d97e7de8.js";import"./p-c7810a6f.js";import"./p-30a1f911.js";import"./p-201cec5f.js";import"./p-89242a33.js";import"./p-a897fcf8.js";import"./p-595ce045.js";import"./p-10e5b6ea.js";import"./p-3b8b0ae8.js";import"./p-508fdb0a.js";import"./p-ec95a4fb.js";import"./p-1f0b604e.js";import"./p-347800d3.js";import"./p-94b15954.js";import"./p-2d8c68ca.js";const j=new Set([102113,102100,3857,3785,900913]),d=[0,0];let w=class extends(u(c(m(f)))){constructor(){super(...arguments),this._tileStrategy=null,this._fetchQueue=null,this.layer=null}get tileMatrixSet(){const t=this._getTileMatrixSetBySpatialReference(this.layer.activeLayer);return t?(t.id!==this.layer.activeLayer.tileMatrixSetId&&(this.layer.activeLayer.tileMatrixSetId=t.id),t):null}update(t){this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume()}attach(){const e=this.tileMatrixSet?.tileInfo;e&&(this._tileInfoView=new t(e),this._fetchQueue=new s({tileInfoView:this._tileInfoView,concurrency:16,process:(t,s)=>this.fetchTile(t,s)}),this._tileStrategy=new i({cachePolicy:"keep",resampling:!0,acquireTile:t=>this.acquireTile(t),releaseTile:t=>this.releaseTile(t),tileInfoView:this._tileInfoView}),this.addAttachHandles(this._updatingHandles.add((()=>[this.layer?.activeLayer?.styleId,this.tileMatrixSet]),(()=>this.doRefresh()))),super.attach())}detach(){super.detach(),this._tileStrategy?.destroy(),this._fetchQueue?.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){return this.layer.activeLayer.tileMatrixSets?.some((s=>e(s.tileInfo?.spatialReference,t)))??!1}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh((t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t))))}}acquireTile(t){const s=this._bitmapView.createTile(t),i=s.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(d,s.key),i.resolution=this._tileInfoView.getTileResolution(s.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(s)),this._bitmapView.addChild(s),this.requestUpdate(),s}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",(()=>t.destroy())),this.requestUpdate()}async fetchTile(t,s={}){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:e,resamplingLevel:a=0}=s;if(!i)return this._fetchImage(t,e);const p=new h(0,0,0,0);let n;try{await i.fetchAvailabilityUpsample(t.level,t.row,t.col,p,{signal:e}),n=await this._fetchImage(p,e)}catch(i){if(r(i))throw i;if(a<3){const i=this._tileInfoView.getTileParentId(t.id);if(i){const e=new h(i),r=await this.fetchTile(e,{...s,resamplingLevel:a+1});return l(this._tileInfoView,r,e,t)}}throw i}return l(this._tileInfoView,n,p,t)}canResume(){const t=super.canResume();return t?null!==this.tileMatrixSet:t}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const s=await this._fetchQueue.push(t.key);t.bitmap.source=s,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",(()=>this.requestUpdate()))}catch(t){r(t)||a.getLogger(this).error(t)}this.requestUpdate()}}async _fetchImage(t,s){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:s})}_getTileMatrixSetBySpatialReference(t){const s=this.view.spatialReference;if(!t.tileMatrixSets)return null;let i=t.tileMatrixSets.find((t=>e(t.tileInfo?.spatialReference,s)));return!i&&s.isWebMercator&&(i=t.tileMatrixSets.find((t=>j.has(t.tileInfo?.spatialReference.wkid??-1)))),i}};p([n({readOnly:!0})],w.prototype,"tileMatrixSet",null),w=p([o("esri.views.2d.layers.WMTSLayerView2D")],w);const b=w;export default b;
//# sourceMappingURL=p-de61ba46.js.map