import{an as t,ao as s,fO as i,ap as e,ah as r,a as o,C as p,cH as n,dC as a}from"./p-3013819f.js";import{n as h,X as c}from"./p-28a20b6f.js";import"./p-3b51db5e.js";import"./p-7b13247d.js";import"./p-4e55d8f0.js";import"./p-0d83e514.js";import"./p-b362a32c.js";import"./p-8567e6fe.js";import"./p-c268fbe3.js";import"./p-b6b871c6.js";import"./p-ffa11fc1.js";import"./p-808395fb.js";import"./p-30a1f911.js";import"./p-508fdb0a.js";import"./p-f1aede5a.js";import"./p-94b15954.js";import"./p-a9376829.js";import"./p-3811f238.js";import"./p-e6812c2f.js";import"./p-a925664a.js";import"./p-a897fcf8.js";import"./p-c7810a6f.js";import"./p-201cec5f.js";import"./p-89242a33.js";import"./p-7580bdba.js";import"./p-a62b18ce.js";import"./p-2d8c68ca.js";import"./p-d97e7de8.js";import"./p-595ce045.js";import"./p-10e5b6ea.js";import"./p-3b8b0ae8.js";import"./p-ec95a4fb.js";import"./p-1f0b604e.js";import"./p-347800d3.js";import"./p-9a31fdd8.js";import"./p-5f4832a0.js";import"./p-44a36259.js";import"./p-72db18d5.js";import"./p-90032174.js";import"./p-c779faaf.js";import"./p-0482b904.js";const m=r=>{let o=class extends r{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...t){super(...t),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&"connected"===this._streamConnectionStatus?"paused":this._streamConnectionStatus}_onSuspendedChange(t){t?this._doPause():this._isUserPaused||this._doResume()}};return t([s()],o.prototype,"_isUserPaused",void 0),t([s({readOnly:!0})],o.prototype,"connectionStatus",null),t([s({type:i})],o.prototype,"filter",void 0),o=t([e("esri.layers.mixins.StreamLayerView")],o),o};let d=class extends(m(c)){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([r((()=>this.layer.customParameters),(t=>this._worker.streamMessenger.updateCustomParameters(t))),this.layer.on("send-message-to-socket",(t=>this._worker.streamMessenger.sendMessageToSocket(t))),this.layer.on("send-message-to-client",(t=>{this._worker.streamMessenger.sendMessageToClient(t),this._isUserPaused&&"type"in t&&"clear"===t.type&&this.incrementSourceRefreshVersion()})),r((()=>this.layer.purgeOptions),(()=>this._update())),r((()=>this.suspended),this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new o("stream-controller",this.pipelineErrorString):null}on(t,s){if(Array.isArray(t))return p(t.map((t=>this.on(t,s))));const i=["data-received","message-received"].includes(t);i&&this._worker.streamMessenger.enableEvent(t,!0);const e=super.on(t,s),r=this;return n((()=>{e.remove(),i&&(r._worker.closed||r.hasEventListener(t)||r._worker.streamMessenger.enableEvent(t,!1))}))}queryLatestObservations(t,s){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new o("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");return h(this._worker.features.executeQueryForLatestObservations(this._cleanUpQuery(t),s).then((t=>{const s=a.fromJSON(t);return s.features.forEach((t=>{t.layer=this.layer,t.sourceLayer=this.layer})),s})),new a({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){null!=this._refreshInterval&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval((()=>this.incrementSourceRefreshVersion()),this.layer.updateInterval)}_doDisconnect(){this._worker.streamMessenger.disconnect(),this._doPause()}_doConnect(){this._worker.streamMessenger.connect(),this.resume()}_doClear(){this._worker.streamMessenger.clear(),null==this._refreshInterval&&this.incrementSourceRefreshVersion()}_createClientOptions(){const t=super._createClientOptions(),s=this;return{...t,get container(){return s.featureContainer},setProperty:t=>{this.set(t.propertyName,t.value)}}}};t([s()],d.prototype,"pipelineConnectionStatus",void 0),t([s()],d.prototype,"pipelineErrorString",void 0),t([s({readOnly:!0})],d.prototype,"connectionError",null),t([s({readOnly:!0})],d.prototype,"_streamConnectionStatus",null),d=t([e("esri.views.2d.layers.StreamLayerView2D")],d);const l=d;export default l;
//# sourceMappingURL=p-7dd30df2.js.map