import{aX as e,a as t,hV as s,hT as i,hR as r,aj as n,X as a,s as o,ch as l,cs as p,U as d,aM as c,hS as u}from"./p-028496e2.js";import{o as h,r as f,e as m,n as y,t as j}from"./p-854d8fad.js";import{m as g}from"./p-7d45ac5e.js";import{x as w,j as I}from"./p-3a28ec18.js";import{$ as b}from"./p-ec8156a6.js";import{I as F,N as T,E as x}from"./p-d3cdfb0f.js";import{a as R,i as E,o as S}from"./p-5ef5a90d.js";import{j as _,p as v,d as D,f as O,y as P}from"./p-2bdf7fe8.js";import"./p-3b51db5e.js";import"./p-1f0b604e.js";import"./p-347800d3.js";import"./p-94b15954.js";import"./p-2fe793ef.js";import"./p-d1ccb3c6.js";import"./p-4f73c6ea.js";import"./p-70a81651.js";import"./p-ecde740d.js";import"./p-976040d8.js";import"./p-19df9fac.js";import"./p-8979c003.js";import"./p-498d12fd.js";import"./p-b821ae32.js";const Q={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsQueryWithDistance:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsQueryWithResultType:!1,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};class q{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){this._queryEngine?.destroy(),this._queryEngine=this._createDefaultAttributes=null}async load(n,a={}){this._loadOptions={url:n.url,customParameters:n.customParameters};const o=[],[l]=await Promise.all([n.url?this._fetch(a?.signal):null,this._checkProjection(n.spatialReference)]),d=F(l,{geometryType:n.geometryType}),c=n.fields||d.fields||[],h=null!=n.hasZ?n.hasZ:d.hasZ,f=d.geometryType;let m=n.objectIdField||d.objectIdFieldName||"__OBJECTID";const y=n.spatialReference||p;let j=n.timeInfo;c===d.fields&&d.unknownFields.length>0&&o.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:d.unknownFields}});const w=new e(c);let I=w.get(m);I?("esriFieldTypeString"!==I.type&&(I.type="esriFieldTypeOID"),I.editable=!1,I.nullable=!1,m=I.name):(I={alias:m,name:m,type:"string"===d.objectIdFieldType?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},c.unshift(I));const T={};for(const e of c){if(null==e.name&&(e.name=e.alias),null==e.alias&&(e.alias=e.name),!e.name)throw new t("geojson-layer:invalid-field-name","field name is missing",{field:e});if(!s.jsonValues.includes(e.type))throw new t("geojson-layer:invalid-field-type",`invalid type for field "${e.name}"`,{field:e});if(e.name!==I.name){const t=i(e);void 0!==t&&(T[e.name]=t)}null==e.length&&(e.length=r(e))}if(j){if(j.startTimeField){const e=w.get(j.startTimeField);e?(j.startTimeField=e.name,e.type="esriFieldTypeDate"):j.startTimeField=null}if(j.endTimeField){const e=w.get(j.endTimeField);e?(j.endTimeField=e.name,e.type="esriFieldTypeDate"):j.endTimeField=null}if(j.trackIdField){const e=w.get(j.trackIdField);e?j.trackIdField=e.name:(j.trackIdField=null,o.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:j}}))}j.startTimeField||j.endTimeField||(o.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:j}}),j=null)}const x=f?S(f):void 0,_=w.dateFields.length?{timeZoneIANA:u}:null,v={warnings:o,featureErrors:[],layerDefinition:{...Q,drawingInfo:x??void 0,templates:R(T),extent:void 0,geometryType:f,objectIdField:m,fields:c,hasZ:!!h,timeInfo:j,dateFieldsTimeReference:_}};this._queryEngine=new b({fieldsIndex:e.fromLayerJSON({fields:c,timeInfo:j,dateFieldsTimeReference:_}),geometryType:f,hasM:!1,hasZ:h,objectIdField:m,spatialReference:y,timeInfo:j,featureStore:new g({geometryType:f,hasM:!1,hasZ:h}),cacheSpatialQueries:!0});const D=this._queryEngine.fieldsIndex.requiredFields.indexOf(I);D>-1&&this._queryEngine.fieldsIndex.requiredFields.splice(D,1),this._createDefaultAttributes=E(T,m);const O=await this._createFeatures(l);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,O);const P=this._normalizeFeatures(O,v.featureErrors);this._queryEngine.featureStore.addMany(P);const{fullExtent:q,timeExtent:Z}=await this._queryEngine.fetchRecomputedExtents();if(v.layerDefinition.extent=q,Z){const{start:e,end:t}=Z;v.layerDefinition.timeInfo.timeExtent=[e,t]}return v}async applyEdits(e){const{spatialReference:t,geometryType:s}=this._queryEngine;return await Promise.all([_(t,s),w(e.adds,t),w(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){this._loadOptions.customParameters=e,this._snapshotTask?.abort(),this._snapshotTask=n(this._snapshotFeatures),this._snapshotTask.promise.then((e=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,e);const t=this._normalizeFeatures(e);t&&this._queryEngine.featureStore.addMany(t)}),(e=>{this._queryEngine.featureStore.clear(),a(e)||o.getLogger("esri.layers.GeoJSONLayer").error(new t("geojson-layer:refresh","An error occurred during refresh",{error:e}))})),await this._waitSnapshotComplete();const{fullExtent:s,timeExtent:i}=await this._queryEngine.fetchRecomputedExtents();return{extent:s,timeExtent:i}}async _createFeatures(e){if(null==e)return[];const{geometryType:t,hasZ:s,objectIdField:i}=this._queryEngine,r=T(e,{geometryType:t,hasZ:s,objectIdField:i});if(!l(this._queryEngine.spatialReference,p))for(const e of r)null!=e.geometry&&(e.geometry=h(I(f(e.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),p,this._queryEngine.spatialReference)));return r}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:s}=this._loadOptions,i=(await d(t,{responseType:"json",query:{...s},signal:e})).data;return x(i),i}_normalizeFeatures(e,t){const{objectIdField:s,fieldsIndex:i}=this._queryEngine,r=[];for(const n of e){const e=this._createDefaultAttributes(),a=v(i,e,n.attributes,!0);a?t?.push(a):(this._assignObjectId(e,n.attributes,!0),n.attributes=e,n.objectId=e[s],r.push(n))}return r}async _applyEdits(e){const{adds:t,updates:s,deletes:i}=e,r={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t?.length&&this._applyAddEdits(r,t),s?.length&&this._applyUpdateEdits(r,s),i?.length){for(const e of i)r.deleteResults.push(D(e));this._queryEngine.featureStore.removeManyById(i)}const{fullExtent:n,timeExtent:a}=await this._queryEngine.fetchRecomputedExtents();return{extent:n,timeExtent:a,featureEditResults:r}}_applyAddEdits(e,t){const{addResults:s}=e,{geometryType:i,hasM:r,hasZ:n,objectIdField:a,spatialReference:o,featureStore:l,fieldsIndex:p}=this._queryEngine,d=[];for(const r of t){if(r.geometry&&i!==c(r.geometry)){s.push(O("Incorrect geometry type."));continue}const t=this._createDefaultAttributes(),n=v(p,t,r.attributes);if(n)s.push(n);else{if(this._assignObjectId(t,r.attributes),r.attributes=t,null!=r.uid){const t=r.attributes[a];e.uidToObjectId[r.uid]=t}if(null!=r.geometry){const e=r.geometry.spatialReference??o;r.geometry=I(P(r.geometry,e),e,o)}d.push(r),s.push(D(r.attributes[a]))}}l.addMany(m([],d,i,n,r,a))}_applyUpdateEdits({updateResults:e},t){const{geometryType:s,hasM:i,hasZ:r,objectIdField:n,spatialReference:a,featureStore:o,fieldsIndex:l}=this._queryEngine;for(const p of t){const{attributes:t,geometry:d}=p,u=t?.[n];if(null==u){e.push(O(`Identifier field ${n} missing`));continue}if(!o.has(u)){e.push(O(`Feature with object id ${u} missing`));continue}const h=y(o.getFeature(u),s,r,i);if(null!=d){if(s!==c(d)){e.push(O("Incorrect geometry type."));continue}const t=d.spatialReference??a;h.geometry=I(P(d,t),t,a)}if(t){const s=v(l,h.attributes,t);if(s){e.push(s);continue}}o.add(j(h,s,r,i,n)),e.push(D(u))}}_createObjectIdGenerator(e,t){const s=e.fieldsIndex.get(e.objectIdField);if("esriFieldTypeString"===s.type)return()=>s.name+"-"+Date.now().toString(16);let i=Number.NEGATIVE_INFINITY;for(const e of t)e.objectId&&(i=Math.max(i,e.objectId));return i=Math.max(0,i)+1,()=>i++}_assignObjectId(e,t,s=!1){const i=this._queryEngine.objectIdField;e[i]=s&&i in t?t[i]:this._objectIdGenerator()}async _checkProjection(e){try{await w(p,e)}catch{throw new t("geojson-layer","Projection not supported")}}}export default q;
//# sourceMappingURL=p-87d03a34.js.map